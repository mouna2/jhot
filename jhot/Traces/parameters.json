[{"id":1, "parametername":"ApplicationModel newValue", "parametertype":"org.jhotdraw.app.ApplicationModel", "parameterclass":4, "classid":1, "classname":"org.jhotdraw.app.AbstractApplication", "methodid":28, "methodname":"org.jhotdraw.app.AbstractApplication.setModel(org.jhotdraw.app.ApplicationModel)", "isreturn":0, "sourcecode":"public void setModel(ApplicationModel newValue) {\r\n    ApplicationModel oldValue = model;\r\n    model = newValue;\r\n    firePropertyChange(\"model\", oldValue, newValue);\r\n}"},
 {"id":2, "parametername":"View newValue", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":1, "classname":"org.jhotdraw.app.AbstractApplication", "methodid":26, "methodname":"org.jhotdraw.app.AbstractApplication.setActiveView(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Sets the active view. Calls deactivate on the previously\r\n * active view, and then calls activate on the given view.\r\n *\r\n * @param newValue\r\n * \t\tActive view, can be null.\r\n */\r\npublic void setActiveView(View newValue) {\r\n    View oldValue = activeView;\r\n    if ((activeView) != null) {\r\n        activeView.deactivate();\r\n    }\r\n    activeView = newValue;\r\n    if ((activeView) != null) {\r\n        activeView.activate();\r\n    }\r\n    firePropertyChange(Application.ACTIVE_VIEW_PROPERTY, oldValue, newValue);\r\n}"},
 {"id":3, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":1, "classname":"org.jhotdraw.app.AbstractApplication", "methodid":19, "methodname":"org.jhotdraw.app.AbstractApplication.initViewActions(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected abstract void initViewActions(View p);"},
 {"id":4, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":1, "classname":"org.jhotdraw.app.AbstractApplication", "methodid":23, "methodname":"org.jhotdraw.app.AbstractApplication.remove(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void remove(View p) {\r\n    hide(p);\r\n    int oldCount = views.size();\r\n    views.remove(p);\r\n    p.setApplication(null);\r\n    firePropertyChange(AbstractApplication.VIEW_COUNT_PROPERTY, oldCount, views.size());\r\n}"},
 {"id":5, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":1, "classname":"org.jhotdraw.app.AbstractApplication", "methodid":2, "methodname":"org.jhotdraw.app.AbstractApplication.add(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void add(View p) {\r\n    if ((p.getApplication()) != (this)) {\r\n        int oldCount = views.size();\r\n        views.add(p);\r\n        p.setApplication(this);\r\n        firePropertyChange(AbstractApplication.VIEW_COUNT_PROPERTY, oldCount, views.size());\r\n    }\r\n}"},
 {"id":6, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":1, "classname":"org.jhotdraw.app.AbstractApplication", "methodid":11, "methodname":"org.jhotdraw.app.AbstractApplication.dispose(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void dispose(View p) {\r\n    remove(p);\r\n    p.dispose();\r\n}"},
 {"id":7, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":1, "classname":"org.jhotdraw.app.AbstractApplication", "methodid":5, "methodname":"org.jhotdraw.app.AbstractApplication.addWindow(java.awt.Window,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void addWindow(Window window, View p) {\r\n}"},
 {"id":8, "parametername":"Application newValue", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":2, "classname":"org.jhotdraw.app.AbstractView", "methodid":54, "methodname":"org.jhotdraw.app.AbstractView.setApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"// Variables declaration - do not modify//GEN-BEGIN:variables\r\n// End of variables declaration//GEN-END:variables\r\npublic void setApplication(Application newValue) {\r\n    Application oldValue = application;\r\n    application = newValue;\r\n    firePropertyChange(\"application\", oldValue, newValue);\r\n}"},
 {"id":9, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":3, "classname":"org.jhotdraw.app.Application", "methodid":62, "methodname":"org.jhotdraw.app.Application.add(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Adds a view to this application.\r\n * Fires a \"documentCount\" property change event.\r\n * Invokes method setApplication(this) on the view object.\r\n */\r\npublic void add(View p);"},
 {"id":10, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":3, "classname":"org.jhotdraw.app.Application", "methodid":83, "methodname":"org.jhotdraw.app.Application.remove(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Removes a view from this application and removes it from the users\r\n * view.\r\n * Fires a \"documentCount\" property change event.\r\n * Invokes method setApplication(null) on the view object.\r\n */\r\npublic void remove(View p);"},
 {"id":11, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":3, "classname":"org.jhotdraw.app.Application", "methodid":89, "methodname":"org.jhotdraw.app.Application.show(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Shows a view.\r\n */\r\npublic void show(View p);"},
 {"id":12, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":3, "classname":"org.jhotdraw.app.Application", "methodid":77, "methodname":"org.jhotdraw.app.Application.hide(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Hides a view.\r\n */\r\npublic void hide(View p);"},
 {"id":13, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":3, "classname":"org.jhotdraw.app.Application", "methodid":70, "methodname":"org.jhotdraw.app.Application.dispose(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * This is a convenience method for removing a view and disposing it.\r\n */\r\npublic void dispose(View p);"},
 {"id":14, "parametername":"ApplicationModel newValue", "parametertype":"org.jhotdraw.app.ApplicationModel", "parameterclass":4, "classid":3, "classname":"org.jhotdraw.app.Application", "methodid":88, "methodname":"org.jhotdraw.app.Application.setModel(org.jhotdraw.app.ApplicationModel)", "isreturn":0, "sourcecode":"/**\r\n * Sets the application model.\r\n */\r\npublic void setModel(ApplicationModel newValue);"},
 {"id":15, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":3, "classname":"org.jhotdraw.app.Application", "methodid":66, "methodname":"org.jhotdraw.app.Application.addWindow(java.awt.Window,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Adds a (non-palette) window to the application.\r\n *\r\n * @param window\r\n * \t\tThe window.\r\n * @param view\r\n * \t\tThe View to which this window is associated, or null,\r\n * \t\tif the window is associated to the application.\r\n */\r\npublic void addWindow(Window window, View view);"},
 {"id":16, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":4, "classname":"org.jhotdraw.app.ApplicationModel", "methodid":101, "methodname":"org.jhotdraw.app.ApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View v);"},
 {"id":17, "parametername":"View v", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":4, "classname":"org.jhotdraw.app.ApplicationModel", "methodid":101, "methodname":"org.jhotdraw.app.ApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View v);"},
 {"id":18, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":4, "classname":"org.jhotdraw.app.ApplicationModel", "methodid":100, "methodname":"org.jhotdraw.app.ApplicationModel.initApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"public void initApplication(Application a);"},
 {"id":19, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":4, "classname":"org.jhotdraw.app.ApplicationModel", "methodid":94, "methodname":"org.jhotdraw.app.ApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates tool bars.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * \t\tApplication.\r\n * @param v\r\n * \t\tThe view for which the toolbars need to be created, or null\r\n * \t\tif the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View v);"},
 {"id":20, "parametername":"View v", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":4, "classname":"org.jhotdraw.app.ApplicationModel", "methodid":94, "methodname":"org.jhotdraw.app.ApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates tool bars.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * \t\tApplication.\r\n * @param v\r\n * \t\tThe view for which the toolbars need to be created, or null\r\n * \t\tif the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View v);"},
 {"id":21, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":4, "classname":"org.jhotdraw.app.ApplicationModel", "methodid":93, "methodname":"org.jhotdraw.app.ApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates menus.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * \t\tApplication.\r\n * @param v\r\n * \t\tThe view for which the toolbars need to be created, or null\r\n * \t\tif the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JMenu> createMenus(Application a, View v);"},
 {"id":22, "parametername":"View v", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":4, "classname":"org.jhotdraw.app.ApplicationModel", "methodid":93, "methodname":"org.jhotdraw.app.ApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates menus.\r\n * <p>\r\n * Depending on the document interface of the application, this method\r\n * may be invoked only once for the application, or for each opened view.\r\n * <p>\r\n *\r\n * @param a\r\n * \t\tApplication.\r\n * @param v\r\n * \t\tThe view for which the toolbars need to be created, or null\r\n * \t\tif the toolbar needs to be shared with multiple views.\r\n */\r\npublic List<JMenu> createMenus(Application a, View v);"},
 {"id":23, "parametername":"View v", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":5, "classname":"org.jhotdraw.app.DefaultAppletApplication", "methodid":109, "methodname":"org.jhotdraw.app.DefaultAppletApplication.show(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void show(View v) {\r\n    this.view = v;\r\n    applet.getContentPane().removeAll();\r\n    applet.getContentPane().add(v.getComponent());\r\n    v.start();\r\n    v.activate();\r\n}"},
 {"id":24, "parametername":"View v", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":5, "classname":"org.jhotdraw.app.DefaultAppletApplication", "methodid":106, "methodname":"org.jhotdraw.app.DefaultAppletApplication.hide(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void hide(View v) {\r\n    v.deactivate();\r\n    v.stop();\r\n    applet.getContentPane().removeAll();\r\n    this.view = null;\r\n}"},
 {"id":25, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":5, "classname":"org.jhotdraw.app.DefaultAppletApplication", "methodid":107, "methodname":"org.jhotdraw.app.DefaultAppletApplication.initViewActions(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void initViewActions(View p) {\r\n}"},
 {"id":26, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":113, "methodname":"org.jhotdraw.app.DefaultApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class creates a standard toolbar with the following buttons in it:\r\n * <ul>\r\n * <li>File New</li>\r\n * <li>File Open</li>\r\n * <li>File Save</li>\r\n * <li>Undo</li>\r\n * <li>Redo</li>\r\n * <li>Cut</li>\r\n * <li>Copy</li>\r\n * <li>Paste</li>\r\n * </ul>\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JToolBar tb = new JToolBar();\r\n    tb.setName(labels.getString(\"standardToolBarTitle\"));\r\n    JButton b;\r\n    Action a;\r\n    if (null != (a = getAction(NewAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(OpenAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(LoadAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    b = tb.add(getAction(SaveAction.ID));\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(UndoAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(RedoAction.ID));\r\n    b.setFocusable(false);\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(CutAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(CopyAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(PasteAction.ID));\r\n    b.setFocusable(false);\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":27, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":113, "methodname":"org.jhotdraw.app.DefaultApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class creates a standard toolbar with the following buttons in it:\r\n * <ul>\r\n * <li>File New</li>\r\n * <li>File Open</li>\r\n * <li>File Save</li>\r\n * <li>Undo</li>\r\n * <li>Redo</li>\r\n * <li>Cut</li>\r\n * <li>Copy</li>\r\n * <li>Paste</li>\r\n * </ul>\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JToolBar tb = new JToolBar();\r\n    tb.setName(labels.getString(\"standardToolBarTitle\"));\r\n    JButton b;\r\n    Action a;\r\n    if (null != (a = getAction(NewAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(OpenAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    if (null != (a = getAction(LoadAction.ID))) {\r\n        b = tb.add(a);\r\n        b.setFocusable(false);\r\n    }\r\n    b = tb.add(getAction(SaveAction.ID));\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(UndoAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(RedoAction.ID));\r\n    b.setFocusable(false);\r\n    tb.addSeparator();\r\n    b = tb.add(getAction(CutAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(CopyAction.ID));\r\n    b.setFocusable(false);\r\n    b = tb.add(getAction(PasteAction.ID));\r\n    b.setFocusable(false);\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":28, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":112, "methodname":"org.jhotdraw.app.DefaultApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> list = new LinkedList<JMenu>();\r\n    list.add(createEditMenu(a, p));\r\n    return list;\r\n}"},
 {"id":29, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":112, "methodname":"org.jhotdraw.app.DefaultApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> list = new LinkedList<JMenu>();\r\n    list.add(createEditMenu(a, p));\r\n    return list;\r\n}"},
 {"id":30, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":111, "methodname":"org.jhotdraw.app.DefaultApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"edit\");\r\n    mi = m.add(getAction(UndoAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(RedoAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(CutAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(CopyAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(PasteAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DuplicateAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DeleteAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(SelectAllAction.ID));\r\n    mi.setIcon(null);\r\n    if ((getAction(FindAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(getAction(FindAction.ID));\r\n    }\r\n    return m;\r\n}"},
 {"id":31, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":111, "methodname":"org.jhotdraw.app.DefaultApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"edit\");\r\n    mi = m.add(getAction(UndoAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(RedoAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(CutAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(CopyAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(PasteAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DuplicateAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(getAction(DeleteAction.ID));\r\n    mi.setIcon(null);\r\n    m.addSeparator();\r\n    mi = m.add(getAction(SelectAllAction.ID));\r\n    mi.setIcon(null);\r\n    if ((getAction(FindAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(getAction(FindAction.ID));\r\n    }\r\n    return m;\r\n}"},
 {"id":32, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":121, "methodname":"org.jhotdraw.app.DefaultApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n}"},
 {"id":33, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":121, "methodname":"org.jhotdraw.app.DefaultApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n}"},
 {"id":34, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":6, "classname":"org.jhotdraw.app.DefaultApplicationModel", "methodid":120, "methodname":"org.jhotdraw.app.DefaultApplicationModel.initApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"public void initApplication(Application a) {\r\n}"},
 {"id":35, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":7, "classname":"org.jhotdraw.app.DefaultMDIApplication", "methodid":139, "methodname":"org.jhotdraw.app.DefaultMDIApplication.initViewActions(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void initViewActions(View p) {\r\n    p.putAction(FocusAction.ID, new FocusAction(p));\r\n}"},
 {"id":36, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":7, "classname":"org.jhotdraw.app.DefaultMDIApplication", "methodid":142, "methodname":"org.jhotdraw.app.DefaultMDIApplication.show(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JInternalFrame f = new JInternalFrame();\r\n        f.setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE);\r\n        f.setClosable(true);\r\n        f.setMaximizable(true);\r\n        f.setResizable(true);\r\n        f.setIconifiable(false);\r\n        updateViewTitle(p, f);\r\n        PreferencesUtil.installInternalFramePrefsHandler(prefs, \"view\", f, desktopPane);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && (aView.isShowing())) && (SwingUtilities.getRootPane(aView.getComponent()).getParent().getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        // paletteHandler.add(f, v);\r\n        f.addInternalFrameListener(new InternalFrameAdapter() {\r\n            @Override\r\n            public void internalFrameClosing(final InternalFrameEvent evt) {\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void internalFrameClosed(final InternalFrameEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if ((name == (View.HAS_UNSAVED_CHANGES_PROPERTY)) || (name == (View.FILE_PROPERTY))) {\r\n                    updateViewTitle(p, f);\r\n                }\r\n            }\r\n        });\r\n        f.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (name.equals(\"selected\")) {\r\n                    if (evt.getNewValue().equals(Boolean.TRUE)) {\r\n                        setActiveView(p);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // f.setJMenuBar(createMenuBar(v));\r\n        f.getContentPane().add(p.getComponent());\r\n        f.setVisible(true);\r\n        desktopPane.add(f);\r\n        f.toFront();\r\n        try {\r\n            f.setSelected(true);\r\n        } catch (PropertyVetoException e) {\r\n            // Dont care.\r\n        }\r\n        p.getComponent().requestFocusInWindow();\r\n        p.start();\r\n    }\r\n}"},
 {"id":37, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":7, "classname":"org.jhotdraw.app.DefaultMDIApplication", "methodid":135, "methodname":"org.jhotdraw.app.DefaultMDIApplication.hide(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        JInternalFrame f = ((JInternalFrame) (SwingUtilities.getRootPane(p.getComponent()).getParent()));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        desktopPane.remove(f);\r\n        f.dispose();\r\n    }\r\n}"},
 {"id":38, "parametername":"View v", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":7, "classname":"org.jhotdraw.app.DefaultMDIApplication", "methodid":144, "methodname":"org.jhotdraw.app.DefaultMDIApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JInternalFrame)", "isreturn":0, "sourcecode":"/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param v\r\n * \t\tThe view.\r\n * @param f\r\n * \t\tThe frame.\r\n */\r\nprotected void updateViewTitle(View v, JInternalFrame f) {\r\n    File file = v.getFile();\r\n    String title;\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    if (v.hasUnsavedChanges()) {\r\n        title += \"*\";\r\n    }\r\n    v.setTitle(labels.getFormatted(\"internalFrame.title\", title, getName(), v.getMultipleOpenId()));\r\n    f.setTitle(v.getTitle());\r\n}"},
 {"id":39, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":161, "methodname":"org.jhotdraw.app.DefaultOSXApplication.initViewActions(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void initViewActions(View p) {\r\n    p.putAction(FocusAction.ID, new FocusAction(p));\r\n}"},
 {"id":40, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":149, "methodname":"org.jhotdraw.app.DefaultOSXApplication.addWindow(java.awt.Window,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic void addWindow(Window window, final View p) {\r\n    if (window instanceof JFrame) {\r\n        ((JFrame) (window)).setJMenuBar(createMenuBar(p));\r\n    } else\r\n        if (window instanceof JDialog) {\r\n            // ((JDialog) window).setJMenuBar(createMenuBar(null));\r\n        }\r\n\r\n    paletteHandler.add(window, p);\r\n}"},
 {"id":41, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":166, "methodname":"org.jhotdraw.app.DefaultOSXApplication.show(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JFrame f = new JFrame();\r\n        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n        f.setPreferredSize(new Dimension(400, 400));\r\n        updateViewTitle(p, f);\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"view\", f);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && (aView.isShowing())) && (SwingUtilities.getWindowAncestor(aView.getComponent()).getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        f.addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(final WindowEvent evt) {\r\n                setActiveView(p);\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void windowClosed(final WindowEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n\r\n            @Override\r\n            public void windowActivated(WindowEvent evt) {\r\n                setActiveView(p);\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (name.equals(View.HAS_UNSAVED_CHANGES_PROPERTY)) {\r\n                    f.getRootPane().putClientProperty(\"windowModified\", new Boolean(p.hasUnsavedChanges()));\r\n                } else\r\n                    if (name.equals(View.FILE_PROPERTY)) {\r\n                        updateViewTitle(p, f);\r\n                    }\r\n\r\n            }\r\n        });\r\n        // f.setJMenuBar(createMenuBar(p));\r\n        // paletteHandler.add(f, p);\r\n        addWindow(f, p);\r\n        f.getContentPane().add(p.getComponent());\r\n        f.setVisible(true);\r\n        p.start();\r\n    }\r\n}"},
 {"id":42, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":168, "methodname":"org.jhotdraw.app.DefaultOSXApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JFrame)", "isreturn":0, "sourcecode":"/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param p\r\n * \t\tThe view.\r\n * @param f\r\n * \t\tThe frame.\r\n */\r\nprotected void updateViewTitle(View p, JFrame f) {\r\n    String title;\r\n    File file = p.getFile();\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    p.setTitle(labels.getFormatted(\"frame.title\", title, getName(), p.getMultipleOpenId()));\r\n    f.setTitle(p.getTitle());\r\n    // Adds a proxy icon for the file to the title bar\r\n    // See http://developer.apple.com/technotes/tn2007/tn2196.html#WINDOW_DOCUMENTFILE\r\n    f.getRootPane().putClientProperty(\"Window.documentFile\", file);\r\n}"},
 {"id":43, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":155, "methodname":"org.jhotdraw.app.DefaultOSXApplication.hide(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        JFrame f = ((JFrame) (SwingUtilities.getWindowAncestor(p.getComponent())));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        // paletteHandler.remove(f, p);\r\n        removeWindow(f);\r\n        f.dispose();\r\n    }\r\n}"},
 {"id":44, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":152, "methodname":"org.jhotdraw.app.DefaultOSXApplication.createMenuBar(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates a menu bar.\r\n *\r\n * @param p\r\n * \t\tThe view for which the menu bar is created. This may be\r\n * \t\t<code>null</code> if the menu bar is attached to an application\r\n * \t\tcomponent, such as the screen menu bar or a floating palette window.\r\n */\r\nprotected JMenuBar createMenuBar(View p) {\r\n    JMenuBar mb = new JMenuBar();\r\n    mb.add(createFileMenu(p));\r\n    for (JMenu mm : getModel().createMenus(this, p)) {\r\n        mb.add(mm);\r\n    }\r\n    // Determine the index of the help menu, if one has been provided\r\n    // Merge the help menu if one has been provided by the application model,\r\n    // otherwise just add it.\r\n    String helpMenuText = labels.getString(\"help.text\");\r\n    int index = mb.getComponentCount();\r\n    for (int i = 0, n = mb.getComponentCount(); i < n; i++) {\r\n        JMenu m = ((JMenu) (mb.getComponent(i)));\r\n        if (((m.getText()) != null) && (m.getText().equals(helpMenuText))) {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n    mb.add(createWindowMenu(p), index);\r\n    return mb;\r\n}"},
 {"id":45, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":153, "methodname":"org.jhotdraw.app.DefaultOSXApplication.createWindowMenu(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JMenu createWindowMenu(final View p) {\r\n    ApplicationModel model = getModel();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    final JMenu windowMenu = m;\r\n    labels.configureMenu(m, \"window\");\r\n    addViewWindowMenuItems(m, p);\r\n    m.addSeparator();\r\n    for (View pr : views()) {\r\n        if ((pr.getAction(FocusAction.ID)) != null) {\r\n            windowMenu.add(pr.getAction(FocusAction.ID));\r\n        }\r\n    }\r\n    if ((paletteActions.size()) > 0) {\r\n        m.addSeparator();\r\n        for (Action a : paletteActions) {\r\n            JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(a);\r\n            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n            cbmi.setIcon(null);\r\n            m.add(cbmi);\r\n        }\r\n    }\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if ((name == \"viewCount\") || (name == \"paletteCount\")) {\r\n                if ((p == null) || (views().contains(p))) {\r\n                    JMenu m = windowMenu;\r\n                    m.removeAll();\r\n                    addViewWindowMenuItems(m, p);\r\n                    m.addSeparator();\r\n                    for (Iterator i = views().iterator(); i.hasNext();) {\r\n                        View pr = ((View) (i.next()));\r\n                        if ((pr.getAction(FocusAction.ID)) != null) {\r\n                            m.add(pr.getAction(FocusAction.ID));\r\n                        }\r\n                    }\r\n                    if ((paletteActions.size()) > 0) {\r\n                        m.addSeparator();\r\n                        for (Action a : paletteActions) {\r\n                            JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(a);\r\n                            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n                            cbmi.setIcon(null);\r\n                            m.add(cbmi);\r\n                        }\r\n                    }\r\n                } else {\r\n                    removePropertyChangeListener(this);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return m;\r\n}"},
 {"id":46, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":148, "methodname":"org.jhotdraw.app.DefaultOSXApplication.addViewWindowMenuItems(javax.swing.JMenu,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void addViewWindowMenuItems(JMenu m, View p) {\r\n    JMenuItem mi;\r\n    ApplicationModel model = getModel();\r\n    mi = m.add(model.getAction(MinimizeAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(MaximizeAction.ID));\r\n    mi.setIcon(null);\r\n}"},
 {"id":47, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":8, "classname":"org.jhotdraw.app.DefaultOSXApplication", "methodid":151, "methodname":"org.jhotdraw.app.DefaultOSXApplication.createFileMenu(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JMenu createFileMenu(View p) {\r\n    // ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ApplicationModel model = getModel();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"file\");\r\n    mi = m.add(model.getAction(NewAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(OpenAction.ID));\r\n    mi.setIcon(null);\r\n    if ((model.getAction(OpenDirectoryAction.ID)) != null) {\r\n        mi = m.add(model.getAction(OpenDirectoryAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    openRecentMenu = new JMenu();\r\n    labels.configureMenu(openRecentMenu, \"file.openRecent\");\r\n    openRecentMenu.setIcon(null);\r\n    openRecentMenu.add(model.getAction(ClearRecentFilesAction.ID));\r\n    updateOpenRecentMenu(openRecentMenu);\r\n    m.add(openRecentMenu);\r\n    m.addSeparator();\r\n    mi = m.add(model.getAction(CloseAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(SaveAction.ID));\r\n    mi.setIcon(null);\r\n    mi = m.add(model.getAction(SaveAsAction.ID));\r\n    mi.setIcon(null);\r\n    if ((model.getAction(ExportAction.ID)) != null) {\r\n        mi = m.add(model.getAction(ExportAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    if ((model.getAction(PrintAction.ID)) != null) {\r\n        m.addSeparator();\r\n        mi = m.add(model.getAction(PrintAction.ID));\r\n        mi.setIcon(null);\r\n    }\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name == \"recentFiles\") {\r\n                updateOpenRecentMenu(openRecentMenu);\r\n            }\r\n        }\r\n    });\r\n    return m;\r\n}"},
 {"id":48, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":184, "methodname":"org.jhotdraw.app.DefaultSDIApplication.remove(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic void remove(View p) {\r\n    super.remove(p);\r\n    if ((views().size()) == 0) {\r\n        stop();\r\n    }\r\n}"},
 {"id":49, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":181, "methodname":"org.jhotdraw.app.DefaultSDIApplication.initViewActions(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void initViewActions(View p) {\r\n    ApplicationModel m = getModel();\r\n    p.putAction(LoadAction.ID, m.getAction(LoadAction.ID));\r\n}"},
 {"id":50, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":185, "methodname":"org.jhotdraw.app.DefaultSDIApplication.show(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic void show(final View p) {\r\n    if (!(p.isShowing())) {\r\n        p.setShowing(true);\r\n        final JFrame f = new JFrame();\r\n        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n        updateViewTitle(p, f);\r\n        JPanel panel = ((JPanel) (wrapViewComponent(p)));\r\n        f.add(panel);\r\n        f.setMinimumSize(new Dimension(200, 200));\r\n        f.setPreferredSize(new Dimension(600, 400));\r\n        f.setJMenuBar(createMenuBar(p, ((List<Action>) (panel.getClientProperty(\"toolBarActions\")))));\r\n        PreferencesUtil.installFramePrefsHandler(prefs, \"view\", f);\r\n        Point loc = f.getLocation();\r\n        boolean moved;\r\n        do {\r\n            moved = false;\r\n            for (Iterator i = views().iterator(); i.hasNext();) {\r\n                View aView = ((View) (i.next()));\r\n                if (((aView != p) && ((SwingUtilities.getWindowAncestor(aView.getComponent())) != null)) && (SwingUtilities.getWindowAncestor(aView.getComponent()).getLocation().equals(loc))) {\r\n                    loc.x += 22;\r\n                    loc.y += 22;\r\n                    moved = true;\r\n                    break;\r\n                }\r\n            }\r\n        } while (moved );\r\n        f.setLocation(loc);\r\n        f.addWindowListener(new WindowAdapter() {\r\n            public void windowClosing(final WindowEvent evt) {\r\n                getModel().getAction(CloseAction.ID).actionPerformed(new ActionEvent(f, ActionEvent.ACTION_PERFORMED, \"windowClosing\"));\r\n            }\r\n\r\n            @Override\r\n            public void windowClosed(final WindowEvent evt) {\r\n                if (p == (getActiveView())) {\r\n                    setActiveView(null);\r\n                }\r\n                p.stop();\r\n            }\r\n\r\n            public void windowActivated(WindowEvent e) {\r\n                setActiveView(p);\r\n            }\r\n        });\r\n        p.addPropertyChangeListener(new PropertyChangeListener() {\r\n            public void propertyChange(PropertyChangeEvent evt) {\r\n                String name = evt.getPropertyName();\r\n                if (((name.equals(View.HAS_UNSAVED_CHANGES_PROPERTY)) || (name.equals(View.FILE_PROPERTY))) || (name.equals(View.MULTIPLE_OPEN_ID_PROPERTY))) {\r\n                    updateViewTitle(p, f);\r\n                }\r\n            }\r\n        });\r\n        f.setVisible(true);\r\n        p.start();\r\n    }\r\n}"},
 {"id":51, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":188, "methodname":"org.jhotdraw.app.DefaultSDIApplication.wrapViewComponent(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Returns the view component. Eventually wraps it into\r\n * another component in order to provide additional functionality.\r\n */\r\nprotected Component wrapViewComponent(View p) {\r\n    JComponent c = p.getComponent();\r\n    if ((getModel()) != null) {\r\n        LinkedList<Action> toolBarActions = new LinkedList<Action>();\r\n        int id = 0;\r\n        for (JToolBar tb : new ReversedList<JToolBar>(getModel().createToolBars(this, p))) {\r\n            id++;\r\n            JPanel panel = new JPanel(new BorderLayout());\r\n            panel.add(tb, BorderLayout.NORTH);\r\n            panel.add(c, BorderLayout.CENTER);\r\n            c = panel;\r\n            PreferencesUtil.installToolBarPrefsHandler(prefs, (\"toolbar.\" + id), tb);\r\n            toolBarActions.addFirst(new ToggleVisibleAction(tb, tb.getName()));\r\n        }\r\n        c.putClientProperty(\"toolBarActions\", toolBarActions);\r\n    }\r\n    return c;\r\n}"},
 {"id":52, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":177, "methodname":"org.jhotdraw.app.DefaultSDIApplication.hide(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void hide(View p) {\r\n    if (p.isShowing()) {\r\n        p.setShowing(false);\r\n        JFrame f = ((JFrame) (SwingUtilities.getWindowAncestor(p.getComponent())));\r\n        f.setVisible(false);\r\n        f.remove(p.getComponent());\r\n        f.dispose();\r\n    }\r\n}"},
 {"id":53, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":175, "methodname":"org.jhotdraw.app.DefaultSDIApplication.dispose(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void dispose(View p) {\r\n    super.dispose(p);\r\n    if ((views().size()) == 0) {\r\n        stop();\r\n    }\r\n}"},
 {"id":54, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":173, "methodname":"org.jhotdraw.app.DefaultSDIApplication.createMenuBar(org.jhotdraw.app.View,java.util.List)", "isreturn":0, "sourcecode":"/**\r\n * The view menu bar is displayed for a view.\r\n * The default implementation returns a new screen menu bar.\r\n */\r\nprotected JMenuBar createMenuBar(final View p, List<Action> toolBarActions) {\r\n    JMenuBar mb = new JMenuBar();\r\n    mb.add(createFileMenu(p));\r\n    JMenu lastMenu = null;\r\n    for (JMenu mm : getModel().createMenus(this, p)) {\r\n        mb.add(mm);\r\n        lastMenu = mm;\r\n    }\r\n    JMenu viewMenu = createViewMenu(p, toolBarActions);\r\n    if (viewMenu != null) {\r\n        if ((lastMenu != null) && (lastMenu.getText().equals(viewMenu.getText()))) {\r\n            for (Component c : lastMenu.getMenuComponents()) {\r\n                viewMenu.add(c);\r\n            }\r\n            mb.remove(lastMenu);\r\n        }\r\n        mb.add(viewMenu);\r\n    }\r\n    // Merge the help menu if one has been provided by the application model,\r\n    // otherwise just add it.\r\n    JMenu helpMenu = createHelpMenu(p);\r\n    for (Component mc : mb.getComponents()) {\r\n        JMenu m = ((JMenu) (mc));\r\n        if (m.getText().equals(helpMenu.getText())) {\r\n            for (Component c : helpMenu.getMenuComponents()) {\r\n                m.add(c);\r\n            }\r\n            helpMenu = null;\r\n            break;\r\n        }\r\n    }\r\n    if (helpMenu != null) {\r\n        mb.add(helpMenu);\r\n    }\r\n    return mb;\r\n}"},
 {"id":55, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":171, "methodname":"org.jhotdraw.app.DefaultSDIApplication.createFileMenu(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JMenu createFileMenu(final View p) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenuBar mb = new JMenuBar();\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"file\");\r\n    m.add(model.getAction(ClearAction.ID));\r\n    m.add(model.getAction(NewAction.ID));\r\n    m.add(model.getAction(LoadAction.ID));\r\n    if ((model.getAction(LoadDirectoryAction.ID)) != null) {\r\n        m.add(model.getAction(LoadDirectoryAction.ID));\r\n    }\r\n    openRecentMenu = new JMenu();\r\n    labels.configureMenu(openRecentMenu, \"file.openRecent\");\r\n    openRecentMenu.add(model.getAction(ClearRecentFilesAction.ID));\r\n    updateOpenRecentMenu(openRecentMenu);\r\n    m.add(openRecentMenu);\r\n    m.addSeparator();\r\n    m.add(model.getAction(SaveAction.ID));\r\n    m.add(model.getAction(SaveAsAction.ID));\r\n    if ((model.getAction(ExportAction.ID)) != null) {\r\n        mi = m.add(model.getAction(ExportAction.ID));\r\n    }\r\n    if ((model.getAction(PrintAction.ID)) != null) {\r\n        m.addSeparator();\r\n        m.add(model.getAction(PrintAction.ID));\r\n    }\r\n    m.addSeparator();\r\n    m.add(model.getAction(ExitAction.ID));\r\n    mb.add(m);\r\n    addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            String name = evt.getPropertyName();\r\n            if (name == \"viewCount\") {\r\n                if ((p == null) || (views().contains(p))) {\r\n                } else {\r\n                    removePropertyChangeListener(this);\r\n                }\r\n            } else\r\n                if (name == \"recentFiles\") {\r\n                    updateOpenRecentMenu(openRecentMenu);\r\n                }\r\n\r\n        }\r\n    });\r\n    return m;\r\n}"},
 {"id":56, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":187, "methodname":"org.jhotdraw.app.DefaultSDIApplication.updateViewTitle(org.jhotdraw.app.View,javax.swing.JFrame)", "isreturn":0, "sourcecode":"/**\r\n * Updates the title of a view and displays it in the given frame.\r\n *\r\n * @param p\r\n * \t\tThe view.\r\n * @param f\r\n * \t\tThe frame.\r\n */\r\nprotected void updateViewTitle(View p, JFrame f) {\r\n    File file = p.getFile();\r\n    String title;\r\n    if (file == null) {\r\n        title = labels.getString(\"unnamedFile\");\r\n    } else {\r\n        title = file.getName();\r\n    }\r\n    if (p.hasUnsavedChanges()) {\r\n        title += \"*\";\r\n    }\r\n    p.setTitle(labels.getFormatted(\"frame.title\", title, getName(), p.getMultipleOpenId()));\r\n    f.setTitle(p.getTitle());\r\n}"},
 {"id":57, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":174, "methodname":"org.jhotdraw.app.DefaultSDIApplication.createViewMenu(org.jhotdraw.app.View,java.util.List)", "isreturn":0, "sourcecode":"/**\r\n * Creates the view menu.\r\n *\r\n * @param p\r\n * \t\tThe View\r\n * @param viewActions\r\n * \t\tActions for the view menu\r\n * @return A JMenu or null, if no view actions are provided\r\n */\r\nprotected JMenu createViewMenu(final View p, List<Action> viewActions) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JCheckBoxMenuItem cbmi;\r\n    final JMenu openRecentMenu;\r\n    m = new JMenu();\r\n    if ((viewActions != null) && ((viewActions.size()) > 0)) {\r\n        m2 = ((viewActions.size()) == 1) ? m : new JMenu(labels.getString(\"toolBars\"));\r\n        labels.configureMenu(m, \"view\");\r\n        for (Action a : viewActions) {\r\n            cbmi = new JCheckBoxMenuItem(a);\r\n            Actions.configureJCheckBoxMenuItem(cbmi, a);\r\n            m2.add(cbmi);\r\n        }\r\n        if (m2 != m) {\r\n            m.add(m2);\r\n        }\r\n    }\r\n    return (m.getComponentCount()) > 0 ? m : null;\r\n}"},
 {"id":58, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":9, "classname":"org.jhotdraw.app.DefaultSDIApplication", "methodid":172, "methodname":"org.jhotdraw.app.DefaultSDIApplication.createHelpMenu(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JMenu createHelpMenu(View p) {\r\n    ApplicationModel model = getModel();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    JMenu m;\r\n    JMenuItem mi;\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"help\");\r\n    m.add(model.getAction(AboutAction.ID));\r\n    return m;\r\n}"},
 {"id":59, "parametername":"DefaultOSXApplication app", "parametertype":"org.jhotdraw.app.DefaultOSXApplication", "parameterclass":8, "classid":13, "classname":"org.jhotdraw.app.OSXPaletteHandler", "methodid":197, "methodname":"org.jhotdraw.app.OSXPaletteHandler.-init-(org.jhotdraw.app.DefaultOSXApplication)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic OSXPaletteHandler(DefaultOSXApplication app) {\r\n    this.app = app;\r\n    timer = new Timer(60, new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            maybeHidePalettes();\r\n        }\r\n    });\r\n    timer.setRepeats(false);\r\n}"},
 {"id":60, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":13, "classname":"org.jhotdraw.app.OSXPaletteHandler", "methodid":198, "methodname":"org.jhotdraw.app.OSXPaletteHandler.add(java.awt.Window,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void add(Window window, View view) {\r\n    window.addWindowFocusListener(focusHandler);\r\n    windows.put(window, view);\r\n}"},
 {"id":61, "parametername":"Application newValue", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":15, "classname":"org.jhotdraw.app.View", "methodid":232, "methodname":"org.jhotdraw.app.View.setApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Sets the application of the view.\r\n * By convention, this is only invoked by Application.add() and\r\n * Application.remove().\r\n * This is a bound property.\r\n */\r\npublic void setApplication(Application newValue);"},
 {"id":62, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":16, "classname":"org.jhotdraw.app.action.AboutAction", "methodid":241, "methodname":"org.jhotdraw.app.action.AboutAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AboutAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, AboutAction.ID);\r\n}"},
 {"id":63, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":17, "classname":"org.jhotdraw.app.action.AbstractApplicationAction", "methodid":243, "methodname":"org.jhotdraw.app.action.AbstractApplicationAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractApplicationAction(Application app) {\r\n    this.app = app;\r\n    installApplicationListeners(app);\r\n    updateApplicationEnabled();\r\n}"},
 {"id":64, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":17, "classname":"org.jhotdraw.app.action.AbstractApplicationAction", "methodid":247, "methodname":"org.jhotdraw.app.action.AbstractApplicationAction.installApplicationListeners(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the application object.\r\n */\r\nprotected void installApplicationListeners(Application app) {\r\n    if ((applicationListener) == null) {\r\n        applicationListener = createApplicationListener();\r\n    }\r\n    app.addPropertyChangeListener(applicationListener);\r\n}"},
 {"id":65, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":17, "classname":"org.jhotdraw.app.action.AbstractApplicationAction", "methodid":250, "methodname":"org.jhotdraw.app.action.AbstractApplicationAction.uninstallApplicationListeners(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the application object.\r\n */\r\nprotected void uninstallApplicationListeners(Application app) {\r\n    app.removePropertyChangeListener(applicationListener);\r\n}"},
 {"id":66, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":18, "classname":"org.jhotdraw.app.action.AbstractSaveBeforeAction", "methodid":252, "methodname":"org.jhotdraw.app.action.AbstractSaveBeforeAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractSaveBeforeAction(Application app) {\r\n    super(app);\r\n}"},
 {"id":67, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":18, "classname":"org.jhotdraw.app.action.AbstractSaveBeforeAction", "methodid":257, "methodname":"org.jhotdraw.app.action.AbstractSaveBeforeAction.saveChanges(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void saveChanges(final View p) {\r\n    if ((p.getFile()) == null) {\r\n        JFileChooser fileChooser = p.getSaveChooser();\r\n        // int option = fileChooser.showSaveDialog(this);\r\n        JSheet.showSaveSheet(fileChooser, p.getComponent(), new SheetListener() {\r\n            public void optionSelected(final SheetEvent evt) {\r\n                if ((evt.getOption()) == (JFileChooser.APPROVE_OPTION)) {\r\n                    final File file;\r\n                    if ((evt.getFileChooser().getFileFilter()) instanceof ExtensionFileFilter) {\r\n                        file = ((ExtensionFileFilter) (evt.getFileChooser().getFileFilter())).makeAcceptable(evt.getFileChooser().getSelectedFile());\r\n                    } else {\r\n                        file = evt.getFileChooser().getSelectedFile();\r\n                    }\r\n                    saveToFile(p, file);\r\n                } else {\r\n                    p.setEnabled(true);\r\n                    if ((oldFocusOwner) != null) {\r\n                        oldFocusOwner.requestFocus();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        saveToFile(p, p.getFile());\r\n    }\r\n}"},
 {"id":68, "parametername":"final View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":18, "classname":"org.jhotdraw.app.action.AbstractSaveBeforeAction", "methodid":258, "methodname":"org.jhotdraw.app.action.AbstractSaveBeforeAction.saveToFile(org.jhotdraw.app.View,java.io.File)", "isreturn":0, "sourcecode":"protected void saveToFile(final View p, final File file) {\r\n    p.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                p.write(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileSaved(p, file, value);\r\n        }\r\n    });\r\n}"},
 {"id":69, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":18, "classname":"org.jhotdraw.app.action.AbstractSaveBeforeAction", "methodid":256, "methodname":"org.jhotdraw.app.action.AbstractSaveBeforeAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"protected void fileSaved(View p, File file, Object value) {\r\n    if (value == null) {\r\n        p.setFile(file);\r\n        p.markChangesAsSaved();\r\n        doIt(p);\r\n    } else {\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n        } else {\r\n            message = value.toString();\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(getActiveView().getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.saveBefore.couldntSave.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    p.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}"},
 {"id":70, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":18, "classname":"org.jhotdraw.app.action.AbstractSaveBeforeAction", "methodid":255, "methodname":"org.jhotdraw.app.action.AbstractSaveBeforeAction.doIt(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected abstract void doIt(View p);"},
 {"id":71, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":19, "classname":"org.jhotdraw.app.action.AbstractViewAction", "methodid":260, "methodname":"org.jhotdraw.app.action.AbstractViewAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractViewAction(Application app) {\r\n    this.app = app;\r\n    this.enabled = true;\r\n    if (app != null) {\r\n        app.addPropertyChangeListener(applicationListener);\r\n        updateView(null, app.getActiveView());\r\n    }\r\n}"},
 {"id":72, "parametername":"View oldValue", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":19, "classname":"org.jhotdraw.app.action.AbstractViewAction", "methodid":271, "methodname":"org.jhotdraw.app.action.AbstractViewAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Updates the listeners of this action depending on the current view\r\n * of the application.\r\n */\r\nprotected void updateView(View oldValue, View newValue) {\r\n    if (oldValue != null) {\r\n        uninstallViewListeners(oldValue);\r\n    }\r\n    if (newValue != null) {\r\n        installViewListeners(newValue);\r\n    }\r\n    firePropertyChange(AbstractViewAction.VIEW_PROPERTY, oldValue, newValue);\r\n    updateEnabled(((oldValue != null) && (oldValue.isEnabled())), ((newValue != null) && (newValue.isEnabled())));\r\n    updateView();\r\n}"},
 {"id":73, "parametername":"View newValue", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":19, "classname":"org.jhotdraw.app.action.AbstractViewAction", "methodid":271, "methodname":"org.jhotdraw.app.action.AbstractViewAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Updates the listeners of this action depending on the current view\r\n * of the application.\r\n */\r\nprotected void updateView(View oldValue, View newValue) {\r\n    if (oldValue != null) {\r\n        uninstallViewListeners(oldValue);\r\n    }\r\n    if (newValue != null) {\r\n        installViewListeners(newValue);\r\n    }\r\n    firePropertyChange(AbstractViewAction.VIEW_PROPERTY, oldValue, newValue);\r\n    updateEnabled(((oldValue != null) && (oldValue.isEnabled())), ((newValue != null) && (newValue.isEnabled())));\r\n    updateView();\r\n}"},
 {"id":74, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":19, "classname":"org.jhotdraw.app.action.AbstractViewAction", "methodid":264, "methodname":"org.jhotdraw.app.action.AbstractViewAction.installViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the view object.\r\n */\r\nprotected void installViewListeners(View p) {\r\n    p.addPropertyChangeListener(viewListener);\r\n}"},
 {"id":75, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":19, "classname":"org.jhotdraw.app.action.AbstractViewAction", "methodid":268, "methodname":"org.jhotdraw.app.action.AbstractViewAction.uninstallViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Uninstalls listeners on the view object.\r\n */\r\nprotected void uninstallViewListeners(View p) {\r\n    p.removePropertyChangeListener(viewListener);\r\n}"},
 {"id":76, "parametername":"Arrangeable arrangeable", "parametertype":"org.jhotdraw.gui.Arrangeable", "parameterclass":365, "classid":21, "classname":"org.jhotdraw.app.action.ArrangeAction", "methodid":275, "methodname":"org.jhotdraw.app.action.ArrangeAction.-init-(org.jhotdraw.gui.Arrangeable,org.jhotdraw.gui.Arrangeable$Arrangement)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ArrangeAction(Arrangeable arrangeable, Arrangeable.Arrangement arrangement) {\r\n    this.arrangeable = arrangeable;\r\n    this.arrangement = arrangement;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    String labelID;\r\n    switch (arrangement) {\r\n        case VERTICAL :\r\n            labelID = ArrangeAction.VERTICAL_ID;\r\n            break;\r\n        case HORIZONTAL :\r\n            labelID = ArrangeAction.HORIZONTAL_ID;\r\n            break;\r\n        case CASCADE :\r\n        default :\r\n            labelID = ArrangeAction.CASCADE_ID;\r\n            break;\r\n    }\r\n    labels.configureAction(this, labelID);\r\n}"},
 {"id":77, "parametername":"Arrangeable.Arrangement arrangement", "parametertype":"org.jhotdraw.gui.Arrangeable$Arrangement", "parameterclass":364, "classid":21, "classname":"org.jhotdraw.app.action.ArrangeAction", "methodid":275, "methodname":"org.jhotdraw.app.action.ArrangeAction.-init-(org.jhotdraw.gui.Arrangeable,org.jhotdraw.gui.Arrangeable$Arrangement)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ArrangeAction(Arrangeable arrangeable, Arrangeable.Arrangement arrangement) {\r\n    this.arrangeable = arrangeable;\r\n    this.arrangement = arrangement;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    String labelID;\r\n    switch (arrangement) {\r\n        case VERTICAL :\r\n            labelID = ArrangeAction.VERTICAL_ID;\r\n            break;\r\n        case HORIZONTAL :\r\n            labelID = ArrangeAction.HORIZONTAL_ID;\r\n            break;\r\n        case CASCADE :\r\n        default :\r\n            labelID = ArrangeAction.CASCADE_ID;\r\n            break;\r\n    }\r\n    labels.configureAction(this, labelID);\r\n}"},
 {"id":78, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":22, "classname":"org.jhotdraw.app.action.ClearAction", "methodid":277, "methodname":"org.jhotdraw.app.action.ClearAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ClearAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.new\");\r\n}"},
 {"id":79, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":22, "classname":"org.jhotdraw.app.action.ClearAction", "methodid":279, "methodname":"org.jhotdraw.app.action.ClearAction.doIt(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic void doIt(final View view) {\r\n    view.setEnabled(false);\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            view.clear();\r\n            return null;\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            view.setEnabled(true);\r\n        }\r\n    });\r\n}"},
 {"id":80, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":23, "classname":"org.jhotdraw.app.action.ClearRecentFilesAction", "methodid":280, "methodname":"org.jhotdraw.app.action.ClearRecentFilesAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ClearRecentFilesAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ClearRecentFilesAction.ID);\r\n    updateEnabled();\r\n}"},
 {"id":81, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":23, "classname":"org.jhotdraw.app.action.ClearRecentFilesAction", "methodid":284, "methodname":"org.jhotdraw.app.action.ClearRecentFilesAction.installApplicationListeners(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the application object.\r\n */\r\n@Override\r\nprotected void installApplicationListeners(Application app) {\r\n    super.installApplicationListeners(app);\r\n    if ((applicationListener) == null) {\r\n        applicationListener = createApplicationListener();\r\n    }\r\n    app.addPropertyChangeListener(applicationListener);\r\n}"},
 {"id":82, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":23, "classname":"org.jhotdraw.app.action.ClearRecentFilesAction", "methodid":285, "methodname":"org.jhotdraw.app.action.ClearRecentFilesAction.uninstallApplicationListeners(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the application object.\r\n */\r\n@Override\r\nprotected void uninstallApplicationListeners(Application app) {\r\n    super.uninstallApplicationListeners(app);\r\n    app.removePropertyChangeListener(applicationListener);\r\n}"},
 {"id":83, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":25, "classname":"org.jhotdraw.app.action.CloseAction", "methodid":289, "methodname":"org.jhotdraw.app.action.CloseAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic CloseAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, CloseAction.ID);\r\n}"},
 {"id":84, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":25, "classname":"org.jhotdraw.app.action.CloseAction", "methodid":290, "methodname":"org.jhotdraw.app.action.CloseAction.doIt(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected void doIt(View view) {\r\n    if ((view != null) && ((view.getApplication()) != null)) {\r\n        view.getApplication().dispose(view);\r\n    }\r\n}"},
 {"id":85, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":30, "classname":"org.jhotdraw.app.action.ExitAction", "methodid":300, "methodname":"org.jhotdraw.app.action.ExitAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ExitAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ExitAction.ID);\r\n}"},
 {"id":86, "parametername":"View unsavedView", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":30, "classname":"org.jhotdraw.app.action.ExitAction", "methodid":304, "methodname":"org.jhotdraw.app.action.ExitAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"protected void fileSaved(View unsavedView, File file, Object value) {\r\n    if (value == null) {\r\n        unsavedView.setFile(file);\r\n        doExit();\r\n    } else {\r\n        JSheet.showMessageSheet(unsavedView.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn\t save to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    unsavedView.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n    getApplication().setEnabled(true);\r\n}"},
 {"id":87, "parametername":"View unsavedView", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":30, "classname":"org.jhotdraw.app.action.ExitAction", "methodid":305, "methodname":"org.jhotdraw.app.action.ExitAction.fileSavedAndReviewNext(org.jhotdraw.app.View,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"protected void fileSavedAndReviewNext(View unsavedView, File file, Object value) {\r\n    if (value == null) {\r\n        unsavedView.setFile(file);\r\n        getApplication().dispose(unsavedView);\r\n        reviewNext();\r\n        return;\r\n    } else {\r\n        JSheet.showMessageSheet(unsavedView.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn\t save to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    unsavedView.setEnabled(true);\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n    getApplication().setEnabled(true);\r\n}"},
 {"id":88, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":31, "classname":"org.jhotdraw.app.action.ExportAction", "methodid":312, "methodname":"org.jhotdraw.app.action.ExportAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ExportAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, ExportAction.ID);\r\n}"},
 {"id":89, "parametername":"final ExportableView view", "parametertype":"org.jhotdraw.app.ExportableView", "parameterclass":12, "classid":31, "classname":"org.jhotdraw.app.action.ExportAction", "methodid":315, "methodname":"org.jhotdraw.app.action.ExportAction.exportToFile(org.jhotdraw.app.ExportableView,java.io.File,javax.swing.filechooser.FileFilter,java.awt.Component)", "isreturn":0, "sourcecode":"protected void exportToFile(final ExportableView view, final File file, final FileFilter filter, final Component accessory) {\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.export(file, filter, accessory);\r\n                return null;\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileExported(view, file, value);\r\n        }\r\n    });\r\n}"},
 {"id":90, "parametername":"ExportableView view", "parametertype":"org.jhotdraw.app.ExportableView", "parameterclass":12, "classid":31, "classname":"org.jhotdraw.app.action.ExportAction", "methodid":316, "methodname":"org.jhotdraw.app.action.ExportAction.fileExported(org.jhotdraw.app.ExportableView,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"protected void fileExported(ExportableView view, File file, Object value) {\r\n    if (value != null) {\r\n        System.out.flush();\r\n        ((Throwable) (value)).printStackTrace();\r\n        // FIXME localize this error messsage\r\n        JSheet.showMessageSheet(view.getComponent(), ((((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn\t export to the file \"\") + file) + \"\".<p>\") + \"Reason: \") + value), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    view.setEnabled(true);\r\n    SwingUtilities.getWindowAncestor(view.getComponent()).toFront();\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}"},
 {"id":91, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":32, "classname":"org.jhotdraw.app.action.FindAction", "methodid":317, "methodname":"org.jhotdraw.app.action.FindAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic FindAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, FindAction.ID);\r\n}"},
 {"id":92, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":33, "classname":"org.jhotdraw.app.action.FocusAction", "methodid":319, "methodname":"org.jhotdraw.app.action.FocusAction.-init-(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic FocusAction(View view) {\r\n    this.view = view;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, FocusAction.ID);\r\n    // setEnabled(false);\r\n    setEnabled((view != null));\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n            String name = evt.getPropertyName();\r\n            if (name.equals(View.FILE_PROPERTY)) {\r\n                putValue(Action.NAME, ((evt.getNewValue()) == null ? labels.getString(\"unnamedFile\") : ((File) (evt.getNewValue())).getName()));\r\n            }\r\n        }\r\n    });\r\n}"},
 {"id":93, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":34, "classname":"org.jhotdraw.app.action.LoadAction", "methodid":326, "methodname":"org.jhotdraw.app.action.LoadAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic LoadAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.open\");\r\n}"},
 {"id":94, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":34, "classname":"org.jhotdraw.app.action.LoadAction", "methodid":330, "methodname":"org.jhotdraw.app.action.LoadAction.getFileChooser(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JFileChooser getFileChooser(View view) {\r\n    return view.getOpenChooser();\r\n}"},
 {"id":95, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":34, "classname":"org.jhotdraw.app.action.LoadAction", "methodid":328, "methodname":"org.jhotdraw.app.action.LoadAction.doIt(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void doIt(View view) {\r\n    JFileChooser fileChooser = getFileChooser(view);\r\n    if ((fileChooser.showOpenDialog(view.getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n        openFile(view, fileChooser);\r\n    } else {\r\n        view.setEnabled(true);\r\n    }\r\n}"},
 {"id":96, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":34, "classname":"org.jhotdraw.app.action.LoadAction", "methodid":331, "methodname":"org.jhotdraw.app.action.LoadAction.openFile(org.jhotdraw.app.View,javax.swing.JFileChooser)", "isreturn":0, "sourcecode":"protected void openFile(final View view, JFileChooser fileChooser) {\r\n    final File file = fileChooser.getSelectedFile();\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.read(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}"},
 {"id":97, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":34, "classname":"org.jhotdraw.app.action.LoadAction", "methodid":329, "methodname":"org.jhotdraw.app.action.LoadAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"protected void fileOpened(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        getApplication().addRecentFile(file);\r\n    } else {\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn\t open the file \"\") + file) + \"\".</b><br>\") + value), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                view.clear();\r\n                view.setEnabled(true);\r\n            }\r\n        });\r\n    }\r\n}"},
 {"id":98, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":35, "classname":"org.jhotdraw.app.action.LoadDirectoryAction", "methodid":332, "methodname":"org.jhotdraw.app.action.LoadDirectoryAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic LoadDirectoryAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, \"file.openDirectory\");\r\n}"},
 {"id":99, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":35, "classname":"org.jhotdraw.app.action.LoadDirectoryAction", "methodid":333, "methodname":"org.jhotdraw.app.action.LoadDirectoryAction.getFileChooser(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected JFileChooser getFileChooser(View view) {\r\n    return ((DirectoryView) (view)).getOpenDirectoryChooser();\r\n}"},
 {"id":100, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":36, "classname":"org.jhotdraw.app.action.LoadRecentAction", "methodid":334, "methodname":"org.jhotdraw.app.action.LoadRecentAction.-init-(org.jhotdraw.app.Application,java.io.File)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic LoadRecentAction(Application app, File file) {\r\n    super(app);\r\n    this.file = file;\r\n    putValue(Action.NAME, file.getName());\r\n}"},
 {"id":101, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":36, "classname":"org.jhotdraw.app.action.LoadRecentAction", "methodid":336, "methodname":"org.jhotdraw.app.action.LoadRecentAction.doIt(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void doIt(final View view) {\r\n    final Application app = getApplication();\r\n    app.setEnabled(true);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.read(file);\r\n                return null;\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}"},
 {"id":102, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":36, "classname":"org.jhotdraw.app.action.LoadRecentAction", "methodid":337, "methodname":"org.jhotdraw.app.action.LoadRecentAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"protected void fileOpened(final View view, File file, Object value) {\r\n    final Application app = getApplication();\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.getComponent().requestFocus();\r\n        if (app != null) {\r\n            app.setEnabled(true);\r\n        }\r\n    } else {\r\n        if (value instanceof Throwable) {\r\n            ((Throwable) (value)).printStackTrace();\r\n        }\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>Couldn\t open the file \"\") + file) + \"\".</b><br>\") + value), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                // app.dispose(view);\r\n            }\r\n        });\r\n    }\r\n}"},
 {"id":103, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":37, "classname":"org.jhotdraw.app.action.MaximizeAction", "methodid":338, "methodname":"org.jhotdraw.app.action.MaximizeAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic MaximizeAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, MaximizeAction.ID);\r\n}"},
 {"id":104, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":38, "classname":"org.jhotdraw.app.action.MinimizeAction", "methodid":341, "methodname":"org.jhotdraw.app.action.MinimizeAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic MinimizeAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, MinimizeAction.ID);\r\n}"},
 {"id":105, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":39, "classname":"org.jhotdraw.app.action.NewAction", "methodid":344, "methodname":"org.jhotdraw.app.action.NewAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic NewAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, NewAction.ID);\r\n}"},
 {"id":106, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":40, "classname":"org.jhotdraw.app.action.OSXDropOnDockAction", "methodid":347, "methodname":"org.jhotdraw.app.action.OSXDropOnDockAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic OSXDropOnDockAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    putValue(Action.NAME, \"OSX Drop On Dock\");\r\n}"},
 {"id":107, "parametername":"DefaultOSXApplication app", "parametertype":"org.jhotdraw.app.DefaultOSXApplication", "parameterclass":8, "classid":41, "classname":"org.jhotdraw.app.action.OSXTogglePaletteAction", "methodid":350, "methodname":"org.jhotdraw.app.action.OSXTogglePaletteAction.-init-(org.jhotdraw.app.DefaultOSXApplication,java.awt.Window,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic OSXTogglePaletteAction(DefaultOSXApplication app, Window palette, String label) {\r\n    super(label);\r\n    this.app = app;\r\n    windowHandler = new WindowAdapter() {\r\n        public void windowClosing(WindowEvent evt) {\r\n            putValue(Actions.SELECTED_KEY, false);\r\n        }\r\n    };\r\n    setPalette(palette);\r\n    putValue(Actions.SELECTED_KEY, true);\r\n}"},
 {"id":108, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":42, "classname":"org.jhotdraw.app.action.OpenAction", "methodid":355, "methodname":"org.jhotdraw.app.action.OpenAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic OpenAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, OpenAction.ID);\r\n}"},
 {"id":109, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":42, "classname":"org.jhotdraw.app.action.OpenAction", "methodid":359, "methodname":"org.jhotdraw.app.action.OpenAction.getFileChooser(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JFileChooser getFileChooser(View view) {\r\n    return view.getOpenChooser();\r\n}"},
 {"id":110, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":42, "classname":"org.jhotdraw.app.action.OpenAction", "methodid":360, "methodname":"org.jhotdraw.app.action.OpenAction.openFile(javax.swing.JFileChooser,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void openFile(JFileChooser fileChooser, final View view) {\r\n    final Application app = getApplication();\r\n    final File file = fileChooser.getSelectedFile();\r\n    app.setEnabled(true);\r\n    view.setEnabled(false);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                if (file.exists()) {\r\n                    view.read(file);\r\n                    return null;\r\n                } else {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n                    return new IOException(labels.getFormatted(\"file.open.fileDoesNotExist.message\", file.getName()));\r\n                }\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}"},
 {"id":111, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":42, "classname":"org.jhotdraw.app.action.OpenAction", "methodid":358, "methodname":"org.jhotdraw.app.action.OpenAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"protected void fileOpened(final View view, File file, Object value) {\r\n    final Application app = getApplication();\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.setEnabled(true);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.getComponent().requestFocus();\r\n        app.addRecentFile(file);\r\n        app.setEnabled(true);\r\n    } else {\r\n        view.setEnabled(true);\r\n        app.setEnabled(true);\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n            ((Throwable) (value)).printStackTrace();\r\n        } else\r\n            if (value instanceof Throwable) {\r\n                message = value.toString();\r\n                ((Throwable) (value)).printStackTrace();\r\n            } else {\r\n                message = value.toString();\r\n            }\r\n\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.open.couldntOpen.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n}"},
 {"id":112, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":43, "classname":"org.jhotdraw.app.action.OpenDirectoryAction", "methodid":361, "methodname":"org.jhotdraw.app.action.OpenDirectoryAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic OpenDirectoryAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, OpenDirectoryAction.ID);\r\n}"},
 {"id":113, "parametername":"View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":43, "classname":"org.jhotdraw.app.action.OpenDirectoryAction", "methodid":362, "methodname":"org.jhotdraw.app.action.OpenDirectoryAction.getFileChooser(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected JFileChooser getFileChooser(View view) {\r\n    return ((DirectoryView) (view)).getOpenDirectoryChooser();\r\n}"},
 {"id":114, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":44, "classname":"org.jhotdraw.app.action.OpenRecentAction", "methodid":363, "methodname":"org.jhotdraw.app.action.OpenRecentAction.-init-(org.jhotdraw.app.Application,java.io.File)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic OpenRecentAction(Application app, File file) {\r\n    super(app);\r\n    this.file = file;\r\n    putValue(Action.NAME, file.getName());\r\n}"},
 {"id":115, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":44, "classname":"org.jhotdraw.app.action.OpenRecentAction", "methodid":367, "methodname":"org.jhotdraw.app.action.OpenRecentAction.openFile(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void openFile(final View view) {\r\n    final Application app = getApplication();\r\n    app.setEnabled(true);\r\n    // If there is another view with we set the multiple open\r\n    // id of our view to max(multiple open id) + 1.\r\n    int multipleOpenId = 1;\r\n    for (View aView : app.views()) {\r\n        if (((aView != view) && ((aView.getFile()) != null)) && (aView.getFile().equals(file))) {\r\n            multipleOpenId = Math.max(multipleOpenId, ((aView.getMultipleOpenId()) + 1));\r\n        }\r\n    }\r\n    view.setMultipleOpenId(multipleOpenId);\r\n    view.setEnabled(false);\r\n    // Open the file\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                if (file.exists()) {\r\n                    view.read(file);\r\n                    return null;\r\n                } else {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n                    return new IOException(labels.getFormatted(\"file.open.fileDoesNotExist.message\", file.getName()));\r\n                }\r\n            } catch (Throwable e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileOpened(view, file, value);\r\n        }\r\n    });\r\n}"},
 {"id":116, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":44, "classname":"org.jhotdraw.app.action.OpenRecentAction", "methodid":366, "methodname":"org.jhotdraw.app.action.OpenRecentAction.fileOpened(org.jhotdraw.app.View,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"protected void fileOpened(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        Frame w = ((Frame) (SwingUtilities.getWindowAncestor(view.getComponent())));\r\n        if (w != null) {\r\n            w.setExtendedState(((w.getExtendedState()) & (~(Frame.ICONIFIED))));\r\n            w.toFront();\r\n        }\r\n        view.setEnabled(true);\r\n        view.getComponent().requestFocus();\r\n    } else {\r\n        String message = null;\r\n        if (value instanceof Throwable) {\r\n            ((Throwable) (value)).printStackTrace();\r\n            message = ((Throwable) (value)).getMessage();\r\n            if (message == null) {\r\n                message = value.toString();\r\n            }\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(view.getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"file.open.couldntOpen.message\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE, new SheetListener() {\r\n            public void optionSelected(SheetEvent evt) {\r\n                view.setEnabled(true);\r\n            }\r\n        });\r\n    }\r\n}"},
 {"id":117, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":46, "classname":"org.jhotdraw.app.action.PrintAction", "methodid":370, "methodname":"org.jhotdraw.app.action.PrintAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PrintAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, PrintAction.ID);\r\n}"},
 {"id":118, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":47, "classname":"org.jhotdraw.app.action.RedoAction", "methodid":378, "methodname":"org.jhotdraw.app.action.RedoAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic RedoAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, RedoAction.ID);\r\n}"},
 {"id":119, "parametername":"View oldValue", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":47, "classname":"org.jhotdraw.app.action.RedoAction", "methodid":384, "methodname":"org.jhotdraw.app.action.RedoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(RedoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(RedoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}"},
 {"id":120, "parametername":"View newValue", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":47, "classname":"org.jhotdraw.app.action.RedoAction", "methodid":384, "methodname":"org.jhotdraw.app.action.RedoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(RedoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(RedoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}"},
 {"id":121, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":47, "classname":"org.jhotdraw.app.action.RedoAction", "methodid":381, "methodname":"org.jhotdraw.app.action.RedoAction.installViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    if ((p.getAction(RedoAction.ID)) != null) {\r\n        p.getAction(RedoAction.ID).addPropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}"},
 {"id":122, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":47, "classname":"org.jhotdraw.app.action.RedoAction", "methodid":382, "methodname":"org.jhotdraw.app.action.RedoAction.uninstallViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    if ((p.getAction(RedoAction.ID)) != null) {\r\n        p.getAction(RedoAction.ID).removePropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}"},
 {"id":123, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":48, "classname":"org.jhotdraw.app.action.SaveAction", "methodid":385, "methodname":"org.jhotdraw.app.action.SaveAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAction(Application app) {\r\n    this(app, false);\r\n}"},
 {"id":124, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":48, "classname":"org.jhotdraw.app.action.SaveAction", "methodid":386, "methodname":"org.jhotdraw.app.action.SaveAction.-init-(org.jhotdraw.app.Application,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAction(Application app, boolean saveAs) {\r\n    super(app);\r\n    this.saveAs = saveAs;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, SaveAction.ID);\r\n}"},
 {"id":125, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":48, "classname":"org.jhotdraw.app.action.SaveAction", "methodid":390, "methodname":"org.jhotdraw.app.action.SaveAction.saveToFile(org.jhotdraw.app.View,java.io.File)", "isreturn":0, "sourcecode":"protected void saveToFile(final View view, final File file) {\r\n    view.execute(new Worker() {\r\n        public Object construct() {\r\n            try {\r\n                view.write(file);\r\n                return null;\r\n            } catch (IOException e) {\r\n                return e;\r\n            }\r\n        }\r\n\r\n        public void finished(Object value) {\r\n            fileSaved(view, file, value);\r\n        }\r\n    });\r\n}"},
 {"id":126, "parametername":"final View view", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":48, "classname":"org.jhotdraw.app.action.SaveAction", "methodid":389, "methodname":"org.jhotdraw.app.action.SaveAction.fileSaved(org.jhotdraw.app.View,java.io.File,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * XXX - Change type of value to Throwable\r\n *\r\n * @param value\r\n * \t\tis either null for success or a Throwable on failure.\r\n */\r\nprotected void fileSaved(final View view, File file, Object value) {\r\n    if (value == null) {\r\n        view.setFile(file);\r\n        view.markChangesAsSaved();\r\n        int multiOpenId = 1;\r\n        for (View p : view.getApplication().views()) {\r\n            if (((p != view) && ((p.getFile()) != null)) && (p.getFile().equals(file))) {\r\n                multiOpenId = Math.max(multiOpenId, ((p.getMultipleOpenId()) + 1));\r\n            }\r\n        }\r\n        getApplication().addRecentFile(file);\r\n        view.setMultipleOpenId(multiOpenId);\r\n    } else {\r\n        String message;\r\n        if ((value instanceof Throwable) && ((((Throwable) (value)).getMessage()) != null)) {\r\n            message = ((Throwable) (value)).getMessage();\r\n        } else {\r\n            message = value.toString();\r\n        }\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n        JSheet.showMessageSheet(getActiveView().getComponent(), (((((\"<html>\" + (UIManager.getString(\"OptionPane.css\"))) + \"<b>\") + (labels.getFormatted(\"couldntSave\", file.getName()))) + \"</b><br>\") + (message == null ? \"\" : message)), JOptionPane.ERROR_MESSAGE);\r\n    }\r\n    view.setEnabled(true);\r\n    SwingUtilities.getWindowAncestor(view.getComponent()).toFront();\r\n    if ((oldFocusOwner) != null) {\r\n        oldFocusOwner.requestFocus();\r\n    }\r\n}"},
 {"id":127, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":49, "classname":"org.jhotdraw.app.action.SaveAsAction", "methodid":391, "methodname":"org.jhotdraw.app.action.SaveAsAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SaveAsAction(Application app) {\r\n    super(app, true);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    labels.configureAction(this, SaveAsAction.ID);\r\n}"},
 {"id":128, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":52, "classname":"org.jhotdraw.app.action.ToggleViewPropertyAction", "methodid":400, "methodname":"org.jhotdraw.app.action.ToggleViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleViewPropertyAction(Application app, String propertyName) {\r\n    this(app, propertyName, Boolean.TYPE, true, false);\r\n}"},
 {"id":129, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":52, "classname":"org.jhotdraw.app.action.ToggleViewPropertyAction", "methodid":401, "methodname":"org.jhotdraw.app.action.ToggleViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Class,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"public ToggleViewPropertyAction(Application app, String propertyName, Class propertyClass, Object selectedPropertyValue, Object deselectedPropertyValue) {\r\n    super(app);\r\n    this.propertyName = propertyName;\r\n    this.parameterClass = new Class[]{ propertyClass };\r\n    this.selectedPropertyValue = selectedPropertyValue;\r\n    this.deselectedPropertyValue = deselectedPropertyValue;\r\n    setterName = (\"set\" + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    getterName = (((propertyClass == (Boolean.TYPE)) || (propertyClass == (Boolean.class)) ? \"is\" : \"get\") + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    updateView();\r\n}"},
 {"id":130, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":52, "classname":"org.jhotdraw.app.action.ToggleViewPropertyAction", "methodid":404, "methodname":"org.jhotdraw.app.action.ToggleViewPropertyAction.installViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    p.addPropertyChangeListener(viewListener);\r\n    updateView();\r\n}"},
 {"id":131, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":52, "classname":"org.jhotdraw.app.action.ToggleViewPropertyAction", "methodid":405, "methodname":"org.jhotdraw.app.action.ToggleViewPropertyAction.uninstallViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the view object.\r\n */\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    p.removePropertyChangeListener(viewListener);\r\n}"},
 {"id":132, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":54, "classname":"org.jhotdraw.app.action.UndoAction", "methodid":411, "methodname":"org.jhotdraw.app.action.UndoAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic UndoAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, UndoAction.ID);\r\n}"},
 {"id":133, "parametername":"View oldValue", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":54, "classname":"org.jhotdraw.app.action.UndoAction", "methodid":417, "methodname":"org.jhotdraw.app.action.UndoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(UndoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(UndoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}"},
 {"id":134, "parametername":"View newValue", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":54, "classname":"org.jhotdraw.app.action.UndoAction", "methodid":417, "methodname":"org.jhotdraw.app.action.UndoAction.updateView(org.jhotdraw.app.View,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected void updateView(View oldValue, View newValue) {\r\n    super.updateView(oldValue, newValue);\r\n    if ((newValue != null) && ((newValue.getAction(UndoAction.ID)) != null)) {\r\n        putValue(AbstractAction.NAME, newValue.getAction(UndoAction.ID).getValue(AbstractAction.NAME));\r\n        updateEnabledState();\r\n    }\r\n}"},
 {"id":135, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":54, "classname":"org.jhotdraw.app.action.UndoAction", "methodid":414, "methodname":"org.jhotdraw.app.action.UndoAction.installViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    if ((p.getAction(UndoAction.ID)) != null) {\r\n        p.getAction(UndoAction.ID).addPropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}"},
 {"id":136, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":54, "classname":"org.jhotdraw.app.action.UndoAction", "methodid":415, "methodname":"org.jhotdraw.app.action.UndoAction.uninstallViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    if ((p.getAction(UndoAction.ID)) != null) {\r\n        p.getAction(UndoAction.ID).removePropertyChangeListener(redoActionPropertyListener);\r\n    }\r\n}"},
 {"id":137, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":55, "classname":"org.jhotdraw.app.action.ViewPropertyAction", "methodid":419, "methodname":"org.jhotdraw.app.action.ViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ViewPropertyAction(Application app, String propertyName, Object propertyValue) {\r\n    this(app, propertyName, propertyValue.getClass(), propertyValue);\r\n}"},
 {"id":138, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":55, "classname":"org.jhotdraw.app.action.ViewPropertyAction", "methodid":420, "methodname":"org.jhotdraw.app.action.ViewPropertyAction.-init-(org.jhotdraw.app.Application,java.lang.String,java.lang.Class,java.lang.Object)", "isreturn":0, "sourcecode":"public ViewPropertyAction(Application app, String propertyName, Class propertyClass, Object propertyValue) {\r\n    super(app);\r\n    this.propertyName = propertyName;\r\n    this.parameterClass = new Class[]{ propertyClass };\r\n    this.propertyValue = propertyValue;\r\n    setterName = (\"set\" + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    getterName = (((propertyClass == (Boolean.TYPE)) || (propertyClass == (Boolean.class)) ? \"is\" : \"get\") + (Character.toUpperCase(propertyName.charAt(0)))) + (propertyName.substring(1));\r\n    updateSelectedState();\r\n}"},
 {"id":139, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":55, "classname":"org.jhotdraw.app.action.ViewPropertyAction", "methodid":422, "methodname":"org.jhotdraw.app.action.ViewPropertyAction.installViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected void installViewListeners(View p) {\r\n    super.installViewListeners(p);\r\n    p.addPropertyChangeListener(viewListener);\r\n    updateSelectedState();\r\n}"},
 {"id":140, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":55, "classname":"org.jhotdraw.app.action.ViewPropertyAction", "methodid":423, "methodname":"org.jhotdraw.app.action.ViewPropertyAction.uninstallViewListeners(org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Installs listeners on the view object.\r\n */\r\n@Override\r\nprotected void uninstallViewListeners(View p) {\r\n    super.uninstallViewListeners(p);\r\n    p.removePropertyChangeListener(viewListener);\r\n}"},
 {"id":141, "parametername":"ColorSystem newValue", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":64, "classname":"org.jhotdraw.color.ColorSliderModel", "methodid":474, "methodname":"org.jhotdraw.color.ColorSliderModel.setColorSystem(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"/**\r\n * Changes the ColorSystem used by this ColorSliderModel.\r\n *\r\n * @param newValue\r\n * \t\tColorSystem.\r\n */\r\npublic void setColorSystem(ColorSystem newValue);"},
 {"id":142, "parametername":"CompositeColor newValue", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":64, "classname":"org.jhotdraw.color.ColorSliderModel", "methodid":476, "methodname":"org.jhotdraw.color.ColorSliderModel.setCompositeColor(org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"/**\r\n * Sets the composite color value of the model.\r\n *\r\n * @param newValue\r\n * \t\t.\r\n */\r\npublic void setCompositeColor(CompositeColor newValue);"},
 {"id":143, "parametername":"ColorSliderModel colorizer", "parametertype":"org.jhotdraw.color.ColorSliderModel", "parameterclass":64, "classid":69, "classname":"org.jhotdraw.color.ColorTrackImageProducer", "methodid":522, "methodname":"org.jhotdraw.color.ColorTrackImageProducer.setColorSliderModel(org.jhotdraw.color.ColorSliderModel)", "isreturn":0, "sourcecode":"public void setColorSliderModel(ColorSliderModel colorizer) {\r\n    this.colorizer = colorizer;\r\n    isDirty = true;\r\n}"},
 {"id":144, "parametername":"ColorSystem sys", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":71, "classname":"org.jhotdraw.color.ColorWheelImageProducer", "methodid":531, "methodname":"org.jhotdraw.color.ColorWheelImageProducer.-init-(org.jhotdraw.color.ColorSystem,int,int)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ColorWheelImageProducer(ColorSystem sys, int w, int h) {\r\n    super(w, h, null, 0, w);\r\n    pixels = new int[w * h];\r\n    this.w = w;\r\n    this.h = h;\r\n    this.colorSystem = sys;\r\n    setAnimated(true);\r\n    newPixels(pixels, ColorModel.getRGBdefault(), 0, w);\r\n}"},
 {"id":145, "parametername":"CompositeColor c", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":71, "classname":"org.jhotdraw.color.ColorWheelImageProducer", "methodid":538, "methodname":"org.jhotdraw.color.ColorWheelImageProducer.getColorLocation(org.jhotdraw.color.CompositeColor,int,int)", "isreturn":0, "sourcecode":"protected Point getColorLocation(CompositeColor c, int width, int height) {\r\n    return getColorLocation(c.getComponents(), width, height);\r\n}"},
 {"id":146, "parametername":"ColorSystem system", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":72, "classname":"org.jhotdraw.color.CompositeColor", "methodid":546, "methodname":"org.jhotdraw.color.CompositeColor.-init-(org.jhotdraw.color.ColorSystem,float[])", "isreturn":0, "sourcecode":"public CompositeColor(ColorSystem system, float... components) {\r\n    this.system = system;\r\n    this.components = components.clone();\r\n}"},
 {"id":147, "parametername":"ColorSystem system", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":72, "classname":"org.jhotdraw.color.CompositeColor", "methodid":547, "methodname":"org.jhotdraw.color.CompositeColor.-init-(org.jhotdraw.color.ColorSystem,java.awt.Color)", "isreturn":0, "sourcecode":"public CompositeColor(ColorSystem system, Color color) {\r\n    this.system = system;\r\n    this.components = system.toComponents(color.getRGB(), null);\r\n}"},
 {"id":148, "parametername":"ColorSystem sys", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":73, "classname":"org.jhotdraw.color.DefaultColorSliderModel", "methodid":556, "methodname":"org.jhotdraw.color.DefaultColorSliderModel.-init-(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"public DefaultColorSliderModel(ColorSystem sys) {\r\n    setColorSystem(sys);\r\n}"},
 {"id":149, "parametername":"ColorSystem newValue", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":73, "classname":"org.jhotdraw.color.DefaultColorSliderModel", "methodid":570, "methodname":"org.jhotdraw.color.DefaultColorSliderModel.setColorSystem(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"public void setColorSystem(ColorSystem newValue) {\r\n    ColorSystem oldValue = system;\r\n    system = newValue;\r\n    componentModels = new DefaultBoundedRangeModel[system.getComponentCount()];\r\n    for (int i = 0; i < (componentModels.length); i++) {\r\n        componentModels[i] = new DefaultBoundedRangeModel();\r\n        final int componentIndex = i;\r\n        componentModels[i].addChangeListener(new ChangeListener() {\r\n            public void stateChanged(ChangeEvent e) {\r\n                fireColorChanged(componentIndex);\r\n                fireStateChanged();\r\n            }\r\n        });\r\n    }\r\n}"},
 {"id":150, "parametername":"CompositeColor newValue", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":73, "classname":"org.jhotdraw.color.DefaultColorSliderModel", "methodid":572, "methodname":"org.jhotdraw.color.DefaultColorSliderModel.setCompositeColor(org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void setCompositeColor(CompositeColor newValue) {\r\n    float[] c = newValue.getComponents();\r\n    int i = 0;\r\n    for (DefaultBoundedRangeModel m : componentModels) {\r\n        m.setValue(((int) ((c[i]) * (((m.getMaximum()) - (m.getMinimum())) + (m.getMinimum())))));\r\n        i++;\r\n    }\r\n}"},
 {"id":151, "parametername":"CompositeColor newValue", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":74, "classname":"org.jhotdraw.color.DefaultHarmonicColorModel", "methodid":596, "methodname":"org.jhotdraw.color.DefaultHarmonicColorModel.set(int,org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void set(int index, CompositeColor newValue) {\r\n    (adjusting)++;\r\n    CompositeColor oldValue = colors.set(index, newValue);\r\n    for (HarmonicRule r : rules) {\r\n        r.colorChanged(this, index, oldValue, newValue);\r\n    }\r\n    for (HarmonicRule r : rules) {\r\n        if ((r.getBaseIndex()) == index) {\r\n            r.apply(this);\r\n        }\r\n    }\r\n    (adjusting)--;\r\n    fireContentsChanged(this, index, index);\r\n}"},
 {"id":152, "parametername":"CompositeColor c", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":74, "classname":"org.jhotdraw.color.DefaultHarmonicColorModel", "methodid":577, "methodname":"org.jhotdraw.color.DefaultHarmonicColorModel.add(org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public boolean add(CompositeColor c) {\r\n    boolean b = colors.add(c);\r\n    if (b) {\r\n        fireIntervalAdded(this, ((size()) - 1), ((size()) - 1));\r\n    }\r\n    return b;\r\n}"},
 {"id":153, "parametername":"HarmonicRule newValue", "parametertype":"org.jhotdraw.color.HarmonicRule", "parameterclass":82, "classid":74, "classname":"org.jhotdraw.color.DefaultHarmonicColorModel", "methodid":580, "methodname":"org.jhotdraw.color.DefaultHarmonicColorModel.addRule(org.jhotdraw.color.HarmonicRule)", "isreturn":0, "sourcecode":"public void addRule(HarmonicRule newValue) {\r\n    rules.add(newValue);\r\n}"},
 {"id":154, "parametername":"ColorSystem newValue", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":74, "classname":"org.jhotdraw.color.DefaultHarmonicColorModel", "methodid":598, "methodname":"org.jhotdraw.color.DefaultHarmonicColorModel.setColorSystem(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"public void setColorSystem(ColorSystem newValue) {\r\n    ColorSystem oldValue = sliderModel.getColorSystem();\r\n    sliderModel.setColorSystem(newValue);\r\n    firePropertyChange(HarmonicColorModel.COLOR_SYSTEM_PROPERTY, oldValue, newValue);\r\n    for (int i = 0; i < (colors.size()); i++) {\r\n        if ((get(i)) != null) {\r\n            set(i, new CompositeColor(newValue, get(i).getColor()));\r\n        }\r\n    }\r\n    fireContentsChanged(this, 0, ((size()) - 1));\r\n}"},
 {"id":155, "parametername":"ColorSystem sys", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":75, "classname":"org.jhotdraw.color.HSLHarmonicColorWheelImageProducer", "methodid":602, "methodname":"org.jhotdraw.color.HSLHarmonicColorWheelImageProducer.-init-(org.jhotdraw.color.ColorSystem,int,int)", "isreturn":0, "sourcecode":"public HSLHarmonicColorWheelImageProducer(ColorSystem sys, int w, int h) {\r\n    super(sys, w, h);\r\n}"},
 {"id":156, "parametername":"HarmonicRule rule", "parametertype":"org.jhotdraw.color.HarmonicRule", "parameterclass":82, "classid":81, "classname":"org.jhotdraw.color.HarmonicColorModel", "methodid":637, "methodname":"org.jhotdraw.color.HarmonicColorModel.addRule(org.jhotdraw.color.HarmonicRule)", "isreturn":0, "sourcecode":"public void addRule(HarmonicRule rule);"},
 {"id":157, "parametername":"ColorSystem newValue", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":81, "classname":"org.jhotdraw.color.HarmonicColorModel", "methodid":648, "methodname":"org.jhotdraw.color.HarmonicColorModel.setColorSystem(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"public void setColorSystem(ColorSystem newValue);"},
 {"id":158, "parametername":"CompositeColor c", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":81, "classname":"org.jhotdraw.color.HarmonicColorModel", "methodid":635, "methodname":"org.jhotdraw.color.HarmonicColorModel.add(org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public boolean add(CompositeColor c);"},
 {"id":159, "parametername":"CompositeColor color", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":81, "classname":"org.jhotdraw.color.HarmonicColorModel", "methodid":646, "methodname":"org.jhotdraw.color.HarmonicColorModel.set(int,org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void set(int index, CompositeColor color);"},
 {"id":160, "parametername":"HarmonicColorModel model", "parametertype":"org.jhotdraw.color.HarmonicColorModel", "parameterclass":81, "classid":82, "classname":"org.jhotdraw.color.HarmonicRule", "methodid":651, "methodname":"org.jhotdraw.color.HarmonicRule.apply(org.jhotdraw.color.HarmonicColorModel)", "isreturn":0, "sourcecode":"public void apply(HarmonicColorModel model);"},
 {"id":161, "parametername":"HarmonicColorModel model", "parametertype":"org.jhotdraw.color.HarmonicColorModel", "parameterclass":81, "classid":82, "classname":"org.jhotdraw.color.HarmonicRule", "methodid":652, "methodname":"org.jhotdraw.color.HarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue);"},
 {"id":162, "parametername":"CompositeColor oldValue", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":82, "classname":"org.jhotdraw.color.HarmonicRule", "methodid":652, "methodname":"org.jhotdraw.color.HarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue);"},
 {"id":163, "parametername":"CompositeColor newValue", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":82, "classname":"org.jhotdraw.color.HarmonicRule", "methodid":652, "methodname":"org.jhotdraw.color.HarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue);"},
 {"id":164, "parametername":"ColorSystem sys", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":85, "classname":"org.jhotdraw.color.JColorWheel", "methodid":658, "methodname":"org.jhotdraw.color.JColorWheel.-init-(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"public JColorWheel(ColorSystem sys) {\r\n    this.sys = sys;\r\n    wheelInsets = new Insets(0, 0, 0, 0);\r\n    model = new DefaultColorSliderModel(sys);\r\n    initComponents();\r\n    colorWheelProducer = createWheelProducer(0, 0);\r\n    modelHandler = new JColorWheel.ModelHandler();\r\n    model.addChangeListener(modelHandler);\r\n    installMouseListeners();\r\n    setOpaque(false);\r\n}"},
 {"id":165, "parametername":"ColorSliderModel m", "parametertype":"org.jhotdraw.color.ColorSliderModel", "parameterclass":64, "classid":85, "classname":"org.jhotdraw.color.JColorWheel", "methodid":675, "methodname":"org.jhotdraw.color.JColorWheel.setModel(org.jhotdraw.color.ColorSliderModel)", "isreturn":0, "sourcecode":"public void setModel(ColorSliderModel m) {\r\n    if ((model) != null) {\r\n        model.removeChangeListener(modelHandler);\r\n    }\r\n    model = m;\r\n    if ((model) != null) {\r\n        model.addChangeListener(modelHandler);\r\n        colorWheelProducer = createWheelProducer(getWidth(), getHeight());\r\n        repaint();\r\n    }\r\n}"},
 {"id":166, "parametername":"ColorSystem newValue", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":88, "classname":"org.jhotdraw.color.JHarmonicColorWheel", "methodid":697, "methodname":"org.jhotdraw.color.JHarmonicColorWheel.setColorSystem(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"public void setColorSystem(ColorSystem newValue) {\r\n    harmonicModel.setColorSystem(newValue);\r\n    getModel().setColorSystem(newValue);\r\n    getModel().setComponentValue(1, 1.0F);\r\n}"},
 {"id":167, "parametername":"HarmonicColorModel newValue", "parametertype":"org.jhotdraw.color.HarmonicColorModel", "parameterclass":81, "classid":88, "classname":"org.jhotdraw.color.JHarmonicColorWheel", "methodid":698, "methodname":"org.jhotdraw.color.JHarmonicColorWheel.setHarmonicColorModel(org.jhotdraw.color.HarmonicColorModel)", "isreturn":0, "sourcecode":"public void setHarmonicColorModel(HarmonicColorModel newValue) {\r\n    HarmonicColorModel oldValue = harmonicModel;\r\n    if (oldValue != null) {\r\n        oldValue.removePropertyChangeListener(modelHandler);\r\n        oldValue.removeListDataListener(modelHandler);\r\n    }\r\n    harmonicModel = newValue;\r\n    if (newValue != null) {\r\n        newValue.addPropertyChangeListener(modelHandler);\r\n        newValue.addListDataListener(modelHandler);\r\n        colorWheelProducer = createWheelProducer(getWidth(), getHeight());\r\n    }\r\n}"},
 {"id":168, "parametername":"CompositeColor c", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":88, "classname":"org.jhotdraw.color.JHarmonicColorWheel", "methodid":688, "methodname":"org.jhotdraw.color.JHarmonicColorWheel.getColorLocation(org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"protected Point getColorLocation(CompositeColor c) {\r\n    Point p = colorWheelProducer.getColorLocation(c, (((getWidth()) - (wheelInsets.left)) - (wheelInsets.right)), (((getHeight()) - (wheelInsets.top)) - (wheelInsets.bottom)));\r\n    p.x += wheelInsets.left;\r\n    p.y += wheelInsets.top;\r\n    return p;\r\n}"},
 {"id":169, "parametername":"HarmonicColorModel model", "parametertype":"org.jhotdraw.color.HarmonicColorModel", "parameterclass":81, "classid":90, "classname":"org.jhotdraw.color.SimpleHarmonicRule", "methodid":719, "methodname":"org.jhotdraw.color.SimpleHarmonicRule.apply(org.jhotdraw.color.HarmonicColorModel)", "isreturn":0, "sourcecode":"public void apply(HarmonicColorModel model) {\r\n    if ((derivedIndices) != null) {\r\n        CompositeColor baseColor = model.get(getBaseIndex());\r\n        if (baseColor != null) {\r\n            float[] derivedComponents = null;\r\n            for (int i = 0; i < (derivedIndices.length); i++) {\r\n                derivedComponents = baseColor.getComponents(derivedComponents);\r\n                derivedComponents[componentIndex] = (baseColor.getComponent(componentIndex)) + ((difference) * (i + 1));\r\n                model.set(derivedIndices[i], new CompositeColor(model.getColorSystem(), derivedComponents));\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":170, "parametername":"HarmonicColorModel model", "parametertype":"org.jhotdraw.color.HarmonicColorModel", "parameterclass":81, "classid":90, "classname":"org.jhotdraw.color.SimpleHarmonicRule", "methodid":720, "methodname":"org.jhotdraw.color.SimpleHarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue) {\r\n    // \r\n}"},
 {"id":171, "parametername":"CompositeColor oldValue", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":90, "classname":"org.jhotdraw.color.SimpleHarmonicRule", "methodid":720, "methodname":"org.jhotdraw.color.SimpleHarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue) {\r\n    // \r\n}"},
 {"id":172, "parametername":"CompositeColor newValue", "parametertype":"org.jhotdraw.color.CompositeColor", "parameterclass":72, "classid":90, "classname":"org.jhotdraw.color.SimpleHarmonicRule", "methodid":720, "methodname":"org.jhotdraw.color.SimpleHarmonicRule.colorChanged(org.jhotdraw.color.HarmonicColorModel,int,org.jhotdraw.color.CompositeColor,org.jhotdraw.color.CompositeColor)", "isreturn":0, "sourcecode":"public void colorChanged(HarmonicColorModel model, int index, CompositeColor oldValue, CompositeColor newValue) {\r\n    // \r\n}"},
 {"id":173, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":747, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)", "isreturn":0, "sourcecode":"public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}"},
 {"id":174, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":741, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.isAttributeEnabled(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public boolean isAttributeEnabled(AttributeKey key) {\r\n    return ((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)));\r\n}"},
 {"id":175, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":746, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\n@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        Object oldValue = attributes.put(key, newValue);\r\n        setAttributeOnChildren(key, newValue);\r\n        fireAttributeChanged(key, oldValue, newValue);\r\n    }\r\n}"},
 {"id":176, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":748, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"protected <T> void setAttributeOnChildren(AttributeKey<T> key, T newValue) {\r\n    for (Figure child : getChildren()) {\r\n        key.basicSet(child, newValue);\r\n    }\r\n}"},
 {"id":177, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":733, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Gets an attribute from the figure.\r\n */\r\n@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return hasAttribute(key) ? key.get(attributes) : key.getDefaultValue();\r\n}"},
 {"id":178, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":751, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}"},
 {"id":179, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":743, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.readAttributes(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    key.basicSet(this, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}"},
 {"id":180, "parametername":"Figure that", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":726, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.applyAttributesTo(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}"},
 {"id":181, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":750, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeAttributes(out);\r\n}"},
 {"id":182, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":742, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readAttributes(in);\r\n}"},
 {"id":183, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":744, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.removeAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public <T> void removeAttribute(AttributeKey<T> key) {\r\n    if (hasAttribute(key)) {\r\n        T oldValue = getAttribute(key);\r\n        attributes.remove(key);\r\n        fireAttributeChanged(key, oldValue, key.getDefaultValue());\r\n    }\r\n}"},
 {"id":184, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":91, "classname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure", "methodid":740, "methodname":"org.jhotdraw.draw.AbstractAttributedCompositeFigure.hasAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public boolean hasAttribute(AttributeKey key) {\r\n    return attributes.containsKey(key);\r\n}"},
 {"id":185, "parametername":"Figure newValue", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":92, "classname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure", "methodid":764, "methodname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure.setDecorator(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void setDecorator(Figure newValue) {\r\n    willChange();\r\n    decorator = newValue;\r\n    if ((decorator) != null) {\r\n        decorator.setBounds(getStartPoint(), getEndPoint());\r\n    }\r\n    changed();\r\n}"},
 {"id":186, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":92, "classname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure", "methodid":762, "methodname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readDecorator(in);\r\n}"},
 {"id":187, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":92, "classname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure", "methodid":766, "methodname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeDecorator(out);\r\n}"},
 {"id":188, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":92, "classname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure", "methodid":767, "methodname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure.writeDecorator(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"protected void writeDecorator(DOMOutput out) throws IOException {\r\n    if ((decorator) != null) {\r\n        out.openElement(\"decorator\");\r\n        out.writeObject(decorator);\r\n        out.closeElement();\r\n    }\r\n}"},
 {"id":189, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":92, "classname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure", "methodid":763, "methodname":"org.jhotdraw.draw.AbstractAttributedDecoratedFigure.readDecorator(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"protected void readDecorator(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"decorator\")) > 0) {\r\n        in.openElement(\"decorator\");\r\n        decorator = ((Figure) (in.readObject()));\r\n        in.closeElement();\r\n    } else {\r\n        decorator = null;\r\n    }\r\n}"},
 {"id":190, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":789, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)", "isreturn":0, "sourcecode":"public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}"},
 {"id":191, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":783, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.isAttributeEnabled(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public boolean isAttributeEnabled(AttributeKey key) {\r\n    return ((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)));\r\n}"},
 {"id":192, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":788, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        T oldValue = ((T) (key.put(attributes, newValue)));\r\n        fireAttributeChanged(key, oldValue, newValue);\r\n    }\r\n}"},
 {"id":193, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":775, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.getAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Gets an attribute from the figure.\r\n */\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return hasAttribute(key) ? key.get(attributes) : key.getDefaultValue();\r\n}"},
 {"id":194, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":792, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}"},
 {"id":195, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":785, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.readAttributes(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    setAttribute(key, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}"},
 {"id":196, "parametername":"Figure that", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":769, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.applyAttributesTo(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}"},
 {"id":197, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":791, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double r = getBounds();\r\n    out.addAttribute(\"x\", r.x);\r\n    out.addAttribute(\"y\", r.y);\r\n    out.addAttribute(\"w\", r.width);\r\n    out.addAttribute(\"h\", r.height);\r\n    writeAttributes(out);\r\n}"},
 {"id":198, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":784, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    double x = in.getAttribute(\"x\", 0.0);\r\n    double y = in.getAttribute(\"y\", 0.0);\r\n    double w = in.getAttribute(\"w\", 0.0);\r\n    double h = in.getAttribute(\"h\", 0.0);\r\n    setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    readAttributes(in);\r\n}"},
 {"id":199, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":786, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.removeAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public <T> void removeAttribute(AttributeKey<T> key) {\r\n    if (hasAttribute(key)) {\r\n        T oldValue = key.get(this);\r\n        attributes.remove(key);\r\n        fireAttributeChanged(key, oldValue, key.getDefaultValue());\r\n    }\r\n}"},
 {"id":200, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":93, "classname":"org.jhotdraw.draw.AbstractAttributedFigure", "methodid":782, "methodname":"org.jhotdraw.draw.AbstractAttributedFigure.hasAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public boolean hasAttribute(AttributeKey key) {\r\n    return attributes.containsKey(key);\r\n}"},
 {"id":201, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":94, "classname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler", "methodid":857, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    remove(e.getFigure());\r\n}"},
 {"id":202, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":94, "classname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler", "methodid":855, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    invalidate();\r\n    fireFigureChanged(e.getInvalidatedArea());\r\n}"},
 {"id":203, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":94, "classname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler", "methodid":852, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    fireAreaInvalidated(e);\r\n}"},
 {"id":204, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":94, "classname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler", "methodid":853, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    invalidate();\r\n}"},
 {"id":205, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":94, "classname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler", "methodid":854, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureAdded(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureAdded(FigureEvent e) {\r\n    invalidate();\r\n}"},
 {"id":206, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":94, "classname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler", "methodid":856, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure$EventHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureRemoved(FigureEvent e) {\r\n    invalidate();\r\n}"},
 {"id":207, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":795, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.add(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public boolean add(Figure figure) {\r\n    add(getChildCount(), figure);\r\n    return true;\r\n}"},
 {"id":208, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":794, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.add(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void add(int index, Figure figure) {\r\n    basicAdd(index, figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n    fireFigureAdded(figure, index);\r\n    invalidate();\r\n}"},
 {"id":209, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":801, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.basicAdd(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void basicAdd(Figure figure) {\r\n    basicAdd(getChildCount(), figure);\r\n}"},
 {"id":210, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":799, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.addNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    for (Figure child : getChildren()) {\r\n        child.addNotify(drawing);\r\n    }\r\n}"},
 {"id":211, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":841, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.removeNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void removeNotify(Drawing drawing) {\r\n    super.removeNotify(drawing);\r\n    // Copy children collection to avoid concurrent modification exception\r\n    for (Figure child : new LinkedList<Figure>(getChildren())) {\r\n        child.removeNotify(drawing);\r\n    }\r\n}"},
 {"id":212, "parametername":"final Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":836, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.remove(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public boolean remove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index == (-1)) {\r\n        return false;\r\n    } else {\r\n        basicRemoveChild(index);\r\n        if ((getDrawing()) != null) {\r\n            figure.removeNotify(getDrawing());\r\n        }\r\n        fireFigureRemoved(figure, index);\r\n        return true;\r\n    }\r\n}"},
 {"id":213, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":844, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.sendToBack(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Sends a figure to the back of the composite figure.\r\n *\r\n * @param figure\r\n * \t\tthat is part of this composite figure\r\n */\r\npublic synchronized void sendToBack(Figure figure) {\r\n    if ((basicRemove(figure)) != (-1)) {\r\n        basicAdd(0, figure);\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}"},
 {"id":214, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":807, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.bringToFront(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Sends a figure to the front of the drawing.\r\n *\r\n * @param figure\r\n * \t\tthat is part of the drawing\r\n */\r\npublic synchronized void bringToFront(Figure figure) {\r\n    if ((basicRemove(figure)) != (-1)) {\r\n        basicAdd(figure);\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}"},
 {"id":215, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":845, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"public <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    for (Figure child : getChildren()) {\r\n        child.setAttribute(key, value);\r\n    }\r\n    invalidate();\r\n}"},
 {"id":216, "parametername":"AttributeKey<T> name", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":819, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public <T> T getAttribute(AttributeKey<T> name) {\r\n    return null;\r\n}"},
 {"id":217, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":810, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.contains(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}"},
 {"id":218, "parametername":"Layouter newLayouter", "parametertype":"org.jhotdraw.draw.Layouter", "parameterclass":207, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":847, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.setLayouter(org.jhotdraw.draw.Layouter)", "isreturn":0, "sourcecode":"/**\r\n * Set a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation. It is a good idea to set\r\n * the Layouter in the protected initialize() method\r\n * so it can be recreated if a GraphicalCompositeFigure is\r\n * read and restored from a StorableInput stream.\r\n *\r\n * @param newLayouter\tencapsulation\r\n * \t\tof a layout algorithm.\r\n */\r\npublic void setLayouter(Layouter newLayouter) {\r\n    this.layouter = newLayouter;\r\n}"},
 {"id":219, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":835, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    in.openElement(\"children\");\r\n    for (int i = 0; i < (in.getElementCount()); i++) {\r\n        basicAdd(((Figure) (in.readObject(i))));\r\n    }\r\n    in.closeElement();\r\n}"},
 {"id":220, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":850, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    out.openElement(\"children\");\r\n    for (Figure child : getChildren()) {\r\n        out.writeObject(child);\r\n    }\r\n    out.closeElement();\r\n}"},
 {"id":221, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":800, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    figure.addFigureListener(eventHandler);\r\n}"},
 {"id":222, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":803, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.basicRemove(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public int basicRemove(Figure child) {\r\n    int index = children.indexOf(child);\r\n    if (index != (-1)) {\r\n        basicRemoveChild(index);\r\n    }\r\n    return index;\r\n}"},
 {"id":223, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":832, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.indexOf(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public int indexOf(Figure child) {\r\n    return children.indexOf(child);\r\n}"},
 {"id":224, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":817, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.fireFigureAdded(org.jhotdraw.draw.Figure,int)", "isreturn":0, "sourcecode":"/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureAdded(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n            }\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureAdded(event);\r\n        }\r\n    }\r\n}"},
 {"id":225, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":818, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.fireFigureRemoved(org.jhotdraw.draw.Figure,int)", "isreturn":0, "sourcecode":"/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureRemoved(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null) {\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n            }\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureRemoved(event);\r\n        }\r\n    }\r\n}"},
 {"id":226, "parametername":"CompositeFigureListener listener", "parametertype":"org.jhotdraw.draw.CompositeFigureListener", "parameterclass":138, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":840, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)", "isreturn":0, "sourcecode":"public void removeCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.remove(CompositeFigureListener.class, listener);\r\n}"},
 {"id":227, "parametername":"CompositeFigureListener listener", "parametertype":"org.jhotdraw.draw.CompositeFigureListener", "parameterclass":138, "classid":95, "classname":"org.jhotdraw.draw.AbstractCompositeFigure", "methodid":798, "methodname":"org.jhotdraw.draw.AbstractCompositeFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)", "isreturn":0, "sourcecode":"public void addCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.add(CompositeFigureListener.class, listener);\r\n}"},
 {"id":228, "parametername":"ConnectionFigure owner", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":859, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.-init-(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Initializes the change connection handle.\r\n */\r\nprotected AbstractConnectionHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":229, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":877, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"public boolean isCombinableWith(Handle handle) {\r\n    return false;\r\n}"},
 {"id":230, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":862, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.connect(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Connect the connection with the given figure.\r\n */\r\nprotected abstract void connect(Connector c);"},
 {"id":231, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":867, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.findConnectionTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"private Connector findConnectionTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure targetFigure = findConnectableFigure(p, drawing);\r\n    if (((getSource()) == null) && (targetFigure != null)) {\r\n        return findConnector(p, targetFigure, getOwner());\r\n    } else\r\n        if (targetFigure != null) {\r\n            Connector target = findConnector(p, targetFigure, getOwner());\r\n            if (((((targetFigure != null) && (targetFigure.canConnect()))// \r\n             && (targetFigure != (savedTarget)))// \r\n             && (!(targetFigure.includes(getOwner()))))// \r\n             && (canConnect(getSource(), target))) {\r\n                return target;\r\n            }\r\n        }\r\n\r\n    return null;\r\n}"},
 {"id":232, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":867, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.findConnectionTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":1, "sourcecode":"private Connector findConnectionTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure targetFigure = findConnectableFigure(p, drawing);\r\n    if (((getSource()) == null) && (targetFigure != null)) {\r\n        return findConnector(p, targetFigure, getOwner());\r\n    } else\r\n        if (targetFigure != null) {\r\n            Connector target = findConnector(p, targetFigure, getOwner());\r\n            if (((((targetFigure != null) && (targetFigure.canConnect()))// \r\n             && (targetFigure != (savedTarget)))// \r\n             && (!(targetFigure.includes(getOwner()))))// \r\n             && (canConnect(getSource(), target))) {\r\n                return target;\r\n            }\r\n        }\r\n\r\n    return null;\r\n}"},
 {"id":233, "parametername":"Connector existingEnd", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":861, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"protected abstract boolean canConnect(Connector existingEnd, Connector targetEnd);"},
 {"id":234, "parametername":"Connector targetEnd", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":861, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"protected abstract boolean canConnect(Connector existingEnd, Connector targetEnd);"},
 {"id":235, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":868, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"protected Connector findConnector(Point2D.Double p, Figure f, ConnectionFigure prototype) {\r\n    return f.findConnector(p, prototype);\r\n}"},
 {"id":236, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":868, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"protected Connector findConnector(Point2D.Double p, Figure f, ConnectionFigure prototype) {\r\n    return f.findConnector(p, prototype);\r\n}"},
 {"id":237, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":868, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"protected Connector findConnector(Point2D.Double p, Figure f, ConnectionFigure prototype) {\r\n    return f.findConnector(p, prototype);\r\n}"},
 {"id":238, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":866, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        if (((!(f.includes(getOwner()))) && (f.canConnect())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":239, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":866, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":1, "sourcecode":"private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        if (((!(f.includes(getOwner()))) && (f.canConnect())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":240, "parametername":"Connector newTarget", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":96, "classname":"org.jhotdraw.draw.AbstractConnectionHandle", "methodid":880, "methodname":"org.jhotdraw.draw.AbstractConnectionHandle.setPotentialTarget(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"protected void setPotentialTarget(Connector newTarget) {\r\n    this.connectableConnector = newTarget;\r\n}"},
 {"id":241, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":885, "methodname":"org.jhotdraw.draw.AbstractConnector.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Constructs a connector with the given owner figure.\r\n */\r\npublic AbstractConnector(Figure owner) {\r\n    this.owner = owner;\r\n}"},
 {"id":242, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":894, "methodname":"org.jhotdraw.draw.AbstractConnector.getConnectorTarget(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected final Figure getConnectorTarget(Figure f) {\r\n    return (isConnectToDecorator) && ((((DecoratedFigure) (f)).getDecorator()) != null) ? ((DecoratedFigure) (f)).getDecorator() : f;\r\n}"},
 {"id":243, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":894, "methodname":"org.jhotdraw.draw.AbstractConnector.getConnectorTarget(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"protected final Figure getConnectorTarget(Figure f) {\r\n    return (isConnectToDecorator) && ((((DecoratedFigure) (f)).getDecorator()) != null) ? ((DecoratedFigure) (f)).getDecorator() : f;\r\n}"},
 {"id":244, "parametername":"ConnectionFigure connection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":891, "methodname":"org.jhotdraw.draw.AbstractConnector.findStart(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Point2D.Double findStart(ConnectionFigure connection) {\r\n    return findPoint(connection);\r\n}"},
 {"id":245, "parametername":"ConnectionFigure connection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":889, "methodname":"org.jhotdraw.draw.AbstractConnector.findEnd(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Point2D.Double findEnd(ConnectionFigure connection) {\r\n    return findPoint(connection);\r\n}"},
 {"id":246, "parametername":"ConnectionFigure connection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":890, "methodname":"org.jhotdraw.draw.AbstractConnector.findPoint(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Gets the connection point. Override when the connector\r\n * does not need to distinguish between the start and end\r\n * point of a connection.\r\n */\r\nprotected Point2D.Double findPoint(ConnectionFigure connection) {\r\n    return Geom.center(getBounds());\r\n}"},
 {"id":247, "parametername":"Figure newValue", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":900, "methodname":"org.jhotdraw.draw.AbstractConnector.setOwner(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Sets the connectors owner.\r\n */\r\nprotected void setOwner(Figure newValue) {\r\n    owner = newValue;\r\n}"},
 {"id":248, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":898, "methodname":"org.jhotdraw.draw.AbstractConnector.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    if (isStatePersistent) {\r\n        isConnectToDecorator = in.getAttribute(\"connectToDecorator\", false);\r\n    }\r\n    if ((in.getElementCount(\"Owner\")) != 0) {\r\n        in.openElement(\"Owner\");\r\n    } else {\r\n        in.openElement(\"owner\");\r\n    }\r\n    this.owner = ((Figure) (in.readObject(0)));\r\n    in.closeElement();\r\n}"},
 {"id":249, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":97, "classname":"org.jhotdraw.draw.AbstractConnector", "methodid":904, "methodname":"org.jhotdraw.draw.AbstractConnector.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    if (isStatePersistent) {\r\n        if (isConnectToDecorator) {\r\n            out.addAttribute(\"connectToDecorator\", true);\r\n        }\r\n    }\r\n    out.openElement(\"Owner\");\r\n    out.writeObject(getOwner());\r\n    out.closeElement();\r\n}"},
 {"id":250, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":99, "classname":"org.jhotdraw.draw.AbstractDrawing", "methodid":920, "methodname":"org.jhotdraw.draw.AbstractDrawing.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    in.openElement(\"figures\");\r\n    for (int i = 0; i < (in.getElementCount()); i++) {\r\n        Figure f;\r\n        add((f = ((Figure) (in.readObject(i)))));\r\n    }\r\n    in.closeElement();\r\n}"},
 {"id":251, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":99, "classname":"org.jhotdraw.draw.AbstractDrawing", "methodid":925, "methodname":"org.jhotdraw.draw.AbstractDrawing.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    out.openElement(\"figures\");\r\n    for (Figure f : getChildren()) {\r\n        out.writeObject(f);\r\n    }\r\n    out.closeElement();\r\n}"},
 {"id":252, "parametername":"InputFormat format", "parametertype":"org.jhotdraw.draw.InputFormat", "parameterclass":203, "classid":99, "classname":"org.jhotdraw.draw.AbstractDrawing", "methodid":911, "methodname":"org.jhotdraw.draw.AbstractDrawing.addInputFormat(org.jhotdraw.draw.InputFormat)", "isreturn":0, "sourcecode":"public void addInputFormat(InputFormat format) {\r\n    inputFormats.add(format);\r\n}"},
 {"id":253, "parametername":"OutputFormat format", "parametertype":"org.jhotdraw.draw.OutputFormat", "parameterclass":221, "classid":99, "classname":"org.jhotdraw.draw.AbstractDrawing", "methodid":912, "methodname":"org.jhotdraw.draw.AbstractDrawing.addOutputFormat(org.jhotdraw.draw.OutputFormat)", "isreturn":0, "sourcecode":"public void addOutputFormat(OutputFormat format) {\r\n    outputFormats.add(format);\r\n    if (AbstractDrawing.DEBUG) {\r\n        System.out.println(((((this) + \".addOutputFormat(\") + format) + \")\"));\r\n    }\r\n}"},
 {"id":254, "parametername":"FigureListener l", "parametertype":"org.jhotdraw.draw.FigureListener", "parameterclass":178, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":927, "methodname":"org.jhotdraw.draw.AbstractFigure.addFigureListener(org.jhotdraw.draw.FigureListener)", "isreturn":0, "sourcecode":"// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n// COMPOSITE FIGURES\r\n// CLONING\r\n// EVENT HANDLING\r\npublic void addFigureListener(FigureListener l) {\r\n    listenerList.add(FigureListener.class, l);\r\n}"},
 {"id":255, "parametername":"FigureListener l", "parametertype":"org.jhotdraw.draw.FigureListener", "parameterclass":178, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":973, "methodname":"org.jhotdraw.draw.AbstractFigure.removeFigureListener(org.jhotdraw.draw.FigureListener)", "isreturn":0, "sourcecode":"public void removeFigureListener(FigureListener l) {\r\n    listenerList.remove(FigureListener.class, l);\r\n}"},
 {"id":256, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":928, "methodname":"org.jhotdraw.draw.AbstractFigure.addNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void addNotify(Drawing d) {\r\n    this.drawing = d;\r\n    fireFigureAdded();\r\n}"},
 {"id":257, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":974, "methodname":"org.jhotdraw.draw.AbstractFigure.removeNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void removeNotify(Drawing d) {\r\n    fireFigureRemoved();\r\n    this.drawing = null;\r\n}"},
 {"id":258, "parametername":"FigureEvent event", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":939, "methodname":"org.jhotdraw.draw.AbstractFigure.fireAreaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAreaInvalidated(FigureEvent event) {\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (FigureListener.class)) {\r\n            ((FigureListener) (listeners[(i + 1)])).areaInvalidated(event);\r\n        }\r\n    }\r\n}"},
 {"id":259, "parametername":"FigureEvent event", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":944, "methodname":"org.jhotdraw.draw.AbstractFigure.fireFigureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"protected void fireFigureChanged(FigureEvent event) {\r\n    if ((listenerList.getListenerCount()) > 0) {\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                ((FigureListener) (listeners[(i + 1)])).figureChanged(event);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":260, "parametername":"AttributeKey attribute", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":940, "methodname":"org.jhotdraw.draw.AbstractFigure.fireAttributeChanged(org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireAttributeChanged(AttributeKey attribute, Object oldValue, Object newValue) {\r\n    if (((listenerList.getListenerCount()) > 0) && (((oldValue == null) || (newValue == null)) || (!(oldValue.equals(newValue))))) {\r\n        FigureEvent event = null;\r\n        // Notify all listeners that have registered interest for\r\n        // Guaranteed to return a non-null array\r\n        Object[] listeners = listenerList.getListenerList();\r\n        // Process the listeners last to first, notifying\r\n        // those that are interested in this event\r\n        for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n            if ((listeners[i]) == (FigureListener.class)) {\r\n                // Lazily create the event:\r\n                if (event == null) {\r\n                    event = new FigureEvent(this, attribute, oldValue, newValue);\r\n                }\r\n                ((FigureListener) (listeners[(i + 1)])).attributeChanged(event);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":261, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":935, "methodname":"org.jhotdraw.draw.AbstractFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopBoxConnector is returned.\r\n *\r\n * @see ChopRectangleConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRectangleConnector(this);\r\n}"},
 {"id":262, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":935, "methodname":"org.jhotdraw.draw.AbstractFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopBoxConnector is returned.\r\n *\r\n * @see ChopRectangleConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRectangleConnector(this);\r\n}"},
 {"id":263, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":965, "methodname":"org.jhotdraw.draw.AbstractFigure.includes(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public boolean includes(Figure figure) {\r\n    return figure == (this);\r\n}"},
 {"id":264, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":934, "methodname":"org.jhotdraw.draw.AbstractFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopRectangleConnector(this);\r\n}"},
 {"id":265, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":934, "methodname":"org.jhotdraw.draw.AbstractFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopRectangleConnector(this);\r\n}"},
 {"id":266, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":964, "methodname":"org.jhotdraw.draw.AbstractFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Handles a mouse click.\r\n */\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    return false;\r\n}"},
 {"id":267, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":963, "methodname":"org.jhotdraw.draw.AbstractFigure.handleDrop(java.awt.geom.Point2D$Double,java.util.Collection,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public boolean handleDrop(Point2D.Double p, Collection<Figure> droppedFigures, DrawingView view) {\r\n    return false;\r\n}"},
 {"id":268, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":100, "classname":"org.jhotdraw.draw.AbstractFigure", "methodid":951, "methodname":"org.jhotdraw.draw.AbstractFigure.getConnectors(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Collection<Connector> getConnectors(ConnectionFigure prototype) {\r\n    LinkedList<Connector> connectors = new LinkedList<Connector>();\r\n    connectors.add(new ChopRectangleConnector(this));\r\n    return connectors;\r\n}"},
 {"id":269, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":985, "methodname":"org.jhotdraw.draw.AbstractHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractHandle(Figure owner) {\r\n    if (owner == null) {\r\n        throw new IllegalArgumentException(\"owner must not be null\");\r\n    }\r\n    this.owner = owner;\r\n    owner.addFigureListener(this);\r\n}"},
 {"id":270, "parametername":"HandleListener l", "parametertype":"org.jhotdraw.draw.HandleListener", "parameterclass":194, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":986, "methodname":"org.jhotdraw.draw.AbstractHandle.addHandleListener(org.jhotdraw.draw.HandleListener)", "isreturn":0, "sourcecode":"/**\r\n * Adds a listener for this handle.\r\n */\r\npublic void addHandleListener(HandleListener l) {\r\n    listenerList.add(HandleListener.class, l);\r\n}"},
 {"id":271, "parametername":"HandleListener l", "parametertype":"org.jhotdraw.draw.HandleListener", "parameterclass":194, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":1019, "methodname":"org.jhotdraw.draw.AbstractHandle.removeHandleListener(org.jhotdraw.draw.HandleListener)", "isreturn":0, "sourcecode":"/**\r\n * Removes a listener for this handle.\r\n */\r\npublic void removeHandleListener(HandleListener l) {\r\n    listenerList.remove(HandleListener.class, l);\r\n}"},
 {"id":272, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":1020, "methodname":"org.jhotdraw.draw.AbstractHandle.setView(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void setView(DrawingView view) {\r\n    this.view = view;\r\n}"},
 {"id":273, "parametername":"FigureEvent evt", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":987, "methodname":"org.jhotdraw.draw.AbstractHandle.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when a region used by the figure needs to be repainted.\r\n * The implementation of this method assumes that the handle\r\n * is located on the bounds of the figure or inside the figure.\r\n * If the handle is located elsewhere this method must be reimpleted\r\n * by the subclass.\r\n */\r\npublic void areaInvalidated(FigureEvent evt) {\r\n    updateBounds();\r\n}"},
 {"id":274, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":997, "methodname":"org.jhotdraw.draw.AbstractHandle.figureAdded(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when a figure was added.\r\n */\r\npublic void figureAdded(FigureEvent e) {\r\n    // Empty\r\n}"},
 {"id":275, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":1000, "methodname":"org.jhotdraw.draw.AbstractHandle.figureRemoved(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when a figure was removed.\r\n */\r\npublic void figureRemoved(FigureEvent e) {\r\n    // Empty\r\n}"},
 {"id":276, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":1001, "methodname":"org.jhotdraw.draw.AbstractHandle.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when a figure requests to be removed.\r\n */\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    // Empty\r\n}"},
 {"id":277, "parametername":"FigureEvent evt", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":998, "methodname":"org.jhotdraw.draw.AbstractHandle.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when the bounds or shape of a figure has changed.\r\n */\r\npublic void figureChanged(FigureEvent evt) {\r\n    updateBounds();\r\n}"},
 {"id":278, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":1015, "methodname":"org.jhotdraw.draw.AbstractHandle.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"/**\r\n * Returns true, if the given handle is an instance of the same\r\n * class or of a subclass of this handle,.\r\n */\r\npublic boolean isCombinableWith(Handle handle) {\r\n    return getClass().isAssignableFrom(handle.getClass());\r\n}"},
 {"id":279, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":988, "methodname":"org.jhotdraw.draw.AbstractHandle.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void attributeChanged(FigureEvent e) {\r\n}"},
 {"id":280, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":101, "classname":"org.jhotdraw.draw.AbstractHandle", "methodid":999, "methodname":"org.jhotdraw.draw.AbstractHandle.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureHandlesChanged(FigureEvent e) {\r\n}"},
 {"id":281, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":102, "classname":"org.jhotdraw.draw.AbstractLayouter", "methodid":1025, "methodname":"org.jhotdraw.draw.AbstractLayouter.getInsets(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Insets2D.Double getInsets(Figure child) {\r\n    Insets2D.Double value = CompositeFigure.LAYOUT_INSETS.get(child);\r\n    return value == null ? new Insets2D.Double() : ((Insets2D.Double) (value.clone()));\r\n}"},
 {"id":282, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":103, "classname":"org.jhotdraw.draw.AbstractLineDecoration", "methodid":1027, "methodname":"org.jhotdraw.draw.AbstractLineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Draws the arrow tip in the direction specified by the given two\r\n * Points.. (template method)\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getTransformedDecoratorPath(f, p1, p2);\r\n    Color color;\r\n    if (isFilled) {\r\n        if (isSolid) {\r\n            color = AttributeKeys.STROKE_COLOR.get(f);\r\n        } else {\r\n            color = AttributeKeys.FILL_COLOR.get(f);\r\n        }\r\n        if (color != null) {\r\n            g.setColor(color);\r\n            g.fill(path);\r\n        }\r\n    }\r\n    if (isStroked) {\r\n        color = AttributeKeys.STROKE_COLOR.get(f);\r\n        if (color != null) {\r\n            g.setColor(color);\r\n            g.setStroke(AttributeKeys.getStroke(f));\r\n            g.draw(path);\r\n        }\r\n    }\r\n}"},
 {"id":283, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":103, "classname":"org.jhotdraw.draw.AbstractLineDecoration", "methodid":1031, "methodname":"org.jhotdraw.draw.AbstractLineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Returns the drawing area of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getTransformedDecoratorPath(f, p1, p2);\r\n    Rectangle2D b = path.getBounds2D();\r\n    Rectangle2D.Double area = new Rectangle2D.Double(b.getX(), b.getY(), b.getWidth(), b.getHeight());\r\n    if (isStroked) {\r\n        double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n        int strokeJoin = AttributeKeys.STROKE_JOIN.get(f);\r\n        double miterLimit = (AttributeKeys.STROKE_MITER_LIMIT.get(f)) * strokeWidth;\r\n        double grow;\r\n        if (strokeJoin == (BasicStroke.JOIN_MITER)) {\r\n            grow = ((int) (1 + ((strokeWidth / 2) * miterLimit)));\r\n        } else {\r\n            grow = ((int) (1 + (strokeWidth / 2)));\r\n        }\r\n        Geom.grow(area, grow, grow);\r\n    } else {\r\n        Geom.grow(area, 1, 1);// grow due to antialiasing\r\n\r\n    }\r\n    return area;\r\n}"},
 {"id":284, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":103, "classname":"org.jhotdraw.draw.AbstractLineDecoration", "methodid":1028, "methodname":"org.jhotdraw.draw.AbstractLineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public double getDecorationRadius(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    double scaleFactor;\r\n    if (strokeWidth > 1.0F) {\r\n        scaleFactor = 1.0 + ((strokeWidth - 1.0) / 2.0);\r\n    } else {\r\n        scaleFactor = 1.0;\r\n    }\r\n    return (getDecoratorPathRadius(f)) * scaleFactor;\r\n}"},
 {"id":285, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":103, "classname":"org.jhotdraw.draw.AbstractLineDecoration", "methodid":1032, "methodname":"org.jhotdraw.draw.AbstractLineDecoration.getTransformedDecoratorPath(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"private GeneralPath getTransformedDecoratorPath(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    GeneralPath path = getDecoratorPath(f);\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    AffineTransform transform = new AffineTransform();\r\n    transform.translate(p1.x, p1.y);\r\n    transform.rotate(Math.atan2(((p1.x) - (p2.x)), ((p2.y) - (p1.y))));\r\n    // transform.rotate(Math.PI / 2);\r\n    if (strokeWidth > 1.0F) {\r\n        transform.scale((1.0 + ((strokeWidth - 1.0) / 2.0)), (1.0 + ((strokeWidth - 1.0) / 2.0)));\r\n    }\r\n    path.transform(transform);\r\n    return path;\r\n}"},
 {"id":286, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":103, "classname":"org.jhotdraw.draw.AbstractLineDecoration", "methodid":1029, "methodname":"org.jhotdraw.draw.AbstractLineDecoration.getDecoratorPath(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Hook method to calculates the path of the decorator.\r\n */\r\nprotected abstract GeneralPath getDecoratorPath(Figure f);"},
 {"id":287, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":103, "classname":"org.jhotdraw.draw.AbstractLineDecoration", "methodid":1030, "methodname":"org.jhotdraw.draw.AbstractLineDecoration.getDecoratorPathRadius(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Hook method to calculates the radius of the decorator path.\r\n */\r\nprotected abstract double getDecoratorPathRadius(Figure f);"},
 {"id":288, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":104, "classname":"org.jhotdraw.draw.AbstractLocator", "methodid":1040, "methodname":"org.jhotdraw.draw.AbstractLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}"},
 {"id":289, "parametername":"Figure dependent", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":104, "classname":"org.jhotdraw.draw.AbstractLocator", "methodid":1040, "methodname":"org.jhotdraw.draw.AbstractLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}"},
 {"id":290, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":105, "classname":"org.jhotdraw.draw.AbstractRotateHandle", "methodid":1041, "methodname":"org.jhotdraw.draw.AbstractRotateHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractRotateHandle(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":291, "parametername":"Handle h", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":105, "classname":"org.jhotdraw.draw.AbstractRotateHandle", "methodid":1051, "methodname":"org.jhotdraw.draw.AbstractRotateHandle.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}"},
 {"id":292, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":106, "classname":"org.jhotdraw.draw.AbstractTool", "methodid":1057, "methodname":"org.jhotdraw.draw.AbstractTool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void activate(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    editorProxy.setTarget(editor);\r\n    isActive = true;\r\n    // Repaint all handles\r\n    for (DrawingView v : editor.getDrawingViews()) {\r\n        v.repaintHandles();\r\n    }\r\n}"},
 {"id":293, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":106, "classname":"org.jhotdraw.draw.AbstractTool", "methodid":1064, "methodname":"org.jhotdraw.draw.AbstractTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void deactivate(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    isActive = false;\r\n}"},
 {"id":294, "parametername":"ToolListener l", "parametertype":"org.jhotdraw.draw.ToolListener", "parameterclass":264, "classid":106, "classname":"org.jhotdraw.draw.AbstractTool", "methodid":1058, "methodname":"org.jhotdraw.draw.AbstractTool.addToolListener(org.jhotdraw.draw.ToolListener)", "isreturn":0, "sourcecode":"public void addToolListener(ToolListener l) {\r\n    listenerList.add(ToolListener.class, l);\r\n}"},
 {"id":295, "parametername":"ToolListener l", "parametertype":"org.jhotdraw.draw.ToolListener", "parameterclass":264, "classid":106, "classname":"org.jhotdraw.draw.AbstractTool", "methodid":1091, "methodname":"org.jhotdraw.draw.AbstractTool.removeToolListener(org.jhotdraw.draw.ToolListener)", "isreturn":0, "sourcecode":"public void removeToolListener(ToolListener l) {\r\n    listenerList.remove(ToolListener.class, l);\r\n}"},
 {"id":296, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":106, "classname":"org.jhotdraw.draw.AbstractTool", "methodid":1074, "methodname":"org.jhotdraw.draw.AbstractTool.fireToolStarted(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireToolStarted(DrawingView view) {\r\n    ToolEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (ToolListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new ToolEvent(this, view, new Rectangle(0, 0, (-1), (-1)));\r\n\r\n            ((ToolListener) (listeners[(i + 1)])).toolStarted(event);\r\n        }\r\n    }\r\n}"},
 {"id":297, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":106, "classname":"org.jhotdraw.draw.AbstractTool", "methodid":1096, "methodname":"org.jhotdraw.draw.AbstractTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)", "isreturn":0, "sourcecode":"public void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        Handle handle = view.findHandle(p);\r\n        if (handle != null) {\r\n            view.setCursor(handle.getCursor());\r\n        } else {\r\n            Figure figure = view.findFigure(p);\r\n            Point2D.Double point = view.viewToDrawing(p);\r\n            Drawing drawing = view.getDrawing();\r\n            while ((figure != null) && (!(figure.isSelectable()))) {\r\n                figure = drawing.findFigureBehind(point, figure);\r\n            } \r\n            if (figure != null) {\r\n                view.setCursor(figure.getCursor(view.viewToDrawing(p)));\r\n            } else {\r\n                view.setCursor(Cursor.getDefaultCursor());\r\n            }\r\n        }\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}"},
 {"id":298, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":106, "classname":"org.jhotdraw.draw.AbstractTool", "methodid":1079, "methodname":"org.jhotdraw.draw.AbstractTool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)", "isreturn":0, "sourcecode":"public String getToolTipText(DrawingView view, MouseEvent evt) {\r\n    return null;\r\n}"},
 {"id":299, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":107, "classname":"org.jhotdraw.draw.ArrowTip", "methodid":1101, "methodname":"org.jhotdraw.draw.ArrowTip.getDecoratorPath(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected GeneralPath getDecoratorPath(Figure f) {\r\n    // FIXME - This should take the stroke join an the outer radius into\r\n    // account to compute the offset properly.\r\n    double offset = (isStroked()) ? 1 : 0;\r\n    GeneralPath path = new GeneralPath();\r\n    path.moveTo(((float) ((outerRadius) * (Math.sin((-(angle)))))), ((float) (offset + ((outerRadius) * (Math.cos((-(angle))))))));\r\n    path.lineTo(0, ((float) (offset)));\r\n    path.lineTo(((float) ((outerRadius) * (Math.sin(angle)))), ((float) (offset + ((outerRadius) * (Math.cos(angle))))));\r\n    if ((innerRadius) != 0) {\r\n        path.lineTo(0, ((float) ((innerRadius) + offset)));\r\n        path.closePath();\r\n    }\r\n    return path;\r\n}"},
 {"id":300, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":107, "classname":"org.jhotdraw.draw.ArrowTip", "methodid":1102, "methodname":"org.jhotdraw.draw.ArrowTip.getDecoratorPathRadius(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected double getDecoratorPathRadius(Figure f) {\r\n    double offset = (isStroked()) ? 0.5 : -0.1;\r\n    return (innerRadius) + offset;\r\n}"},
 {"id":301, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":107, "classname":"org.jhotdraw.draw.ArrowTip", "methodid":1103, "methodname":"org.jhotdraw.draw.ArrowTip.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) {\r\n    angle = in.getAttribute(\"angle\", 0.35F);\r\n    innerRadius = in.getAttribute(\"innerRadius\", 12.0F);\r\n    outerRadius = in.getAttribute(\"outerRadius\", 12.0F);\r\n    setFilled(in.getAttribute(\"isFilled\", false));\r\n    setStroked(in.getAttribute(\"isStroked\", false));\r\n    setSolid(in.getAttribute(\"isSolid\", false));\r\n}"},
 {"id":302, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":107, "classname":"org.jhotdraw.draw.ArrowTip", "methodid":1104, "methodname":"org.jhotdraw.draw.ArrowTip.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) {\r\n    out.addAttribute(\"angle\", angle);\r\n    out.addAttribute(\"innerRadius\", innerRadius);\r\n    out.addAttribute(\"outerRadius\", outerRadius);\r\n    out.addAttribute(\"isFilled\", isFilled());\r\n    out.addAttribute(\"isStroked\", isStroked());\r\n    out.addAttribute(\"isSolid\", isSolid());\r\n}"},
 {"id":303, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":108, "classname":"org.jhotdraw.draw.AttributeChangeEdit", "methodid":1105, "methodname":"org.jhotdraw.draw.AttributeChangeEdit.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeChangeEdit(Figure owner, AttributeKey<T> name, T oldValue, T newValue) {\r\n    this.owner = owner;\r\n    this.name = name;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}"},
 {"id":304, "parametername":"AttributeKey<T> name", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":108, "classname":"org.jhotdraw.draw.AttributeChangeEdit", "methodid":1105, "methodname":"org.jhotdraw.draw.AttributeChangeEdit.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeChangeEdit(Figure owner, AttributeKey<T> name, T oldValue, T newValue) {\r\n    this.owner = owner;\r\n    this.name = name;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}"},
 {"id":305, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":109, "classname":"org.jhotdraw.draw.AttributeKey", "methodid":1112, "methodname":"org.jhotdraw.draw.AttributeKey.-init-(java.lang.String,java.lang.Class,java.lang.Object,boolean,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance with the specified attribute key, type token class,\r\n * default value, and allowing or disallowing null values.\r\n *\r\n * @param key\r\n * \t\tThe key string.\r\n * @param clazz\r\n * \t\tThis is used as a \"type token\" for assignability checks\r\n * \t\tat runtime.\r\n * @param isNullValueAllowed\r\n * \t\twhether null values are allowed.\r\n * @param labels\r\n * \t\tResourceBundle for human friendly representation of this\r\n * \t\tattribute key. The ResourceBundle must have a property named\r\n * \t\t{@code \"attribute.\" + key + \".text\"}.\r\n */\r\npublic AttributeKey(String key, Class<T> clazz, T defaultValue, boolean isNullValueAllowed, ResourceBundleUtil labels) {\r\n    this.key = key;\r\n    this.clazz = clazz;\r\n    this.defaultValue = defaultValue;\r\n    this.isNullValueAllowed = isNullValueAllowed;\r\n    this.labels = labels;\r\n}"},
 {"id":306, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":109, "classname":"org.jhotdraw.draw.AttributeKey", "methodid":1119, "methodname":"org.jhotdraw.draw.AttributeKey.getClone(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Gets a clone of the value from the Figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic T getClone(Figure f) {\r\n    T value = get(f);\r\n    try {\r\n        return value == null ? null : clazz.cast(Methods.invoke(value, \"clone\"));\r\n    } catch (NoSuchMethodException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}"},
 {"id":307, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":109, "classname":"org.jhotdraw.draw.AttributeKey", "methodid":1118, "methodname":"org.jhotdraw.draw.AttributeKey.get(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Gets the value of the attribute denoted by this AttributeKey from\r\n * a Figure.\r\n *\r\n * @param f\r\n * \t\tA figure.\r\n * @return The value of the attribute.\r\n */\r\npublic T get(Figure f) {\r\n    T value = ((T) (f.getAttribute(this)));\r\n    return (value == null) && (!(isNullValueAllowed)) ? defaultValue : value;\r\n}"},
 {"id":308, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":109, "classname":"org.jhotdraw.draw.AttributeKey", "methodid":1128, "methodname":"org.jhotdraw.draw.AttributeKey.set(org.jhotdraw.draw.Figure,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Convenience method for setting a value on the\r\n * specified figure and calling willChange before and changed\r\n * after setting the value.\r\n *\r\n * @param f\r\n * \t\tthe Figure\r\n * @param value\r\n * \t\tthe attribute value\r\n */\r\npublic void set(Figure f, T value) {\r\n    f.willChange();\r\n    basicSet(f, value);\r\n    f.changed();\r\n}"},
 {"id":309, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":109, "classname":"org.jhotdraw.draw.AttributeKey", "methodid":1114, "methodname":"org.jhotdraw.draw.AttributeKey.basicSet(org.jhotdraw.draw.Figure,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Sets a value on the specified figure without invoking {@code willChange}\r\n * and {@code changed} on the figure.\r\n * <p>\r\n * This method can be used to efficiently build a drawing from an\r\n * {@link InputFormat}.\r\n *\r\n * @param f\r\n * \t\tthe Figure\r\n * @param value\r\n * \t\tthe attribute value\r\n */\r\npublic void basicSet(Figure f, T value) {\r\n    if ((value == null) && (!(isNullValueAllowed))) {\r\n        throw new NullPointerException((\"Null value not allowed for AttributeKey \" + (key)));\r\n    }\r\n    f.setAttribute(this, value);\r\n}"},
 {"id":310, "parametername":"final Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":109, "classname":"org.jhotdraw.draw.AttributeKey", "methodid":1131, "methodname":"org.jhotdraw.draw.AttributeKey.setUndoable(org.jhotdraw.draw.Figure,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Sets the attribute and returns an UndoableEditEvent which can be used\r\n * to undo it.\r\n */\r\npublic UndoableEdit setUndoable(final Figure figure, final T value) {\r\n    if ((value == null) && (!(isNullValueAllowed))) {\r\n        throw new NullPointerException((\"Null value not allowed for AttributeKey \" + (key)));\r\n    }\r\n    final Object restoreData = figure.getAttributesRestoreData();\r\n    figure.willChange();\r\n    figure.setAttribute(this, value);\r\n    figure.changed();\r\n    UndoableEdit edit = new AbstractUndoableEdit() {\r\n        @Override\r\n        public String getPresentationName() {\r\n            return AttributeKey.this.getPresentationName();\r\n        }\r\n\r\n        @Override\r\n        public void undo() {\r\n            super.undo();\r\n            figure.willChange();\r\n            figure.restoreAttributesTo(restoreData);\r\n            figure.changed();\r\n        }\r\n\r\n        @Override\r\n        public void redo() {\r\n            super.redo();\r\n            figure.willChange();\r\n            figure.setAttribute(AttributeKey.this, value);\r\n            figure.changed();\r\n        }\r\n    };\r\n    return edit;\r\n}"},
 {"id":311, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":109, "classname":"org.jhotdraw.draw.AttributeKey", "methodid":1130, "methodname":"org.jhotdraw.draw.AttributeKey.setClone(org.jhotdraw.draw.Figure,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Convenience method for seting a clone of a value on the\r\n * specified figure and calling willChange before and changed\r\n * after setting the value.\r\n *\r\n * @param f\r\n * \t\tthe Figure\r\n * @param value\r\n * \t\tthe attribute value\r\n */\r\npublic void setClone(Figure f, T value) {\r\n    f.willChange();\r\n    basicSetClone(f, value);\r\n    f.changed();\r\n}"},
 {"id":312, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":109, "classname":"org.jhotdraw.draw.AttributeKey", "methodid":1115, "methodname":"org.jhotdraw.draw.AttributeKey.basicSetClone(org.jhotdraw.draw.Figure,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Sets a clone of a value on the specified figure, without invoking\r\n * {@code willChange} and {@code changed} on the figure.\r\n * <p>\r\n * This method can be used to efficiently build a drawing from an\r\n * {@link InputFormat}.\r\n *\r\n * @param f\r\n * \t\tthe Figure\r\n * @param value\r\n * \t\tthe attribute value\r\n */\r\npublic void basicSetClone(Figure f, T value) {\r\n    try {\r\n        basicSet(f, (value == null ? null : clazz.cast(Methods.invoke(value, \"clone\"))));\r\n    } catch (NoSuchMethodException ex) {\r\n        InternalError e = new InternalError();\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}"},
 {"id":313, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1142, "methodname":"org.jhotdraw.draw.AttributeKeys.getStrokeTotalWidth(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Convenience method for computing the total stroke width from the\r\n * STROKE_WIDTH, STROKE_INNER_WIDTH and STROKE_TYPE attributes.\r\n */\r\npublic static double getStrokeTotalWidth(Figure f) {\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return AttributeKeys.STROKE_WIDTH.get(f);\r\n            // break; not reached\r\n        case DOUBLE :\r\n            return (AttributeKeys.STROKE_WIDTH.get(f)) * (1.0 + (AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)));\r\n            // break; not reached\r\n    }\r\n}"},
 {"id":314, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1141, "methodname":"org.jhotdraw.draw.AttributeKeys.getStrokeTotalMiterLimit(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Convenience method for computing the total stroke miter limit from the\r\n * STROKE_MITER_LIMIT, and IS_STROKE_MITER_LIMIT factor.\r\n */\r\npublic static double getStrokeTotalMiterLimit(Figure f) {\r\n    if (AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.get(f)) {\r\n        return (AttributeKeys.STROKE_MITER_LIMIT.get(f)) * (AttributeKeys.STROKE_WIDTH.get(f));\r\n    } else {\r\n        return AttributeKeys.STROKE_MITER_LIMIT.get(f);\r\n    }\r\n}"},
 {"id":315, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1140, "methodname":"org.jhotdraw.draw.AttributeKeys.getStroke(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Stroke getStroke(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    float miterLimit = ((float) (AttributeKeys.getStrokeTotalMiterLimit(f)));\r\n    double dashFactor = (AttributeKeys.IS_STROKE_DASH_FACTOR.get(f)) ? strokeWidth : 1.0;\r\n    double dashPhase = AttributeKeys.STROKE_DASH_PHASE.get(f);\r\n    double[] ddashes = AttributeKeys.STROKE_DASHES.get(f);\r\n    float[] dashes = null;\r\n    boolean isAllZeroes = true;\r\n    if (ddashes != null) {\r\n        dashes = new float[ddashes.length];\r\n        double dashSize = 0.0F;\r\n        for (int i = 0; i < (dashes.length); i++) {\r\n            dashes[i] = Math.max(0.0F, ((float) ((ddashes[i]) * dashFactor)));\r\n            dashSize += dashes[i];\r\n            if (isAllZeroes && ((dashes[i]) != 0)) {\r\n                isAllZeroes = false;\r\n            }\r\n        }\r\n        if (((dashes.length) % 2) == 1) {\r\n            dashSize *= 2;\r\n        }\r\n        if (dashPhase < 0) {\r\n            dashPhase = dashSize + (dashPhase % dashSize);\r\n        }\r\n    }\r\n    if (isAllZeroes) {\r\n        // dont draw dashes, if all values are 0.\r\n        dashes = null;\r\n    }\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return new BasicStroke(((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, dashes, Math.max(0, ((float) (dashPhase * dashFactor))));\r\n            // not reached\r\n        case DOUBLE :\r\n            return new DoubleStroke(((float) ((AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)) * strokeWidth)), ((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, dashes, Math.max(0, ((float) (dashPhase * dashFactor))));\r\n            // not reached\r\n    }\r\n}"},
 {"id":316, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1136, "methodname":"org.jhotdraw.draw.AttributeKeys.getHitStroke(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns a stroke which is useful for hit-testing.\r\n * The stroke reflects the stroke width, but not the stroke dashes\r\n * attribute.\r\n *\r\n * @param f\r\n * \t\t\r\n * @return A stroke suited for creating a shape for hit testing.\r\n */\r\npublic static Stroke getHitStroke(Figure f) {\r\n    double strokeWidth = Math.max(1, AttributeKeys.STROKE_WIDTH.get(f));\r\n    float miterLimit = ((float) (AttributeKeys.getStrokeTotalMiterLimit(f)));\r\n    double dashFactor = (AttributeKeys.IS_STROKE_DASH_FACTOR.get(f)) ? strokeWidth : 1.0;\r\n    switch (AttributeKeys.STROKE_TYPE.get(f)) {\r\n        case BASIC :\r\n        default :\r\n            return new BasicStroke(((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, null, Math.max(0, ((float) ((AttributeKeys.STROKE_DASH_PHASE.get(f)) * dashFactor))));\r\n            // not reached\r\n        case DOUBLE :\r\n            return new DoubleStroke(((float) ((AttributeKeys.STROKE_INNER_WIDTH_FACTOR.get(f)) * strokeWidth)), ((float) (strokeWidth)), AttributeKeys.STROKE_CAP.get(f), AttributeKeys.STROKE_JOIN.get(f), miterLimit, null, Math.max(0, ((float) ((AttributeKeys.STROKE_DASH_PHASE.get(f).floatValue()) * dashFactor))));\r\n            // not reached\r\n    }\r\n}"},
 {"id":317, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1134, "methodname":"org.jhotdraw.draw.AttributeKeys.getFont(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Font getFont(Figure f) {\r\n    Font prototype = AttributeKeys.FONT_FACE.get(f);\r\n    if (prototype == null) {\r\n        return null;\r\n    }\r\n    if ((AttributeKeys.getFontStyle(f)) != (Font.PLAIN)) {\r\n        return prototype.deriveFont(AttributeKeys.getFontStyle(f), AttributeKeys.FONT_SIZE.get(f).floatValue());\r\n    } else {\r\n        return prototype.deriveFont(AttributeKeys.FONT_SIZE.get(f).floatValue());\r\n    }\r\n}"},
 {"id":318, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1135, "methodname":"org.jhotdraw.draw.AttributeKeys.getFontStyle(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static int getFontStyle(Figure f) {\r\n    int style = Font.PLAIN;\r\n    if (AttributeKeys.FONT_BOLD.get(f)) {\r\n        style |= Font.BOLD;\r\n    }\r\n    if (AttributeKeys.FONT_ITALIC.get(f)) {\r\n        style |= Font.ITALIC;\r\n    }\r\n    return style;\r\n}"},
 {"id":319, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1138, "methodname":"org.jhotdraw.draw.AttributeKeys.getPerpendicularFillGrowth(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * fill its shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularFillGrowth(Figure f) {\r\n    double grow;\r\n    double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n    AttributeKeys.StrokePlacement placement = AttributeKeys.STROKE_PLACEMENT.get(f);\r\n    switch (AttributeKeys.FILL_UNDER_STROKE.get(f)) {\r\n        case FULL :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = 0.0F;\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = strokeWidth;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = strokeWidth / 2.0;\r\n                    break;\r\n            }\r\n            break;\r\n        case NONE :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = -strokeWidth;\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = 0.0F;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = strokeWidth / (-2.0);\r\n                    break;\r\n            }\r\n            break;\r\n        case CENTER :\r\n        default :\r\n            switch (placement) {\r\n                case INSIDE :\r\n                    grow = strokeWidth / (-2.0);\r\n                    break;\r\n                case OUTSIDE :\r\n                    grow = strokeWidth / 2.0;\r\n                    break;\r\n                case CENTER :\r\n                default :\r\n                    grow = 0.0;\r\n                    break;\r\n            }\r\n            break;\r\n    }\r\n    return grow;\r\n}"},
 {"id":320, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1137, "methodname":"org.jhotdraw.draw.AttributeKeys.getPerpendicularDrawGrowth(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * draw (aka stroke) its shape as specified by the FILL_UNDER_STROKE and\r\n * STROKE_POSITION attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularDrawGrowth(Figure f) {\r\n    double grow;\r\n    double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(f)) {\r\n        case INSIDE :\r\n            grow = strokeWidth / (-2.0);\r\n            break;\r\n        case OUTSIDE :\r\n            grow = strokeWidth / 2.0;\r\n            break;\r\n        case CENTER :\r\n        default :\r\n            grow = 0.0F;\r\n            break;\r\n    }\r\n    return grow;\r\n}"},
 {"id":321, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":116, "classname":"org.jhotdraw.draw.AttributeKeys", "methodid":1139, "methodname":"org.jhotdraw.draw.AttributeKeys.getPerpendicularHitGrowth(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * make hit detections on a shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularHitGrowth(Figure f) {\r\n    double grow;\r\n    if ((AttributeKeys.STROKE_COLOR.get(f)) == null) {\r\n        grow = AttributeKeys.getPerpendicularFillGrowth(f);\r\n    } else {\r\n        double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n        grow = (AttributeKeys.getPerpendicularDrawGrowth(f)) + (strokeWidth / 2.0);\r\n    }\r\n    return grow;\r\n}"},
 {"id":322, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":117, "classname":"org.jhotdraw.draw.BezierControlPointHandle", "methodid":1149, "methodname":"org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,int)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierControlPointHandle(BezierFigure owner, int index, int coord) {\r\n    this(owner, index, coord, owner);\r\n}"},
 {"id":323, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":117, "classname":"org.jhotdraw.draw.BezierControlPointHandle", "methodid":1150, "methodname":"org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public BezierControlPointHandle(BezierFigure owner, int index, int coord, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.controlPointIndex = coord;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}"},
 {"id":324, "parametername":"Figure transformOwner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":117, "classname":"org.jhotdraw.draw.BezierControlPointHandle", "methodid":1150, "methodname":"org.jhotdraw.draw.BezierControlPointHandle.-init-(org.jhotdraw.draw.BezierFigure,int,int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public BezierControlPointHandle(BezierFigure owner, int index, int coord, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.controlPointIndex = coord;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}"},
 {"id":325, "parametername":"BezierPath.Node v", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":117, "classname":"org.jhotdraw.draw.BezierControlPointHandle", "methodid":1155, "methodname":"org.jhotdraw.draw.BezierControlPointHandle.fireAreaInvalidated(org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"private void fireAreaInvalidated(BezierPath.Node v) {\r\n    Rectangle2D.Double dr = new Rectangle2D.Double(v.x[0], v.y[0], 0, 0);\r\n    for (int i = 1; i < 3; i++) {\r\n        dr.add(v.x[i], v.y[i]);\r\n    }\r\n    Rectangle vr = view.drawingToView(dr);\r\n    vr.grow(getHandlesize(), getHandlesize());\r\n    fireAreaInvalidated(vr);\r\n}"},
 {"id":326, "parametername":"Handle h", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":117, "classname":"org.jhotdraw.draw.BezierControlPointHandle", "methodid":1162, "methodname":"org.jhotdraw.draw.BezierControlPointHandle.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    if (super.isCombinableWith(h)) {\r\n        BezierControlPointHandle that = ((BezierControlPointHandle) (h));\r\n        return (((that.index) == (this.index)) && ((that.controlPointIndex) == (this.controlPointIndex))) && ((that.getBezierFigure().getNodeCount()) == (this.getBezierFigure().getNodeCount()));\r\n    }\r\n    return false;\r\n}"},
 {"id":327, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1180, "methodname":"org.jhotdraw.draw.BezierFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopBezierConnector(this);\r\n}"},
 {"id":328, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1180, "methodname":"org.jhotdraw.draw.BezierFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopBezierConnector(this);\r\n}"},
 {"id":329, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1179, "methodname":"org.jhotdraw.draw.BezierFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopBezierConnector(this);\r\n}"},
 {"id":330, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1179, "methodname":"org.jhotdraw.draw.BezierFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopBezierConnector(this);\r\n}"},
 {"id":331, "parametername":"BezierPath newValue", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1209, "methodname":"org.jhotdraw.draw.BezierFigure.setBezierPath(org.jhotdraw.geom.BezierPath)", "isreturn":0, "sourcecode":"public void setBezierPath(BezierPath newValue) {\r\n    path = ((BezierPath) (newValue.clone()));\r\n    this.setClosed(newValue.isClosed());\r\n}"},
 {"id":332, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1208, "methodname":"org.jhotdraw.draw.BezierFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.CLOSED)) {\r\n        path.setClosed(((Boolean) (newValue)));\r\n    } else\r\n        if (key == (AttributeKeys.WINDING_RULE)) {\r\n            path.setWindingRule((newValue == (AttributeKeys.WindingRule.EVEN_ODD) ? GeneralPath.WIND_EVEN_ODD : GeneralPath.WIND_NON_ZERO));\r\n        }\r\n\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}"},
 {"id":333, "parametername":"BezierPath.Node p", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1170, "methodname":"org.jhotdraw.draw.BezierFigure.addNode(org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"/**\r\n * Adds a control point.\r\n */\r\npublic void addNode(BezierPath.Node p) {\r\n    addNode(getNodeCount(), p);\r\n}"},
 {"id":334, "parametername":"BezierPath.Node p", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1169, "methodname":"org.jhotdraw.draw.BezierFigure.addNode(int,org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"/**\r\n * Adds a node to the list of points.\r\n */\r\npublic void addNode(final int index, BezierPath.Node p) {\r\n    final BezierPath.Node newPoint = new BezierPath.Node(p);\r\n    path.add(index, p);\r\n    invalidate();\r\n}"},
 {"id":335, "parametername":"BezierPath.Node p", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1213, "methodname":"org.jhotdraw.draw.BezierFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"/**\r\n * Sets a control point.\r\n */\r\npublic void setNode(int index, BezierPath.Node p) {\r\n    path.set(index, p);\r\n    invalidate();\r\n}"},
 {"id":336, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1197, "methodname":"org.jhotdraw.draw.BezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                    return labels.getString(\"edit.bezierPath.splitSegment.text\");\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":337, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1221, "methodname":"org.jhotdraw.draw.BezierFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    writePoints(out);\r\n    writeAttributes(out);\r\n}"},
 {"id":338, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1222, "methodname":"org.jhotdraw.draw.BezierFigure.writePoints(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"protected void writePoints(DOMOutput out) throws IOException {\r\n    out.openElement(\"points\");\r\n    if (isClosed()) {\r\n        out.addAttribute(\"closed\", true);\r\n    }\r\n    for (int i = 0, n = getNodeCount(); i < n; i++) {\r\n        BezierPath.Node node = getNode(i);\r\n        out.openElement(\"p\");\r\n        out.addAttribute(\"mask\", node.mask, 0);\r\n        out.addAttribute(\"colinear\", true);\r\n        out.addAttribute(\"x\", node.x[0]);\r\n        out.addAttribute(\"y\", node.y[0]);\r\n        out.addAttribute(\"c1x\", node.x[1], node.x[0]);\r\n        out.addAttribute(\"c1y\", node.y[1], node.y[0]);\r\n        out.addAttribute(\"c2x\", node.x[2], node.x[0]);\r\n        out.addAttribute(\"c2y\", node.y[2], node.y[0]);\r\n        out.closeElement();\r\n    }\r\n    out.closeElement();\r\n}"},
 {"id":339, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1203, "methodname":"org.jhotdraw.draw.BezierFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    readPoints(in);\r\n    readAttributes(in);\r\n}"},
 {"id":340, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":118, "classname":"org.jhotdraw.draw.BezierFigure", "methodid":1204, "methodname":"org.jhotdraw.draw.BezierFigure.readPoints(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"protected void readPoints(DOMInput in) throws IOException {\r\n    path.clear();\r\n    in.openElement(\"points\");\r\n    setClosed(in.getAttribute(\"closed\", false));\r\n    for (int i = 0, n = in.getElementCount(\"p\"); i < n; i++) {\r\n        in.openElement(\"p\", i);\r\n        BezierPath.Node node = new BezierPath.Node(in.getAttribute(\"mask\", 0), in.getAttribute(\"x\", 0.0), in.getAttribute(\"y\", 0.0), in.getAttribute(\"c1x\", in.getAttribute(\"x\", 0.0)), in.getAttribute(\"c1y\", in.getAttribute(\"y\", 0.0)), in.getAttribute(\"c2x\", in.getAttribute(\"x\", 0.0)), in.getAttribute(\"c2y\", in.getAttribute(\"y\", 0.0)));\r\n        node.keepColinear = in.getAttribute(\"colinear\", true);\r\n        path.add(node);\r\n        path.invalidatePath();\r\n        in.closeElement();\r\n    }\r\n    in.closeElement();\r\n}"},
 {"id":341, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":119, "classname":"org.jhotdraw.draw.BezierLabelLocator", "methodid":1227, "methodname":"org.jhotdraw.draw.BezierLabelLocator.locate(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner) {\r\n    return getRelativePoint(((BezierFigure) (owner)));\r\n}"},
 {"id":342, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":119, "classname":"org.jhotdraw.draw.BezierLabelLocator", "methodid":1228, "methodname":"org.jhotdraw.draw.BezierLabelLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner, Figure label) {\r\n    Point2D.Double relativePoint = getRelativeLabelPoint(((BezierFigure) (owner)), label);\r\n    return relativePoint;\r\n}"},
 {"id":343, "parametername":"Figure label", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":119, "classname":"org.jhotdraw.draw.BezierLabelLocator", "methodid":1228, "methodname":"org.jhotdraw.draw.BezierLabelLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner, Figure label) {\r\n    Point2D.Double relativePoint = getRelativeLabelPoint(((BezierFigure) (owner)), label);\r\n    return relativePoint;\r\n}"},
 {"id":344, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":119, "classname":"org.jhotdraw.draw.BezierLabelLocator", "methodid":1226, "methodname":"org.jhotdraw.draw.BezierLabelLocator.getRelativePoint(org.jhotdraw.draw.BezierFigure)", "isreturn":0, "sourcecode":"/**\r\n * Returns a Point2D.Double on the polyline that is at the provided relative position.\r\n */\r\npublic Point2D.Double getRelativePoint(BezierFigure owner) {\r\n    Point2D.Double point = owner.getPointOnPath(((float) (relativePosition)), 3);\r\n    Point2D.Double nextPoint = owner.getPointOnPath(((relativePosition) < 0.5 ? ((float) (relativePosition)) + 0.1F : ((float) (relativePosition)) - 0.1F), 3);\r\n    double dir = Math.atan2(((nextPoint.y) - (point.y)), ((nextPoint.x) - (point.x)));\r\n    if ((relativePosition) >= 0.5) {\r\n        dir += Math.PI;\r\n    }\r\n    double alpha = dir + (angle);\r\n    Point2D.Double p = new Point2D.Double(((point.x) + ((distance) * (Math.cos(alpha)))), ((point.y) + ((distance) * (Math.sin(alpha)))));\r\n    if (Double.isNaN(p.x))\r\n        p = point;\r\n\r\n    return p;\r\n}"},
 {"id":345, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":119, "classname":"org.jhotdraw.draw.BezierLabelLocator", "methodid":1225, "methodname":"org.jhotdraw.draw.BezierLabelLocator.getRelativeLabelPoint(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns a Point2D.Double on the polyline that is at the provided relative position.\r\n * XXX - Implement this and move it to BezierPath\r\n */\r\npublic Point2D.Double getRelativeLabelPoint(BezierFigure owner, Figure label) {\r\n    // Get a point on the path an the next point on the path\r\n    Point2D.Double point = owner.getPointOnPath(((float) (relativePosition)), 3);\r\n    if (point == null) {\r\n        return new Point2D.Double(0, 0);\r\n    }\r\n    Point2D.Double nextPoint = owner.getPointOnPath(((relativePosition) < 0.5 ? ((float) (relativePosition)) + 0.1F : ((float) (relativePosition)) - 0.1F), 3);\r\n    double dir = Math.atan2(((nextPoint.y) - (point.y)), ((nextPoint.x) - (point.x)));\r\n    if ((relativePosition) >= 0.5) {\r\n        dir += Math.PI;\r\n    }\r\n    double alpha = dir + (angle);\r\n    Point2D.Double p = new Point2D.Double(((point.x) + ((distance) * (Math.cos(alpha)))), ((point.y) + ((distance) * (Math.sin(alpha)))));\r\n    if (Double.isNaN(p.x))\r\n        p = point;\r\n\r\n    Dimension2DDouble labelDim = label.getPreferredSize();\r\n    if ((((relativePosition) == 0.5) && ((p.x) >= ((point.x) - ((distance) / 2)))) && ((p.x) <= ((point.x) + ((distance) / 2)))) {\r\n        if ((p.y) >= (point.y)) {\r\n            // South East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), p.y);\r\n        } else {\r\n            // North East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), ((p.y) - (labelDim.height)));\r\n        }\r\n    } else {\r\n        if ((p.x) >= (point.x)) {\r\n            if ((p.y) >= (point.y)) {\r\n                // South East\r\n                return new Point2D.Double(p.x, p.y);\r\n            } else {\r\n                // North East\r\n                return new Point2D.Double(p.x, ((p.y) - (labelDim.height)));\r\n            }\r\n        } else {\r\n            if ((p.y) >= (point.y)) {\r\n                // South West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), p.y);\r\n            } else {\r\n                // North West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), ((p.y) - (labelDim.height)));\r\n            }\r\n        }\r\n    }\r\n    /* int percentage = (int) (relativePosition * 100);\n\n    int segment; // relative segment\n    Point2D.Double segPoint; // relative Point2D.Double on the segment\n    int nPoints = owner.getPointCount();\n    Point2D.Double[] Points = owner.getPoints();\n\n    if (nPoints < 2) return new Point2D.Double(0, 0);\n\n    switch (percentage) {\n    case 0 :\n    segment = 0;\n    segPoint = owner.getStartPoint();\n    break;\n    case 100 :\n    segment = owner.getPointCount() - 2;\n    segPoint = owner.getEndPoint();\n    break;\n    default :\n    double totalLength = 0d;\n    double[] segLength = new double[nPoints - 1];\n    for (int i=1; i < nPoints; i++) {\n    segLength[i-1] = Geom.length(Points[i-1].x, Points[i-1].y, Points[i].x, Points[i].y);\n    totalLength += segLength[i-1];\n    }\n    double relativeProgress = percentage * totalLength / 101d;\n    segment = 0;\n    double segMin = 0d;\n    for (segment=0; segment < segLength.length - 1; segment++) {\n    if (segMin + segLength[segment] > relativeProgress) break;\n    segMin += segLength[segment];\n    }\n\n    // Compute the relative Point2D.Double on the line\n    segPoint = new Point2D.Double();\n    relativeProgress -= segMin;\n    segPoint.x = (int) ((Points[segment].x * (segLength[segment] - relativeProgress) + Points[segment + 1].x * relativeProgress) / segLength[segment] +.5);\n    segPoint.y = (int) ((Points[segment].y * (segLength[segment] - relativeProgress) + Points[segment + 1].y * relativeProgress) / segLength[segment] +.5);\n\n    break;\n    }\n\n    Dimension2DDouble labelDim = label.getPreferredSize();\n\n    Line2D.Double line = new Line2D.Double(Points[segment].x, Points[segment].y, Points[segment + 1].x, Points[segment + 1].y);\n    double dir = Math.atan2(Points[segment + 1].y - Points[segment].y, Points[segment + 1].x - Points[segment].x);\n    double alpha = dir + angle;\n\n    Point2D.Double p = new Point2D.Double(\n    (int) (segPoint.x + distance * Math.cos(alpha)),\n    (int) (segPoint.y + distance * Math.sin(alpha))\n    );\n\n    if (p.x >= segPoint.x) {\n    if (p.y >= segPoint.y) {\n    // South East\n    return new Point2D.Double(p.x, p.y);\n    } else {\n    // North East\n    return new Point2D.Double(p.x, p.y - labelDim.height);\n    }\n    } else {\n    if (p.y >= segPoint.y) {\n    // South West\n    return new Point2D.Double(p.x - labelDim.width,  p.y);\n    } else {\n    // North West\n    return new Point2D.Double(p.x - labelDim.width, p.y - labelDim.height);\n    }\n    }\n     */\r\n}"},
 {"id":346, "parametername":"Figure label", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":119, "classname":"org.jhotdraw.draw.BezierLabelLocator", "methodid":1225, "methodname":"org.jhotdraw.draw.BezierLabelLocator.getRelativeLabelPoint(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns a Point2D.Double on the polyline that is at the provided relative position.\r\n * XXX - Implement this and move it to BezierPath\r\n */\r\npublic Point2D.Double getRelativeLabelPoint(BezierFigure owner, Figure label) {\r\n    // Get a point on the path an the next point on the path\r\n    Point2D.Double point = owner.getPointOnPath(((float) (relativePosition)), 3);\r\n    if (point == null) {\r\n        return new Point2D.Double(0, 0);\r\n    }\r\n    Point2D.Double nextPoint = owner.getPointOnPath(((relativePosition) < 0.5 ? ((float) (relativePosition)) + 0.1F : ((float) (relativePosition)) - 0.1F), 3);\r\n    double dir = Math.atan2(((nextPoint.y) - (point.y)), ((nextPoint.x) - (point.x)));\r\n    if ((relativePosition) >= 0.5) {\r\n        dir += Math.PI;\r\n    }\r\n    double alpha = dir + (angle);\r\n    Point2D.Double p = new Point2D.Double(((point.x) + ((distance) * (Math.cos(alpha)))), ((point.y) + ((distance) * (Math.sin(alpha)))));\r\n    if (Double.isNaN(p.x))\r\n        p = point;\r\n\r\n    Dimension2DDouble labelDim = label.getPreferredSize();\r\n    if ((((relativePosition) == 0.5) && ((p.x) >= ((point.x) - ((distance) / 2)))) && ((p.x) <= ((point.x) + ((distance) / 2)))) {\r\n        if ((p.y) >= (point.y)) {\r\n            // South East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), p.y);\r\n        } else {\r\n            // North East\r\n            return new Point2D.Double(((p.x) - ((labelDim.width) / 2)), ((p.y) - (labelDim.height)));\r\n        }\r\n    } else {\r\n        if ((p.x) >= (point.x)) {\r\n            if ((p.y) >= (point.y)) {\r\n                // South East\r\n                return new Point2D.Double(p.x, p.y);\r\n            } else {\r\n                // North East\r\n                return new Point2D.Double(p.x, ((p.y) - (labelDim.height)));\r\n            }\r\n        } else {\r\n            if ((p.y) >= (point.y)) {\r\n                // South West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), p.y);\r\n            } else {\r\n                // North West\r\n                return new Point2D.Double(((p.x) - (labelDim.width)), ((p.y) - (labelDim.height)));\r\n            }\r\n        }\r\n    }\r\n    /* int percentage = (int) (relativePosition * 100);\n\n    int segment; // relative segment\n    Point2D.Double segPoint; // relative Point2D.Double on the segment\n    int nPoints = owner.getPointCount();\n    Point2D.Double[] Points = owner.getPoints();\n\n    if (nPoints < 2) return new Point2D.Double(0, 0);\n\n    switch (percentage) {\n    case 0 :\n    segment = 0;\n    segPoint = owner.getStartPoint();\n    break;\n    case 100 :\n    segment = owner.getPointCount() - 2;\n    segPoint = owner.getEndPoint();\n    break;\n    default :\n    double totalLength = 0d;\n    double[] segLength = new double[nPoints - 1];\n    for (int i=1; i < nPoints; i++) {\n    segLength[i-1] = Geom.length(Points[i-1].x, Points[i-1].y, Points[i].x, Points[i].y);\n    totalLength += segLength[i-1];\n    }\n    double relativeProgress = percentage * totalLength / 101d;\n    segment = 0;\n    double segMin = 0d;\n    for (segment=0; segment < segLength.length - 1; segment++) {\n    if (segMin + segLength[segment] > relativeProgress) break;\n    segMin += segLength[segment];\n    }\n\n    // Compute the relative Point2D.Double on the line\n    segPoint = new Point2D.Double();\n    relativeProgress -= segMin;\n    segPoint.x = (int) ((Points[segment].x * (segLength[segment] - relativeProgress) + Points[segment + 1].x * relativeProgress) / segLength[segment] +.5);\n    segPoint.y = (int) ((Points[segment].y * (segLength[segment] - relativeProgress) + Points[segment + 1].y * relativeProgress) / segLength[segment] +.5);\n\n    break;\n    }\n\n    Dimension2DDouble labelDim = label.getPreferredSize();\n\n    Line2D.Double line = new Line2D.Double(Points[segment].x, Points[segment].y, Points[segment + 1].x, Points[segment + 1].y);\n    double dir = Math.atan2(Points[segment + 1].y - Points[segment].y, Points[segment + 1].x - Points[segment].x);\n    double alpha = dir + angle;\n\n    Point2D.Double p = new Point2D.Double(\n    (int) (segPoint.x + distance * Math.cos(alpha)),\n    (int) (segPoint.y + distance * Math.sin(alpha))\n    );\n\n    if (p.x >= segPoint.x) {\n    if (p.y >= segPoint.y) {\n    // South East\n    return new Point2D.Double(p.x, p.y);\n    } else {\n    // North East\n    return new Point2D.Double(p.x, p.y - labelDim.height);\n    }\n    } else {\n    if (p.y >= segPoint.y) {\n    // South West\n    return new Point2D.Double(p.x - labelDim.width,  p.y);\n    } else {\n    // North West\n    return new Point2D.Double(p.x - labelDim.width, p.y - labelDim.height);\n    }\n    }\n     */\r\n}"},
 {"id":347, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":119, "classname":"org.jhotdraw.draw.BezierLabelLocator", "methodid":1229, "methodname":"org.jhotdraw.draw.BezierLabelLocator.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) {\r\n    relativePosition = in.getAttribute(\"relativePosition\", 0.0);\r\n    angle = in.getAttribute(\"angle\", 0.0);\r\n    distance = in.getAttribute(\"distance\", 0);\r\n}"},
 {"id":348, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":119, "classname":"org.jhotdraw.draw.BezierLabelLocator", "methodid":1230, "methodname":"org.jhotdraw.draw.BezierLabelLocator.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) {\r\n    out.addAttribute(\"relativePosition\", relativePosition);\r\n    out.addAttribute(\"angle\", angle);\r\n    out.addAttribute(\"distance\", distance);\r\n}"},
 {"id":349, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":120, "classname":"org.jhotdraw.draw.BezierNodeEdit", "methodid":1231, "methodname":"org.jhotdraw.draw.BezierNodeEdit.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeEdit(BezierFigure owner, int index, BezierPath.Node oldValue, BezierPath.Node newValue) {\r\n    this.owner = owner;\r\n    this.index = index;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}"},
 {"id":350, "parametername":"BezierPath.Node oldValue", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":120, "classname":"org.jhotdraw.draw.BezierNodeEdit", "methodid":1231, "methodname":"org.jhotdraw.draw.BezierNodeEdit.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeEdit(BezierFigure owner, int index, BezierPath.Node oldValue, BezierPath.Node newValue) {\r\n    this.owner = owner;\r\n    this.index = index;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}"},
 {"id":351, "parametername":"BezierPath.Node newValue", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":120, "classname":"org.jhotdraw.draw.BezierNodeEdit", "methodid":1231, "methodname":"org.jhotdraw.draw.BezierNodeEdit.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.geom.BezierPath$Node,org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeEdit(BezierFigure owner, int index, BezierPath.Node oldValue, BezierPath.Node newValue) {\r\n    this.owner = owner;\r\n    this.index = index;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}"},
 {"id":352, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":121, "classname":"org.jhotdraw.draw.BezierNodeHandle", "methodid":1236, "methodname":"org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierNodeHandle(BezierFigure owner, int index) {\r\n    this(owner, index, owner);\r\n}"},
 {"id":353, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":121, "classname":"org.jhotdraw.draw.BezierNodeHandle", "methodid":1237, "methodname":"org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public BezierNodeHandle(BezierFigure owner, int index, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}"},
 {"id":354, "parametername":"Figure transformOwner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":121, "classname":"org.jhotdraw.draw.BezierNodeHandle", "methodid":1237, "methodname":"org.jhotdraw.draw.BezierNodeHandle.-init-(org.jhotdraw.draw.BezierFigure,int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public BezierNodeHandle(BezierFigure owner, int index, Figure transformOwner) {\r\n    super(owner);\r\n    this.index = index;\r\n    this.transformOwner = transformOwner;\r\n    transformOwner.addFigureListener(this);\r\n}"},
 {"id":355, "parametername":"BezierPath.Node v", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":121, "classname":"org.jhotdraw.draw.BezierNodeHandle", "methodid":1244, "methodname":"org.jhotdraw.draw.BezierNodeHandle.fireAreaInvalidated(org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"private void fireAreaInvalidated(BezierPath.Node v) {\r\n    Rectangle2D.Double dr = new Rectangle2D.Double(v.x[0], v.y[0], 0, 0);\r\n    for (int i = 1; i < 3; i++) {\r\n        dr.add(v.x[i], v.y[i]);\r\n    }\r\n    Rectangle vr = view.drawingToView(dr);\r\n    vr.grow(getHandlesize(), getHandlesize());\r\n    fireAreaInvalidated(vr);\r\n}"},
 {"id":356, "parametername":"Handle h", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":121, "classname":"org.jhotdraw.draw.BezierNodeHandle", "methodid":1250, "methodname":"org.jhotdraw.draw.BezierNodeHandle.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"@Override\r\npublic boolean isCombinableWith(Handle h) {\r\n    /* if (super.isCombinableWith(h)) {\n    BezierNodeHandle that = (BezierNodeHandle) h;\n    return that.index == this.index &&\n    that.getOwner().getNodeCount() ==\n    this.getOwner().getNodeCount();\n    }\n     */\r\n    return false;\r\n}"},
 {"id":357, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":122, "classname":"org.jhotdraw.draw.BezierOutlineHandle", "methodid":1256, "methodname":"org.jhotdraw.draw.BezierOutlineHandle.-init-(org.jhotdraw.draw.BezierFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierOutlineHandle(BezierFigure owner) {\r\n    this(owner, false);\r\n}"},
 {"id":358, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":122, "classname":"org.jhotdraw.draw.BezierOutlineHandle", "methodid":1257, "methodname":"org.jhotdraw.draw.BezierOutlineHandle.-init-(org.jhotdraw.draw.BezierFigure,boolean)", "isreturn":0, "sourcecode":"public BezierOutlineHandle(BezierFigure owner, boolean isHoverHandle) {\r\n    super(owner);\r\n    this.isHoverHandle = isHoverHandle;\r\n}"},
 {"id":359, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":123, "classname":"org.jhotdraw.draw.BezierPointLocator", "methodid":1267, "methodname":"org.jhotdraw.draw.BezierPointLocator.locate(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner) {\r\n    BezierFigure plf = ((BezierFigure) (owner));\r\n    if ((index) < (plf.getNodeCount())) {\r\n        return plf.getPoint(index, coord);\r\n    }\r\n    return new Point2D.Double(0, 0);\r\n}"},
 {"id":360, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":123, "classname":"org.jhotdraw.draw.BezierPointLocator", "methodid":1269, "methodname":"org.jhotdraw.draw.BezierPointLocator.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) {\r\n    out.addAttribute(\"index\", index, 0);\r\n    out.addAttribute(\"coord\", coord, 0);\r\n}"},
 {"id":361, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":123, "classname":"org.jhotdraw.draw.BezierPointLocator", "methodid":1268, "methodname":"org.jhotdraw.draw.BezierPointLocator.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) {\r\n    index = in.getAttribute(\"index\", 0);\r\n    coord = in.getAttribute(\"coord\", 0);\r\n}"},
 {"id":362, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":124, "classname":"org.jhotdraw.draw.BezierScaleHandle", "methodid":1270, "methodname":"org.jhotdraw.draw.BezierScaleHandle.-init-(org.jhotdraw.draw.BezierFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierScaleHandle(BezierFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":363, "parametername":"Handle h", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":124, "classname":"org.jhotdraw.draw.BezierScaleHandle", "methodid":1276, "methodname":"org.jhotdraw.draw.BezierScaleHandle.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"public boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}"},
 {"id":364, "parametername":"BezierFigure prototype", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1280, "methodname":"org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierTool(BezierFigure prototype) {\r\n    this(prototype, null);\r\n}"},
 {"id":365, "parametername":"BezierFigure prototype", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1281, "methodname":"org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BezierTool(BezierFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}"},
 {"id":366, "parametername":"BezierFigure prototype", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1282, "methodname":"org.jhotdraw.draw.BezierTool.-init-(org.jhotdraw.draw.BezierFigure,java.util.Map,java.lang.String)", "isreturn":0, "sourcecode":"public BezierTool(BezierFigure prototype, Map<AttributeKey, Object> attributes, String name) {\r\n    this.prototype = prototype;\r\n    this.attributes = attributes;\r\n    if (name == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        name = labels.getString(\"edit.createFigure.text\");\r\n    }\r\n    this.presentationName = name;\r\n}"},
 {"id":367, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1284, "methodname":"org.jhotdraw.draw.BezierTool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n}"},
 {"id":368, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1288, "methodname":"org.jhotdraw.draw.BezierTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    getView().setCursor(Cursor.getDefaultCursor());\r\n    if ((createdFigure) != null) {\r\n        if (((anchor) != null) && ((mouseLocation) != null)) {\r\n            Rectangle r = new Rectangle(anchor);\r\n            r.add(mouseLocation);\r\n            if (((createdFigure.getNodeCount()) > 0) && (createdFigure.isClosed())) {\r\n                r.add(getView().drawingToView(createdFigure.getStartPoint()));\r\n            }\r\n            fireAreaInvalidated(r);\r\n        }\r\n        finishCreation(createdFigure, creationView);\r\n        createdFigure = null;\r\n    }\r\n}"},
 {"id":369, "parametername":"Figure createdFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1291, "methodname":"org.jhotdraw.draw.BezierTool.fireUndoEvent(org.jhotdraw.draw.Figure,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"protected void fireUndoEvent(Figure createdFigure, DrawingView creationView) {\r\n    final Figure addedFigure = createdFigure;\r\n    final Drawing addedDrawing = creationView.getDrawing();\r\n    final DrawingView addedView = creationView;\r\n    getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        public String getPresentationName() {\r\n            return presentationName;\r\n        }\r\n\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            addedDrawing.remove(addedFigure);\r\n        }\r\n\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            addedView.clearSelection();\r\n            addedDrawing.add(addedFigure);\r\n            addedView.addToSelection(addedFigure);\r\n        }\r\n    });\r\n}"},
 {"id":370, "parametername":"DrawingView creationView", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1291, "methodname":"org.jhotdraw.draw.BezierTool.fireUndoEvent(org.jhotdraw.draw.Figure,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"protected void fireUndoEvent(Figure createdFigure, DrawingView creationView) {\r\n    final Figure addedFigure = createdFigure;\r\n    final Drawing addedDrawing = creationView.getDrawing();\r\n    final DrawingView addedView = creationView;\r\n    getDrawing().fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n        public String getPresentationName() {\r\n            return presentationName;\r\n        }\r\n\r\n        public void undo() throws CannotUndoException {\r\n            super.undo();\r\n            addedDrawing.remove(addedFigure);\r\n        }\r\n\r\n        public void redo() throws CannotRedoException {\r\n            super.redo();\r\n            addedView.clearSelection();\r\n            addedDrawing.add(addedFigure);\r\n            addedView.addToSelection(addedFigure);\r\n        }\r\n    });\r\n}"},
 {"id":371, "parametername":"BezierFigure createdFigure", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1290, "methodname":"org.jhotdraw.draw.BezierTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"protected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    fireUndoEvent(createdFigure, creationView);\r\n    creationView.addToSelection(createdFigure);\r\n    if (isToolDoneAfterCreation) {\r\n        fireToolDone();\r\n    }\r\n}"},
 {"id":372, "parametername":"DrawingView creationView", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1290, "methodname":"org.jhotdraw.draw.BezierTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"protected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    fireUndoEvent(createdFigure, creationView);\r\n    creationView.addToSelection(createdFigure);\r\n    if (isToolDoneAfterCreation) {\r\n        fireToolDone();\r\n    }\r\n}"},
 {"id":373, "parametername":"BezierPath path", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1286, "methodname":"org.jhotdraw.draw.BezierTool.calculateFittedCurve(org.jhotdraw.geom.BezierPath)", "isreturn":0, "sourcecode":"protected BezierPath calculateFittedCurve(BezierPath path) {\r\n    return Bezier.fitBezierPath(path, (1.5 / (getView().getScaleFactor())));\r\n}"},
 {"id":374, "parametername":"org.jhotdraw.geom.BezierPath", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":125, "classname":"org.jhotdraw.draw.BezierTool", "methodid":1286, "methodname":"org.jhotdraw.draw.BezierTool.calculateFittedCurve(org.jhotdraw.geom.BezierPath)", "isreturn":1, "sourcecode":"protected BezierPath calculateFittedCurve(BezierPath path) {\r\n    return Bezier.fitBezierPath(path, (1.5 / (getView().getScaleFactor())));\r\n}"},
 {"id":375, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1302, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BidirectionalConnectionTool(ConnectionFigure prototype) {\r\n    this.prototype = prototype;\r\n}"},
 {"id":376, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1303, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map)", "isreturn":0, "sourcecode":"public BidirectionalConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this.prototype = prototype;\r\n    this.attributes = attributes;\r\n}"},
 {"id":377, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1304, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().clearSelection();\r\n}"},
 {"id":378, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1308, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n}"},
 {"id":379, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1319, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findSource(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findSource(Point2D.Double p, Drawing drawing) {\r\n    return findConnectableFigure(p, drawing);\r\n}"},
 {"id":380, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1319, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findSource(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":1, "sourcecode":"/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findSource(Point2D.Double p, Drawing drawing) {\r\n    return findConnectableFigure(p, drawing);\r\n}"},
 {"id":381, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1320, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    Connector targetConnector = (target == null) ? null : target.findConnector(p, prototype);\r\n    Connector startConnector = getStartConnector();\r\n    if ((((targetConnector != null) && ((getConnection()) != null)) && (target.canConnect())) && ((getConnection().canConnect(startConnector, targetConnector)) || (getConnection().canConnect(targetConnector, startConnector)))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}"},
 {"id":382, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1320, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findTarget(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":1, "sourcecode":"/**\r\n * Finds a connectable figure target.\r\n */\r\nprotected Figure findTarget(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    Connector targetConnector = (target == null) ? null : target.findConnector(p, prototype);\r\n    Connector startConnector = getStartConnector();\r\n    if ((((targetConnector != null) && ((getConnection()) != null)) && (target.canConnect())) && ((getConnection().canConnect(startConnector, targetConnector)) || (getConnection().canConnect(targetConnector, startConnector)))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}"},
 {"id":383, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1316, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnection(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Finds an existing connection figure.\r\n */\r\nprotected ConnectionFigure findConnection(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        Figure fInside = f.findFigureInside(p);\r\n        if ((fInside != null) && (fInside instanceof ConnectionFigure)) {\r\n            return ((ConnectionFigure) (fInside));\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":384, "parametername":"org.jhotdraw.draw.ConnectionFigure", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1316, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnection(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":1, "sourcecode":"/**\r\n * Finds an existing connection figure.\r\n */\r\nprotected ConnectionFigure findConnection(Point2D.Double p, Drawing drawing) {\r\n    for (Figure f : drawing.getFiguresFrontToBack()) {\r\n        Figure fInside = f.findFigureInside(p);\r\n        if ((fInside != null) && (fInside instanceof ConnectionFigure)) {\r\n            return ((ConnectionFigure) (fInside));\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":385, "parametername":"ConnectionFigure newConnection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1331, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.setConnection(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"private void setConnection(ConnectionFigure newConnection) {\r\n    connection = newConnection;\r\n}"},
 {"id":386, "parametername":"Figure target", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1318, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"private Connector findConnector(Point2D.Double p, Figure target, ConnectionFigure f) {\r\n    return target.findConnector(p, f);\r\n}"},
 {"id":387, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1318, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"private Connector findConnector(Point2D.Double p, Figure target, ConnectionFigure f) {\r\n    return target.findConnector(p, f);\r\n}"},
 {"id":388, "parametername":"ConnectionFigure f", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1318, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"private Connector findConnector(Point2D.Double p, Figure target, ConnectionFigure f) {\r\n    return target.findConnector(p, f);\r\n}"},
 {"id":389, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1317, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnectionStart(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Finds a connection start figure.\r\n */\r\nprotected Figure findConnectionStart(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    if ((target != null) && (target.canConnect())) {\r\n        return target;\r\n    }\r\n    return null;\r\n}"},
 {"id":390, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1317, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnectionStart(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":1, "sourcecode":"/**\r\n * Finds a connection start figure.\r\n */\r\nprotected Figure findConnectionStart(Point2D.Double p, Drawing drawing) {\r\n    Figure target = findConnectableFigure(p, drawing);\r\n    if ((target != null) && (target.canConnect())) {\r\n        return target;\r\n    }\r\n    return null;\r\n}"},
 {"id":391, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1315, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    return drawing.findFigureExcept(p, createdFigure);\r\n}"},
 {"id":392, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1315, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":1, "sourcecode":"private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    return drawing.findFigureExcept(p, createdFigure);\r\n}"},
 {"id":393, "parametername":"Connector newStartConnector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1334, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.setStartConnector(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"private void setStartConnector(Connector newStartConnector) {\r\n    startConnector = newStartConnector;\r\n}"},
 {"id":394, "parametername":"Connector newEndConnector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1333, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.setEndConnector(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"private void setEndConnector(Connector newEndConnector) {\r\n    endConnector = newEndConnector;\r\n}"},
 {"id":395, "parametername":"Connector newTargetConnector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1335, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.setTargetConnector(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"private void setTargetConnector(Connector newTargetConnector) {\r\n    targetConnector = newTargetConnector;\r\n}"},
 {"id":396, "parametername":"Figure newTarget", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1336, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.setTargetFigure(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"private void setTargetFigure(Figure newTarget) {\r\n    target = newTarget;\r\n}"},
 {"id":397, "parametername":"Figure newCreatedFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1332, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.setCreatedFigure(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"private void setCreatedFigure(Figure newCreatedFigure) {\r\n    createdFigure = newCreatedFigure;\r\n}"},
 {"id":398, "parametername":"FigureEvent evt", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1305, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void areaInvalidated(FigureEvent evt) {\r\n    fireAreaInvalidated(evt.getInvalidatedArea());\r\n}"},
 {"id":399, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1310, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.figureAdded(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureAdded(FigureEvent e) {\r\n}"},
 {"id":400, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1311, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureChanged(FigureEvent e) {\r\n}"},
 {"id":401, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1313, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.figureRemoved(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureRemoved(FigureEvent e) {\r\n}"},
 {"id":402, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1314, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureRequestRemove(FigureEvent e) {\r\n}"},
 {"id":403, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1306, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void attributeChanged(FigureEvent e) {\r\n}"},
 {"id":404, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":126, "classname":"org.jhotdraw.draw.BidirectionalConnectionTool", "methodid":1312, "methodname":"org.jhotdraw.draw.BidirectionalConnectionTool.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureHandlesChanged(FigureEvent e) {\r\n}"},
 {"id":405, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1340, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner) {\r\n    this(owner, false, false);\r\n}"},
 {"id":406, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1341, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,boolean,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, boolean isTransformHandle, boolean isHoverHandle) {\r\n    super(owner);\r\n    if (isTransformHandle) {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;\r\n    } else {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;\r\n    }\r\n}"},
 {"id":407, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":408, "parametername":"// \r\nAttributeKey<Stroke> stroke1Enabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":409, "parametername":"AttributeKey<Color> strokeColor1Enabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":410, "parametername":"// \r\nAttributeKey<Stroke> stroke2Enabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":411, "parametername":"AttributeKey<Color> strokeColor2Enabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":412, "parametername":"// \r\nAttributeKey<Stroke> stroke1Disabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":413, "parametername":"AttributeKey<Color> strokeColor1Disabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":414, "parametername":"// \r\nAttributeKey<Stroke> stroke2Disabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":415, "parametername":"AttributeKey<Color> strokeColor2Disabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":128, "classname":"org.jhotdraw.draw.BoundsOutlineHandle", "methodid":1342, "methodname":"org.jhotdraw.draw.BoundsOutlineHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic BoundsOutlineHandle(Figure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":416, "parametername":"BezierFigure owner", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":129, "classname":"org.jhotdraw.draw.ChopBezierConnector", "methodid":1350, "methodname":"org.jhotdraw.draw.ChopBezierConnector.-init-(org.jhotdraw.draw.BezierFigure)", "isreturn":0, "sourcecode":"public ChopBezierConnector(BezierFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":417, "parametername":"Figure target", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":129, "classname":"org.jhotdraw.draw.ChopBezierConnector", "methodid":1351, "methodname":"org.jhotdraw.draw.ChopBezierConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    BezierFigure bf = ((BezierFigure) (getConnectorTarget(target)));\r\n    return bf.chop(from);\r\n}"},
 {"id":418, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":130, "classname":"org.jhotdraw.draw.ChopDiamondConnector", "methodid":1353, "methodname":"org.jhotdraw.draw.ChopDiamondConnector.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public ChopDiamondConnector(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":419, "parametername":"Figure target", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":130, "classname":"org.jhotdraw.draw.ChopDiamondConnector", "methodid":1354, "methodname":"org.jhotdraw.draw.ChopDiamondConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Return an appropriate connection point on the edge of a diamond figure\r\n */\r\nprotected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if (DiamondFigure.IS_QUADRATIC.get(target)) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    double growx;\r\n    double growy;\r\n    // FIXME - This code is wrong. Copy correct code from DiamondFigure.\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n        case INSIDE :\r\n            {\r\n                growx = growy = 0.0F;\r\n                break;\r\n            }\r\n        case OUTSIDE :\r\n            {\r\n                double lineLength = Math.sqrt((((r.width) * (r.width)) + ((r.height) * (r.height))));\r\n                double scale = ((AttributeKeys.getStrokeTotalWidth(target)) * 2.0) / lineLength;\r\n                growx = scale * (r.height);\r\n                growy = scale * (r.width);\r\n                // growy = getStrokeTotalWidth() * SQRT2;\r\n                break;\r\n            }\r\n        case CENTER :\r\n        default :\r\n            double lineLength = Math.sqrt((((r.width) * (r.width)) + ((r.height) * (r.height))));\r\n            double scale = (AttributeKeys.getStrokeTotalWidth(target)) / lineLength;\r\n            growx = scale * (r.height);\r\n            growy = scale * (r.width);\r\n            // growx = growy = getStrokeTotalWidth() / 2d * SQRT2;\r\n            break;\r\n    }\r\n    Geom.grow(r, growx, growy);\r\n    // Center point\r\n    Point2D.Double c1 = new Point2D.Double(((r.x) + ((r.width) / 2)), ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double p2 = new Point2D.Double(((r.x) + ((r.width) / 2)), ((r.y) + (r.height)));\r\n    Point2D.Double p4 = new Point2D.Double(((r.x) + ((r.width) / 2)), r.y);\r\n    // If overlapping, just return the opposite corners\r\n    if (r.contains(from)) {\r\n        if (((from.y) > (r.y)) && ((from.y) < ((r.y) + ((r.height) / 2)))) {\r\n            return p2;\r\n        } else {\r\n            return p4;\r\n        }\r\n    }\r\n    // Calculate angle to determine quadrant\r\n    double ang = Geom.pointToAngle(r, from);\r\n    // Dermine line points\r\n    Point2D.Double p1 = new Point2D.Double(((r.x) + (r.width)), ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double p3 = new Point2D.Double(r.x, ((r.y) + ((r.height) / 2)));\r\n    Point2D.Double rp = null;// This will be returned\r\n\r\n    // Get the intersection with edges\r\n    if ((ang > 0) && (ang < 1.57)) {\r\n        rp = Geom.intersect(p1.x, p1.y, p2.x, p2.y, c1.x, c1.y, from.x, from.y);\r\n    } else\r\n        if ((ang > 1.575) && (ang < 3.14)) {\r\n            rp = Geom.intersect(p2.x, p2.y, p3.x, p3.y, c1.x, c1.y, from.x, from.y);\r\n        } else\r\n            if ((ang > (-3.14)) && (ang < (-1.575))) {\r\n                rp = Geom.intersect(p3.x, p3.y, p4.x, p4.y, c1.x, c1.y, from.x, from.y);\r\n            } else\r\n                if ((ang > (-1.57)) && (ang < 0)) {\r\n                    rp = Geom.intersect(p4.x, p4.y, p1.x, p1.y, c1.x, c1.y, from.x, from.y);\r\n                }\r\n\r\n\r\n\r\n    // No proper edge found, we should send one of four corners\r\n    if (rp == null) {\r\n        rp = Geom.angleToPoint(r, ang);\r\n    }\r\n    return rp;\r\n}"},
 {"id":420, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":131, "classname":"org.jhotdraw.draw.ChopEllipseConnector", "methodid":1356, "methodname":"org.jhotdraw.draw.ChopEllipseConnector.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public ChopEllipseConnector(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":421, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":131, "classname":"org.jhotdraw.draw.ChopEllipseConnector", "methodid":1358, "methodname":"org.jhotdraw.draw.ChopEllipseConnector.getStrokeColor(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"private Color getStrokeColor(Figure f) {\r\n    return AttributeKeys.STROKE_COLOR.get(f);\r\n}"},
 {"id":422, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":131, "classname":"org.jhotdraw.draw.ChopEllipseConnector", "methodid":1359, "methodname":"org.jhotdraw.draw.ChopEllipseConnector.getStrokeWidth(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"private float getStrokeWidth(Figure f) {\r\n    Double w = AttributeKeys.STROKE_WIDTH.get(f);\r\n    return w == null ? 1.0F : w.floatValue();\r\n}"},
 {"id":423, "parametername":"Figure target", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":131, "classname":"org.jhotdraw.draw.ChopEllipseConnector", "methodid":1357, "methodname":"org.jhotdraw.draw.ChopEllipseConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if ((getStrokeColor(target)) != null) {\r\n        double grow;\r\n        switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n            case CENTER :\r\n            default :\r\n                grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n                break;\r\n            case OUTSIDE :\r\n                grow = AttributeKeys.getStrokeTotalWidth(target);\r\n                break;\r\n            case INSIDE :\r\n                grow = 0.0F;\r\n                break;\r\n        }\r\n        Geom.grow(r, grow, grow);\r\n    }\r\n    double angle = Geom.pointToAngle(r, from);\r\n    return Geom.ovalAngleToPoint(r, angle);\r\n}"},
 {"id":424, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":132, "classname":"org.jhotdraw.draw.ChopRectangleConnector", "methodid":1361, "methodname":"org.jhotdraw.draw.ChopRectangleConnector.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public ChopRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":425, "parametername":"ConnectionFigure connection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":132, "classname":"org.jhotdraw.draw.ChopRectangleConnector", "methodid":1364, "methodname":"org.jhotdraw.draw.ChopRectangleConnector.findStart(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"@Override\r\npublic Point2D.Double findStart(ConnectionFigure connection) {\r\n    Figure startFigure = connection.getStartConnector().getOwner();\r\n    Point2D.Double from;\r\n    if (((connection.getNodeCount()) <= 2) || ((connection.getLiner()) != null)) {\r\n        if ((connection.getEndConnector()) == null) {\r\n            from = connection.getEndPoint();\r\n        } else {\r\n            Rectangle2D.Double r1 = getConnectorTarget(connection.getEndConnector().getOwner()).getBounds();\r\n            from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), ((r1.y) + ((r1.height) / 2)));\r\n        }\r\n    } else {\r\n        from = connection.getPoint(1);\r\n    }\r\n    return chop(startFigure, from);\r\n}"},
 {"id":426, "parametername":"ConnectionFigure connection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":132, "classname":"org.jhotdraw.draw.ChopRectangleConnector", "methodid":1363, "methodname":"org.jhotdraw.draw.ChopRectangleConnector.findEnd(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"@Override\r\npublic Point2D.Double findEnd(ConnectionFigure connection) {\r\n    Figure endFigure = connection.getEndConnector().getOwner();\r\n    Point2D.Double from;\r\n    if (((((connection.getNodeCount()) <= 3) && ((connection.getStartFigure()) == (connection.getEndFigure()))) || ((connection.getNodeCount()) <= 2)) || ((connection.getLiner()) != null)) {\r\n        if ((connection.getStartConnector()) == null) {\r\n            from = connection.getStartPoint();\r\n        } else\r\n            if ((connection.getStartFigure()) == (connection.getEndFigure())) {\r\n                Rectangle2D.Double r1 = getConnectorTarget(connection.getStartConnector().getOwner()).getBounds();\r\n                from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), r1.y);\r\n            } else {\r\n                Rectangle2D.Double r1 = getConnectorTarget(connection.getStartConnector().getOwner()).getBounds();\r\n                from = new Point2D.Double(((r1.x) + ((r1.width) / 2)), ((r1.y) + ((r1.height) / 2)));\r\n            }\r\n\r\n    } else {\r\n        from = connection.getPoint(((connection.getNodeCount()) - 2));\r\n    }\r\n    return chop(endFigure, from);\r\n}"},
 {"id":427, "parametername":"Figure target", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":132, "classname":"org.jhotdraw.draw.ChopRectangleConnector", "methodid":1362, "methodname":"org.jhotdraw.draw.ChopRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    Rectangle2D.Double r = target.getBounds();\r\n    if ((AttributeKeys.STROKE_COLOR.get(target)) != null) {\r\n        double grow;\r\n        switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n            case CENTER :\r\n            default :\r\n                grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n                break;\r\n            case OUTSIDE :\r\n                grow = AttributeKeys.getStrokeTotalWidth(target);\r\n                break;\r\n            case INSIDE :\r\n                grow = 0.0;\r\n                break;\r\n        }\r\n        Geom.grow(r, grow, grow);\r\n    }\r\n    return Geom.angleToPoint(r, Geom.pointToAngle(r, from));\r\n}"},
 {"id":428, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":133, "classname":"org.jhotdraw.draw.ChopRoundRectangleConnector", "methodid":1366, "methodname":"org.jhotdraw.draw.ChopRoundRectangleConnector.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public ChopRoundRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":429, "parametername":"Figure target", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":133, "classname":"org.jhotdraw.draw.ChopRoundRectangleConnector", "methodid":1367, "methodname":"org.jhotdraw.draw.ChopRoundRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    target = getConnectorTarget(target);\r\n    RoundRectangleFigure rrf = ((RoundRectangleFigure) (target));\r\n    Rectangle2D.Double outer = rrf.getBounds();\r\n    double grow;\r\n    switch (AttributeKeys.STROKE_PLACEMENT.get(target)) {\r\n        case CENTER :\r\n        default :\r\n            grow = (AttributeKeys.getStrokeTotalWidth(target)) / 2.0;\r\n            break;\r\n        case OUTSIDE :\r\n            grow = AttributeKeys.getStrokeTotalWidth(target);\r\n            break;\r\n        case INSIDE :\r\n            grow = 0;\r\n            break;\r\n    }\r\n    Geom.grow(outer, grow, grow);\r\n    Rectangle2D.Double inner = ((Rectangle2D.Double) (outer.clone()));\r\n    double gw = (-((rrf.getArcWidth()) + (grow * 2))) / 2;\r\n    double gh = (-((rrf.getArcHeight()) + (grow * 2))) / 2;\r\n    inner.x -= gw;\r\n    inner.y -= gh;\r\n    inner.width += gw * 2;\r\n    inner.height += gh * 2;\r\n    double angle = Geom.pointToAngle(outer, from);\r\n    Point2D.Double p = Geom.angleToPoint(outer, Geom.pointToAngle(outer, from));\r\n    if (((p.x) == (outer.x)) || ((p.x) == ((outer.x) + (outer.width)))) {\r\n        p.y = Math.min(Math.max(p.y, inner.y), ((inner.y) + (inner.height)));\r\n    } else {\r\n        p.x = Math.min(Math.max(p.x, inner.x), ((inner.x) + (inner.width)));\r\n    }\r\n    return p;\r\n}"},
 {"id":430, "parametername":"TriangleFigure owner", "parametertype":"org.jhotdraw.draw.TriangleFigure", "parameterclass":277, "classid":134, "classname":"org.jhotdraw.draw.ChopTriangleConnector", "methodid":1369, "methodname":"org.jhotdraw.draw.ChopTriangleConnector.-init-(org.jhotdraw.draw.TriangleFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ChopTriangleConnector(TriangleFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":431, "parametername":"Figure target", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":134, "classname":"org.jhotdraw.draw.ChopTriangleConnector", "methodid":1370, "methodname":"org.jhotdraw.draw.ChopTriangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"protected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    TriangleFigure bf = ((TriangleFigure) (getConnectorTarget(target)));\r\n    return bf.chop(from);\r\n}"},
 {"id":432, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":135, "classname":"org.jhotdraw.draw.CloseHandle", "methodid":1371, "methodname":"org.jhotdraw.draw.CloseHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic CloseHandle(Figure owner) {\r\n    super(owner, new RelativeLocator(1.0, 0.0));\r\n}"},
 {"id":433, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1379, "methodname":"org.jhotdraw.draw.CompositeFigure.add(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Adds a child to the figure.\r\n * <p>\r\n * This is a convenience method for {@code add(getChildCount(), child);}\r\n * <p>\r\n * This method calls {@code figureAdded} on all registered\r\n * {@code CompositeFigureListener}s.\r\n *\r\n * @return {@code true} if this CompositeFigure changed as a result of the\r\ncall\r\n */\r\npublic boolean add(Figure child);"},
 {"id":434, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1378, "methodname":"org.jhotdraw.draw.CompositeFigure.add(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Adds a child to the figure at the specified index.\r\n * <p>\r\n * This method calls {@code figureAdded} on all registered\r\n * {@code CompositeFigureListener}s.\r\n */\r\npublic void add(int index, Figure child);"},
 {"id":435, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1382, "methodname":"org.jhotdraw.draw.CompositeFigure.basicAdd(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Adds a child to the figure without firing events.\r\n * <p>\r\n * This method can be used to reinsert a child figure which has been\r\n * temporarily removed from this CompositeFigure (for example to reorder\r\n * the sequence of the children) and to efficiently build a drawing from\r\n * an {@link InputFormat}.\r\n *\r\n * This is a convenience method for calling\r\n * {@code basicAdd(getChildCount(), child);}.\r\n */\r\npublic void basicAdd(Figure child);"},
 {"id":436, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1381, "methodname":"org.jhotdraw.draw.CompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Adds a child to the figure at the specified index without\r\n * firing events.\r\n * <p>\r\n * This method can be used to reinsert a child figure which has been\r\n * temporarily removed from this CompositeFigure (for example to reorder\r\n * the sequence of the children) and to efficiently build a drawing from\r\n * an {@link InputFormat}.\r\n */\r\npublic void basicAdd(int index, Figure child);"},
 {"id":437, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1393, "methodname":"org.jhotdraw.draw.CompositeFigure.remove(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Removes the specified child.\r\n * Returns true, if the Figure contained the removed child.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code removeChild(getChildren().indexOf(child));}\r\n * <p>\r\n * This method calls {@code figureRemoved} on all registered\r\n * {@code CompositeFigureListener}s.\r\n */\r\npublic boolean remove(Figure child);"},
 {"id":438, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1383, "methodname":"org.jhotdraw.draw.CompositeFigure.basicRemove(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Removes the specified child without firing events.\r\n * <p>\r\n * This method can be used to temporarily remove a child from this\r\n * CompositeFigure (for example to reorder the sequence of the children).\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code basicRemove(indexOf(child));}.\r\n * <p>\r\n * Returns the index of the removed figure. Returns -1 if the\r\n * figure was not a child of this CompositeFigure.\r\n */\r\npublic int basicRemove(Figure child);"},
 {"id":439, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1391, "methodname":"org.jhotdraw.draw.CompositeFigure.indexOf(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the index of the specified child.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code getChildren().indexOf(index);}.\r\n *\r\n * @return The index of the child, or -1 if the specified figure is not\r\na child of this CompositeFigure.\r\n */\r\npublic int indexOf(Figure child);"},
 {"id":440, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1386, "methodname":"org.jhotdraw.draw.CompositeFigure.contains(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns true if this composite figure contains the specified figure.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code getChildren().contains(f);}.\r\n */\r\npublic boolean contains(Figure f);"},
 {"id":441, "parametername":"Layouter newValue", "parametertype":"org.jhotdraw.draw.Layouter", "parameterclass":207, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1397, "methodname":"org.jhotdraw.draw.CompositeFigure.setLayouter(org.jhotdraw.draw.Layouter)", "isreturn":0, "sourcecode":"/**\r\n * Set a Layouter object which encapsulated a layout\r\n * algorithm for this figure. Typically, a Layouter\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation. It is a good idea to set\r\n * the Layouter in the protected initialize() method\r\n * so it can be recreated if a GraphicalCompositeFigure is\r\n * read and restored from a StorableInput stream.\r\n *\r\n * @param newValue\tencapsulation\r\n * \t\tof a layout algorithm.\r\n */\r\npublic void setLayouter(Layouter newValue);"},
 {"id":442, "parametername":"CompositeFigureListener listener", "parametertype":"org.jhotdraw.draw.CompositeFigureListener", "parameterclass":138, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1380, "methodname":"org.jhotdraw.draw.CompositeFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)", "isreturn":0, "sourcecode":"/**\r\n * Adds a listener for this composite figure.\r\n */\r\npublic void addCompositeFigureListener(CompositeFigureListener listener);"},
 {"id":443, "parametername":"CompositeFigureListener listener", "parametertype":"org.jhotdraw.draw.CompositeFigureListener", "parameterclass":138, "classid":136, "classname":"org.jhotdraw.draw.CompositeFigure", "methodid":1396, "methodname":"org.jhotdraw.draw.CompositeFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)", "isreturn":0, "sourcecode":"/**\r\n * Removes a listener from this composite figure.\r\n */\r\npublic void removeCompositeFigureListener(CompositeFigureListener listener);"},
 {"id":444, "parametername":"CompositeFigure source", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":137, "classname":"org.jhotdraw.draw.CompositeFigureEvent", "methodid":1398, "methodname":"org.jhotdraw.draw.CompositeFigureEvent.-init-(org.jhotdraw.draw.CompositeFigure,org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double,int)", "isreturn":0, "sourcecode":"/**\r\n * Constructs an event for the provided CompositeFigure.\r\n *\r\n * @param source\r\n * \t\tThe composite figure.\r\n * @param child\r\n * \t\tThe changed figure.\r\n * @param invalidatedArea\r\n * \t\tThe bounds of the invalidated area on the drawing.\r\n */\r\npublic CompositeFigureEvent(CompositeFigure source, Figure child, Rectangle2D.Double invalidatedArea, int zIndex) {\r\n    super(source);\r\n    this.child = child;\r\n    this.invalidatedArea = invalidatedArea;\r\n    this.index = 0;\r\n}"},
 {"id":445, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":137, "classname":"org.jhotdraw.draw.CompositeFigureEvent", "methodid":1398, "methodname":"org.jhotdraw.draw.CompositeFigureEvent.-init-(org.jhotdraw.draw.CompositeFigure,org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double,int)", "isreturn":0, "sourcecode":"/**\r\n * Constructs an event for the provided CompositeFigure.\r\n *\r\n * @param source\r\n * \t\tThe composite figure.\r\n * @param child\r\n * \t\tThe changed figure.\r\n * @param invalidatedArea\r\n * \t\tThe bounds of the invalidated area on the drawing.\r\n */\r\npublic CompositeFigureEvent(CompositeFigure source, Figure child, Rectangle2D.Double invalidatedArea, int zIndex) {\r\n    super(source);\r\n    this.child = child;\r\n    this.invalidatedArea = invalidatedArea;\r\n    this.index = 0;\r\n}"},
 {"id":446, "parametername":"CompositeFigureEvent e", "parametertype":"org.jhotdraw.draw.CompositeFigureEvent", "parameterclass":137, "classid":138, "classname":"org.jhotdraw.draw.CompositeFigureListener", "methodid":1403, "methodname":"org.jhotdraw.draw.CompositeFigureListener.figureAdded(org.jhotdraw.draw.CompositeFigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when a figure was added.\r\n */\r\npublic void figureAdded(CompositeFigureEvent e);"},
 {"id":447, "parametername":"CompositeFigureEvent e", "parametertype":"org.jhotdraw.draw.CompositeFigureEvent", "parameterclass":137, "classid":138, "classname":"org.jhotdraw.draw.CompositeFigureListener", "methodid":1404, "methodname":"org.jhotdraw.draw.CompositeFigureListener.figureRemoved(org.jhotdraw.draw.CompositeFigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when a figure was removed.\r\n */\r\npublic void figureRemoved(CompositeFigureEvent e);"},
 {"id":448, "parametername":"LineDecoration decoration1", "parametertype":"org.jhotdraw.draw.LineDecoration", "parameterclass":210, "classid":139, "classname":"org.jhotdraw.draw.CompositeLineDecoration", "methodid":1406, "methodname":"org.jhotdraw.draw.CompositeLineDecoration.-init-(org.jhotdraw.draw.LineDecoration,org.jhotdraw.draw.LineDecoration)", "isreturn":0, "sourcecode":"/**\r\n * Constructs a composite line decoration with the two supplied decorations.\r\n */\r\npublic CompositeLineDecoration(LineDecoration decoration1, LineDecoration decoration2) {\r\n    addDecoration(decoration1);\r\n    addDecoration(decoration2);\r\n}"},
 {"id":449, "parametername":"LineDecoration decoration2", "parametertype":"org.jhotdraw.draw.LineDecoration", "parameterclass":210, "classid":139, "classname":"org.jhotdraw.draw.CompositeLineDecoration", "methodid":1406, "methodname":"org.jhotdraw.draw.CompositeLineDecoration.-init-(org.jhotdraw.draw.LineDecoration,org.jhotdraw.draw.LineDecoration)", "isreturn":0, "sourcecode":"/**\r\n * Constructs a composite line decoration with the two supplied decorations.\r\n */\r\npublic CompositeLineDecoration(LineDecoration decoration1, LineDecoration decoration2) {\r\n    addDecoration(decoration1);\r\n    addDecoration(decoration2);\r\n}"},
 {"id":450, "parametername":"LineDecoration decoration", "parametertype":"org.jhotdraw.draw.LineDecoration", "parameterclass":210, "classid":139, "classname":"org.jhotdraw.draw.CompositeLineDecoration", "methodid":1407, "methodname":"org.jhotdraw.draw.CompositeLineDecoration.addDecoration(org.jhotdraw.draw.LineDecoration)", "isreturn":0, "sourcecode":"/**\r\n * Add another line decoration into the composite line decoration.\r\n * The new decoration will be appended to the existing decorations\r\n * and is also the last drawn.\r\n */\r\npublic void addDecoration(LineDecoration decoration) {\r\n    if (decoration != null) {\r\n        decorations.add(decoration);\r\n    }\r\n}"},
 {"id":451, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":139, "classname":"org.jhotdraw.draw.CompositeLineDecoration", "methodid":1408, "methodname":"org.jhotdraw.draw.CompositeLineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Draws the arrow tip in the direction specified by the given two\r\n * Points.. (template method)\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    for (LineDecoration decoration : decorations) {\r\n        decoration.draw(g, f, p1, p2);\r\n    }\r\n}"},
 {"id":452, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":139, "classname":"org.jhotdraw.draw.CompositeLineDecoration", "methodid":1410, "methodname":"org.jhotdraw.draw.CompositeLineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Returns the drawing area of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2) {\r\n    Rectangle2D.Double r = null;\r\n    for (LineDecoration decoration : decorations) {\r\n        Rectangle2D.Double aR = decoration.getDrawingArea(f, p1, p2);\r\n        if (r == null)\r\n            r = aR;\r\n        else\r\n            r.add(aR);\r\n\r\n    }\r\n    return r;\r\n}"},
 {"id":453, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":139, "classname":"org.jhotdraw.draw.CompositeLineDecoration", "methodid":1409, "methodname":"org.jhotdraw.draw.CompositeLineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the radius of the decorator.\r\n * This is used to crop the end of the line, to prevent it from being\r\n * drawn it over the decorator.\r\n */\r\npublic double getDecorationRadius(Figure f) {\r\n    double radius = 0;\r\n    for (LineDecoration decoration : decorations) {\r\n        radius = Math.max(radius, decoration.getDecorationRadius(f));\r\n    }\r\n    return radius;\r\n}"},
 {"id":454, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":139, "classname":"org.jhotdraw.draw.CompositeLineDecoration", "methodid":1411, "methodname":"org.jhotdraw.draw.CompositeLineDecoration.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    for (int i = (in.getElementCount(\"decoration\")) - 1; i >= 0; i--) {\r\n        in.openElement(\"decoration\", i);\r\n        Object value = in.readObject();\r\n        if (value instanceof LineDecoration)\r\n            addDecoration(((LineDecoration) (value)));\r\n\r\n        in.closeElement();\r\n    }\r\n}"},
 {"id":455, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":139, "classname":"org.jhotdraw.draw.CompositeLineDecoration", "methodid":1412, "methodname":"org.jhotdraw.draw.CompositeLineDecoration.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    for (LineDecoration decoration : decorations) {\r\n        out.openElement(\"decoration\");\r\n        out.writeObject(decoration);\r\n        out.closeElement();\r\n    }\r\n}"},
 {"id":456, "parametername":"AbstractFigure owner", "parametertype":"org.jhotdraw.draw.AbstractFigure", "parameterclass":100, "classid":140, "classname":"org.jhotdraw.draw.CompositeTransformEdit", "methodid":1413, "methodname":"org.jhotdraw.draw.CompositeTransformEdit.-init-(org.jhotdraw.draw.AbstractFigure,java.awt.geom.AffineTransform)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic CompositeTransformEdit(AbstractFigure owner, AffineTransform tx) {\r\n    this.owner = owner;\r\n    this.tx = ((AffineTransform) (tx.clone()));\r\n    inProgress = true;\r\n}"},
 {"id":457, "parametername":"ConnectionFigure owner", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":141, "classname":"org.jhotdraw.draw.ConnectionEndHandle", "methodid":1423, "methodname":"org.jhotdraw.draw.ConnectionEndHandle.-init-(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Constructs the connection handle for the given start figure.\r\n */\r\npublic ConnectionEndHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":458, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":141, "classname":"org.jhotdraw.draw.ConnectionEndHandle", "methodid":1425, "methodname":"org.jhotdraw.draw.ConnectionEndHandle.connect(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Sets the start of the connection.\r\n */\r\nprotected void connect(Connector c) {\r\n    getOwner().setEndConnector(c);\r\n}"},
 {"id":459, "parametername":"Connector existingEnd", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":141, "classname":"org.jhotdraw.draw.ConnectionEndHandle", "methodid":1424, "methodname":"org.jhotdraw.draw.ConnectionEndHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(existingEnd, targetEnd);\r\n}"},
 {"id":460, "parametername":"Connector targetEnd", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":141, "classname":"org.jhotdraw.draw.ConnectionEndHandle", "methodid":1424, "methodname":"org.jhotdraw.draw.ConnectionEndHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(existingEnd, targetEnd);\r\n}"},
 {"id":461, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":142, "classname":"org.jhotdraw.draw.ConnectionFigure", "methodid":1449, "methodname":"org.jhotdraw.draw.ConnectionFigure.setStartConnector(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Sets the start {@code Connector} of the connection.\r\n * Set this to null to disconnect the start connection.\r\n *\r\n * @param start\r\n * \t\tthe start Connector of the connection\r\n */\r\npublic void setStartConnector(Connector start);"},
 {"id":462, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":142, "classname":"org.jhotdraw.draw.ConnectionFigure", "methodid":1444, "methodname":"org.jhotdraw.draw.ConnectionFigure.setEndConnector(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Sets the end Connector of the connection.\r\n * Set this to null to disconnect the end connection.\r\n *\r\n * @param end\r\n * \t\tthe end Connector of the connection\r\n */\r\npublic void setEndConnector(Connector end);"},
 {"id":463, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":142, "classname":"org.jhotdraw.draw.ConnectionFigure", "methodid":1432, "methodname":"org.jhotdraw.draw.ConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Returns true, if this ConnectionFigure can connect the specified\r\n * {@code Connector}s.\r\n * Implement this method to constrain the allowed connections between figures.\r\n */\r\npublic boolean canConnect(Connector start, Connector end);"},
 {"id":464, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":142, "classname":"org.jhotdraw.draw.ConnectionFigure", "methodid":1432, "methodname":"org.jhotdraw.draw.ConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Returns true, if this ConnectionFigure can connect the specified\r\n * {@code Connector}s.\r\n * Implement this method to constrain the allowed connections between figures.\r\n */\r\npublic boolean canConnect(Connector start, Connector end);"},
 {"id":465, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":142, "classname":"org.jhotdraw.draw.ConnectionFigure", "methodid":1431, "methodname":"org.jhotdraw.draw.ConnectionFigure.canConnect(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Checks if this {@code ConnectionFigure} can be connect to the specified\r\n * {@code Connector}.\r\n * This is used to provide an early feedback to the user, when he/she\r\n * creates a new connection.\r\n */\r\npublic boolean canConnect(Connector start);"},
 {"id":466, "parametername":"BezierPath.Node node", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":142, "classname":"org.jhotdraw.draw.ConnectionFigure", "methodid":1447, "methodname":"org.jhotdraw.draw.ConnectionFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"/**\r\n * Sets the specified node.\r\n */\r\npublic void setNode(int index, BezierPath.Node node);"},
 {"id":467, "parametername":"Liner newValue", "parametertype":"org.jhotdraw.draw.Liner", "parameterclass":212, "classid":142, "classname":"org.jhotdraw.draw.ConnectionFigure", "methodid":1446, "methodname":"org.jhotdraw.draw.ConnectionFigure.setLiner(org.jhotdraw.draw.Liner)", "isreturn":0, "sourcecode":"/**\r\n * Set a Liner object which encapsulated a lineout\r\n * algorithm for this figure. Typically, a Liner\r\n * accesses the child components of this figure and arranges\r\n * their graphical presentation.\r\n *\r\n * @param newValue\tencapsulation\r\n * \t\tof a lineout algorithm.\r\n */\r\npublic void setLiner(Liner newValue);"},
 {"id":468, "parametername":"ConnectionFigure owner", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":143, "classname":"org.jhotdraw.draw.ConnectionStartHandle", "methodid":1452, "methodname":"org.jhotdraw.draw.ConnectionStartHandle.-init-(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Constructs the connection handle for the given start figure.\r\n */\r\npublic ConnectionStartHandle(ConnectionFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":469, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":143, "classname":"org.jhotdraw.draw.ConnectionStartHandle", "methodid":1454, "methodname":"org.jhotdraw.draw.ConnectionStartHandle.connect(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Sets the start of the connection.\r\n */\r\nprotected void connect(Connector c) {\r\n    getOwner().setStartConnector(c);\r\n}"},
 {"id":470, "parametername":"Connector existingEnd", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":143, "classname":"org.jhotdraw.draw.ConnectionStartHandle", "methodid":1453, "methodname":"org.jhotdraw.draw.ConnectionStartHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(targetEnd, existingEnd);\r\n}"},
 {"id":471, "parametername":"Connector targetEnd", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":143, "classname":"org.jhotdraw.draw.ConnectionStartHandle", "methodid":1453, "methodname":"org.jhotdraw.draw.ConnectionStartHandle.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"protected boolean canConnect(Connector existingEnd, Connector targetEnd) {\r\n    return getOwner().canConnect(targetEnd, existingEnd);\r\n}"},
 {"id":472, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1460, "methodname":"org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ConnectionTool(ConnectionFigure prototype) {\r\n    this(prototype, null, null);\r\n}"},
 {"id":473, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1461, "methodname":"org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map)", "isreturn":0, "sourcecode":"public ConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}"},
 {"id":474, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1462, "methodname":"org.jhotdraw.draw.ConnectionTool.-init-(org.jhotdraw.draw.ConnectionFigure,java.util.Map,java.lang.String)", "isreturn":0, "sourcecode":"public ConnectionTool(ConnectionFigure prototype, Map<AttributeKey, Object> attributes, String presentationName) {\r\n    this.prototype = prototype;\r\n    this.prototypeAttributes = attributes;\r\n    if (presentationName == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        presentationName = labels.getString(\"edit.createConnectionFigure.text\");\r\n    }\r\n    this.presentationName = presentationName;\r\n}"},
 {"id":475, "parametername":"ConnectionFigure f", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1467, "methodname":"org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to start a new connection.\r\n *\r\n * @param f\r\n * \t\tThe ConnectionFigure.\r\n * @param startConnector\r\n * \t\tThe Connector of the start Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector) {\r\n    return f.canConnect(startConnector);\r\n}"},
 {"id":476, "parametername":"Connector startConnector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1467, "methodname":"org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to start a new connection.\r\n *\r\n * @param f\r\n * \t\tThe ConnectionFigure.\r\n * @param startConnector\r\n * \t\tThe Connector of the start Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector) {\r\n    return f.canConnect(startConnector);\r\n}"},
 {"id":477, "parametername":"ConnectionFigure f", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1468, "methodname":"org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to end a new connection.\r\n *\r\n * @param f\r\n * \t\tThe ConnectionFigure.\r\n * @param startConnector\r\n * \t\tThe Connector of the start Figure.\r\n * @param endConnector\r\n * \t\tThe Connector of the end Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector, Connector endConnector) {\r\n    return f.canConnect(startConnector, endConnector);\r\n}"},
 {"id":478, "parametername":"Connector startConnector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1468, "methodname":"org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to end a new connection.\r\n *\r\n * @param f\r\n * \t\tThe ConnectionFigure.\r\n * @param startConnector\r\n * \t\tThe Connector of the start Figure.\r\n * @param endConnector\r\n * \t\tThe Connector of the end Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector, Connector endConnector) {\r\n    return f.canConnect(startConnector, endConnector);\r\n}"},
 {"id":479, "parametername":"Connector endConnector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1468, "methodname":"org.jhotdraw.draw.ConnectionTool.canConnect(org.jhotdraw.draw.ConnectionFigure,org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * This method is called on the Figure, onto which the user wants\r\n * to end a new connection.\r\n *\r\n * @param f\r\n * \t\tThe ConnectionFigure.\r\n * @param startConnector\r\n * \t\tThe Connector of the start Figure.\r\n * @param endConnector\r\n * \t\tThe Connector of the end Figure.\r\n * @return True, if a connection can be made.\r\n */\r\nprotected boolean canConnect(ConnectionFigure f, Connector startConnector, Connector endConnector) {\r\n    return f.canConnect(startConnector, endConnector);\r\n}"},
 {"id":480, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1466, "methodname":"org.jhotdraw.draw.ConnectionTool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n}"},
 {"id":481, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1471, "methodname":"org.jhotdraw.draw.ConnectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    if ((createdFigure) != null) {\r\n        getDrawing().remove(createdFigure);\r\n        createdFigure = null;\r\n    }\r\n    targetFigure = null;\r\n    startConnector = endConnector = null;\r\n    super.deactivate(editor);\r\n}"},
 {"id":482, "parametername":"Figure createdFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":144, "classname":"org.jhotdraw.draw.ConnectionTool", "methodid":1470, "methodname":"org.jhotdraw.draw.ConnectionTool.creationFinished(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\nprotected void creationFinished(Figure createdFigure) {\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}"},
 {"id":483, "parametername":"ConnectionFigure connection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":145, "classname":"org.jhotdraw.draw.Connector", "methodid":1486, "methodname":"org.jhotdraw.draw.Connector.findStart(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Finds the start point for the connection.\r\n */\r\npublic Point2D.Double findStart(ConnectionFigure connection);"},
 {"id":484, "parametername":"ConnectionFigure connection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":145, "classname":"org.jhotdraw.draw.Connector", "methodid":1485, "methodname":"org.jhotdraw.draw.Connector.findEnd(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Finds the end point for the connection.\r\n */\r\npublic Point2D.Double findEnd(ConnectionFigure connection);"},
 {"id":485, "parametername":"Connector connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1492, "methodname":"org.jhotdraw.draw.ConnectorHandle.-init-(org.jhotdraw.draw.Connector,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ConnectorHandle(Connector connector, ConnectionFigure prototype) {\r\n    super(connector.getOwner());\r\n    this.connector = connector;\r\n    this.prototype = prototype;\r\n}"},
 {"id":486, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1492, "methodname":"org.jhotdraw.draw.ConnectorHandle.-init-(org.jhotdraw.draw.Connector,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ConnectorHandle(Connector connector, ConnectionFigure prototype) {\r\n    super(connector.getOwner());\r\n    this.connector = connector;\r\n    this.prototype = prototype;\r\n}"},
 {"id":487, "parametername":"ConnectionFigure newConnection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1506, "methodname":"org.jhotdraw.draw.ConnectorHandle.setConnection(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"protected void setConnection(ConnectionFigure newConnection) {\r\n    createdConnection = newConnection;\r\n}"},
 {"id":488, "parametername":"Figure newTargetFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1507, "methodname":"org.jhotdraw.draw.ConnectorHandle.setTargetFigure(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected void setTargetFigure(Figure newTargetFigure) {\r\n    connectableFigure = newTargetFigure;\r\n}"},
 {"id":489, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1498, "methodname":"org.jhotdraw.draw.ConnectorHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure figure : drawing.getFiguresFrontToBack()) {\r\n        if (((!(figure.includes(getConnection()))) && (figure.canConnect())) && (figure.contains(p))) {\r\n            return figure;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":490, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1498, "methodname":"org.jhotdraw.draw.ConnectorHandle.findConnectableFigure(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Drawing)", "isreturn":1, "sourcecode":"private Figure findConnectableFigure(Point2D.Double p, Drawing drawing) {\r\n    for (Figure figure : drawing.getFiguresFrontToBack()) {\r\n        if (((!(figure.includes(getConnection()))) && (figure.canConnect())) && (figure.contains(p))) {\r\n            return figure;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":491, "parametername":"Figure connectableFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1497, "methodname":"org.jhotdraw.draw.ConnectorHandle.findConnectableConnector(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Finds a connection end figure.\r\n */\r\nprotected Connector findConnectableConnector(Figure connectableFigure, Point2D.Double p) {\r\n    Connector target = (connectableFigure == null) ? null : connectableFigure.findConnector(p, getConnection());\r\n    if ((((connectableFigure != null) && (connectableFigure.canConnect())) && (!(connectableFigure.includes(getOwner())))) && (getConnection().canConnect(connector, target))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}"},
 {"id":492, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1497, "methodname":"org.jhotdraw.draw.ConnectorHandle.findConnectableConnector(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":1, "sourcecode":"/**\r\n * Finds a connection end figure.\r\n */\r\nprotected Connector findConnectableConnector(Figure connectableFigure, Point2D.Double p) {\r\n    Connector target = (connectableFigure == null) ? null : connectableFigure.findConnector(p, getConnection());\r\n    if ((((connectableFigure != null) && (connectableFigure.canConnect())) && (!(connectableFigure.includes(getOwner())))) && (getConnection().canConnect(connector, target))) {\r\n        return target;\r\n    }\r\n    return null;\r\n}"},
 {"id":493, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":146, "classname":"org.jhotdraw.draw.ConnectorHandle", "methodid":1504, "methodname":"org.jhotdraw.draw.ConnectorHandle.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"@Override\r\npublic boolean isCombinableWith(Handle handle) {\r\n    return false;\r\n}"},
 {"id":494, "parametername":"TranslationDirection dir", "parametertype":"org.jhotdraw.draw.TranslationDirection", "parameterclass":276, "classid":147, "classname":"org.jhotdraw.draw.Constrainer", "methodid":1518, "methodname":"org.jhotdraw.draw.Constrainer.translatePoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)", "isreturn":0, "sourcecode":"/**\r\n * Moves a point to the closest constrained location in the specified\r\n * direction.\r\n * <p>\r\n * This method changes the point which is passed as a parameter.\r\n *\r\n * @param p\r\n * \t\tA point on the drawing.\r\n * @param dir\r\n * \t\tA direction.\r\n * @return Returns the constrained point.\r\n */\r\npublic Point2D.Double translatePoint(Point2D.Double p, TranslationDirection dir);"},
 {"id":495, "parametername":"TranslationDirection dir", "parametertype":"org.jhotdraw.draw.TranslationDirection", "parameterclass":276, "classid":147, "classname":"org.jhotdraw.draw.Constrainer", "methodid":1519, "methodname":"org.jhotdraw.draw.Constrainer.translateRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)", "isreturn":0, "sourcecode":"/**\r\n * Moves a rectangle to the closest constrained location in the\r\n * specified direction.\r\n * <p>\r\n * This method changes the location of the rectangle which is passed as a\r\n * parameter. This method only performs a translation - it does not change\r\n * the size of the rectangle.\r\n *\r\n * @param r\r\n * \t\tA rectangle on the drawing.\r\n * @param dir\r\n * \t\tA direction.\r\n * @return Returns the constrained rectangle.\r\n */\r\npublic Rectangle2D.Double translateRectangle(Rectangle2D.Double r, TranslationDirection dir);"},
 {"id":496, "parametername":"RotationDirection dir", "parametertype":"org.jhotdraw.draw.RotationDirection", "parameterclass":243, "classid":147, "classname":"org.jhotdraw.draw.Constrainer", "methodid":1517, "methodname":"org.jhotdraw.draw.Constrainer.rotateAngle(double,org.jhotdraw.draw.RotationDirection)", "isreturn":0, "sourcecode":"/**\r\n * Moves the given angle (in radians) to the closest constrained orientation\r\n * in the specified direction.\r\n *\r\n * @param angle\r\n * \t\tThe angle (in radians).\r\n * @return The closest constrained angle (in radians) in the specified\r\ndirection.\r\n */\r\npublic double rotateAngle(double angle, RotationDirection dir);"},
 {"id":497, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":147, "classname":"org.jhotdraw.draw.Constrainer", "methodid":1515, "methodname":"org.jhotdraw.draw.Constrainer.draw(java.awt.Graphics2D,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Draws the constrainer grid for the specified drawing view.\r\n */\r\npublic void draw(Graphics2D g, DrawingView view);"},
 {"id":498, "parametername":"Figure prototype", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":148, "classname":"org.jhotdraw.draw.CreationTool", "methodid":1523, "methodname":"org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance with the specified prototype but without an\r\n * attribute set. The CreationTool clones this prototype each time a new\r\n *  Figure needs to be created. When a new Figure is created, the\r\n * CreationTool applies the default attributes from the DrawingEditor to it.\r\n *\r\n * @param prototype\r\n * \t\tThe prototype used to create a new Figure.\r\n */\r\npublic CreationTool(Figure prototype) {\r\n    this(prototype, null, null);\r\n}"},
 {"id":499, "parametername":"Figure prototype", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":148, "classname":"org.jhotdraw.draw.CreationTool", "methodid":1524, "methodname":"org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance with the specified prototype but without an\r\n * attribute set. The CreationTool clones this prototype each time a new\r\n * Figure needs to be created. When a new Figure is created, the\r\n * CreationTool applies the default attributes from the DrawingEditor to it,\r\n * and then it applies the attributes to it, that have been supplied in\r\n * this constructor.\r\n *\r\n * @param prototype\r\n * \t\tThe prototype used to create a new Figure.\r\n * @param attributes\r\n * \t\tThe CreationTool applies these attributes to the\r\n * \t\tprototype after having applied the default attributes from the DrawingEditor.\r\n */\r\npublic CreationTool(Figure prototype, Map<AttributeKey, Object> attributes) {\r\n    this(prototype, attributes, null);\r\n}"},
 {"id":500, "parametername":"Figure prototype", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":148, "classname":"org.jhotdraw.draw.CreationTool", "methodid":1525, "methodname":"org.jhotdraw.draw.CreationTool.-init-(org.jhotdraw.draw.Figure,java.util.Map,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance with the specified prototype and attribute set.\r\n *\r\n * @param prototype\r\n * \t\tThe prototype used to create a new Figure.\r\n * @param attributes\r\n * \t\tThe CreationTool applies these attributes to the\r\n * \t\tprototype after having applied the default attributes from the DrawingEditor.\r\n * @param name\r\n * \t\tThe name parameter is currently not used.\r\n * @deprecated This constructor might go away, because the name parameter\r\nis not used.\r\n */\r\npublic CreationTool(Figure prototype, Map<AttributeKey, Object> attributes, String name) {\r\n    this.prototype = prototype;\r\n    this.prototypeAttributes = attributes;\r\n    if (name == null) {\r\n        ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n        name = labels.getString(\"edit.createFigure.text\");\r\n    }\r\n    this.presentationName = name;\r\n}"},
 {"id":501, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":148, "classname":"org.jhotdraw.draw.CreationTool", "methodid":1527, "methodname":"org.jhotdraw.draw.CreationTool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    // getView().clearSelection();\r\n    getView().setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n}"},
 {"id":502, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":148, "classname":"org.jhotdraw.draw.CreationTool", "methodid":1530, "methodname":"org.jhotdraw.draw.CreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    if ((getView()) != null) {\r\n        getView().setCursor(Cursor.getDefaultCursor());\r\n    }\r\n    if ((createdFigure) != null) {\r\n        if ((createdFigure) instanceof CompositeFigure) {\r\n            ((CompositeFigure) (createdFigure)).layout();\r\n        }\r\n        createdFigure = null;\r\n    }\r\n}"},
 {"id":503, "parametername":"Figure createdFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":148, "classname":"org.jhotdraw.draw.CreationTool", "methodid":1529, "methodname":"org.jhotdraw.draw.CreationTool.creationFinished(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\nprotected void creationFinished(Figure createdFigure) {\r\n    if (createdFigure.isSelectable()) {\r\n        getView().addToSelection(createdFigure);\r\n    }\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}"},
 {"id":504, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":148, "classname":"org.jhotdraw.draw.CreationTool", "methodid":1539, "methodname":"org.jhotdraw.draw.CreationTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)", "isreturn":0, "sourcecode":"@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}"},
 {"id":505, "parametername":"DOMFactory factory", "parametertype":"org.jhotdraw.xml.DOMFactory", "parameterclass":649, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1540, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.-init-(org.jhotdraw.xml.DOMFactory)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance with format name \"Drawing\", file extension \"xml\"\r\n * and mime type \"image/x-jhotdraw\".\r\n */\r\npublic DOMStorableInputOutputFormat(DOMFactory factory) {\r\n    this(factory, \"Drawing\", \"xml\", \"image/x-jhotdraw\");\r\n}"},
 {"id":506, "parametername":"DOMFactory factory", "parametertype":"org.jhotdraw.xml.DOMFactory", "parameterclass":649, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1541, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.-init-(org.jhotdraw.xml.DOMFactory,java.lang.String,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance using the specified parameters.\r\n *\r\n * @param factory\r\n * \t\tThe factory for creating Figures from XML elements.\r\n * @param description\r\n * \t\tThe format description to be used for the file filter.\r\n * @param fileExtension\r\n * \t\tThe file extension to be used for file filter.\r\n * @param mimeType\r\n * \t\tThe Mime Type is used for clipboard access.\r\n */\r\npublic DOMStorableInputOutputFormat(DOMFactory factory, String description, String fileExtension, String mimeType) {\r\n    this.factory = factory;\r\n    this.fileExtension = fileExtension;\r\n    this.mimeType = mimeType;\r\n    try {\r\n        this.dataFlavor = new DataFlavor(mimeType);\r\n    } catch (ClassNotFoundException ex) {\r\n        InternalError error = new InternalError((\"Unable to create data flavor for mime type:\" + mimeType));\r\n        error.initCause(ex);\r\n        throw error;\r\n    }\r\n}"},
 {"id":507, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1552, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.net.URL,java.io.InputStream,org.jhotdraw.draw.Drawing,java.util.LinkedList)", "isreturn":0, "sourcecode":"/**\r\n * Reads a list of figures into the specified drawing.\r\n * This method expects that there is a child element named \"figures\"\r\n * in the element that represents the drawing.\r\n */\r\nprotected void read(URL url, InputStream in, Drawing drawing, LinkedList<Figure> figures) throws IOException {\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(factory.getName(drawing));\r\n    domi.openElement(\"figures\", 0);\r\n    figures.clear();\r\n    for (int i = 0, n = domi.getElementCount(); i < n; i++) {\r\n        Figure f = ((Figure) (domi.readObject()));\r\n        figures.add(f);\r\n    }\r\n    domi.closeElement();\r\n    domi.closeElement();\r\n    drawing.basicAddAll(drawing.getChildCount(), figures);\r\n}"},
 {"id":508, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1553, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}"},
 {"id":509, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1554, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    NanoXMLDOMOutput domo = new NanoXMLDOMOutput(factory);\r\n    domo.openElement(factory.getName(drawing));\r\n    drawing.write(domo);\r\n    domo.closeElement();\r\n    domo.save(out);\r\n}"},
 {"id":510, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1549, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}"},
 {"id":511, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1550, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}"},
 {"id":512, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1551, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(factory.getName(drawing));\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.read(domi);\r\n    domi.closeElement();\r\n}"},
 {"id":513, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1548, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>();\r\n    InputStream in = ((InputStream) (t.getTransferData(new DataFlavor(mimeType, description))));\r\n    NanoXMLDOMInput domi = new NanoXMLDOMInput(factory, in);\r\n    domi.openElement(\"Drawing-Clip\");\r\n    for (int i = 0, n = domi.getElementCount(); i < n; i++) {\r\n        Figure f = ((Figure) (domi.readObject(i)));\r\n        figures.add(f);\r\n    }\r\n    domi.closeElement();\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n}"},
 {"id":514, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":149, "classname":"org.jhotdraw.draw.DOMStorableInputOutputFormat", "methodid":1542, "methodname":"org.jhotdraw.draw.DOMStorableInputOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)", "isreturn":0, "sourcecode":"public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    NanoXMLDOMOutput domo = new NanoXMLDOMOutput(factory);\r\n    domo.openElement(\"Drawing-Clip\");\r\n    for (Figure f : figures) {\r\n        domo.writeObject(f);\r\n    }\r\n    domo.closeElement();\r\n    domo.save(buf);\r\n    return new InputStreamTransferable(new DataFlavor(mimeType, description), buf.toByteArray());\r\n}"},
 {"id":515, "parametername":"Figure newValue", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":150, "classname":"org.jhotdraw.draw.DecoratedFigure", "methodid":1556, "methodname":"org.jhotdraw.draw.DecoratedFigure.setDecorator(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Sets a decorator Figure, for example a visual adornment to this Figure.\r\n * Set this to null, if no decorator is desired.\r\n * The decorator uses the same logical bounds as this Figure plus\r\n * AttributeKeys.DECORATOR_INSETS. The decorator does not handle events.\r\n * The decorator is drawn when the figure is drawn.\r\n */\r\npublic void setDecorator(Figure newValue);"},
 {"id":516, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":151, "classname":"org.jhotdraw.draw.DefaultDragTracker", "methodid":1557, "methodname":"org.jhotdraw.draw.DefaultDragTracker.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultDragTracker(Figure figure) {\r\n    anchorFigure = figure;\r\n}"},
 {"id":517, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":151, "classname":"org.jhotdraw.draw.DefaultDragTracker", "methodid":1563, "methodname":"org.jhotdraw.draw.DefaultDragTracker.setDraggedFigure(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void setDraggedFigure(Figure f) {\r\n    anchorFigure = f;\r\n}"},
 {"id":518, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":152, "classname":"org.jhotdraw.draw.DefaultDrawing", "methodid":1565, "methodname":"org.jhotdraw.draw.DefaultDrawing.basicAdd(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic void basicAdd(int index, Figure figure) {\r\n    super.basicAdd(index, figure);\r\n    invalidateSortOrder();\r\n}"},
 {"id":519, "parametername":"Figure ignore", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":152, "classname":"org.jhotdraw.draw.DefaultDrawing", "methodid":1576, "methodname":"org.jhotdraw.draw.DefaultDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (((f != ignore) && (f.isVisible())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":520, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":152, "classname":"org.jhotdraw.draw.DefaultDrawing", "methodid":1576, "methodname":"org.jhotdraw.draw.DefaultDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (((f != ignore) && (f.isVisible())) && (f.contains(p))) {\r\n            return f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":521, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":152, "classname":"org.jhotdraw.draw.DefaultDrawing", "methodid":1574, "methodname":"org.jhotdraw.draw.DefaultDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":522, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":152, "classname":"org.jhotdraw.draw.DefaultDrawing", "methodid":1574, "methodname":"org.jhotdraw.draw.DefaultDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":523, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":152, "classname":"org.jhotdraw.draw.DefaultDrawing", "methodid":1584, "methodname":"org.jhotdraw.draw.DefaultDrawing.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\nprotected void setAttributeOnChildren(AttributeKey key, Object newValue) {\r\n    // empty\r\n}"},
 {"id":524, "parametername":"Dimension2DDouble newValue", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":152, "classname":"org.jhotdraw.draw.DefaultDrawing", "methodid":1585, "methodname":"org.jhotdraw.draw.DefaultDrawing.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = (newValue == null) ? null : ((Dimension2DDouble) (newValue.clone()));\r\n    firePropertyChange(Drawing.CANVAS_SIZE_PROPERTY, oldValue, newValue);\r\n}"},
 {"id":525, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":152, "classname":"org.jhotdraw.draw.DefaultDrawing", "methodid":1582, "methodname":"org.jhotdraw.draw.DefaultDrawing.indexOf(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}"},
 {"id":526, "parametername":"Tool newValue", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1605, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.setTool(org.jhotdraw.draw.Tool)", "isreturn":0, "sourcecode":"public void setTool(Tool newValue) {\r\n    Tool oldValue = tool;\r\n    if (newValue == (tool)) {\r\n        return;\r\n    }\r\n    if ((tool) != null) {\r\n        for (DrawingView v : views) {\r\n            v.removeMouseListener(tool);\r\n            v.removeMouseMotionListener(tool);\r\n            v.removeKeyListener(tool);\r\n        }\r\n        tool.deactivate(this);\r\n        tool.removeToolListener(this);\r\n    }\r\n    tool = newValue;\r\n    if ((tool) != null) {\r\n        tool.activate(this);\r\n        for (DrawingView v : views) {\r\n            v.addMouseListener(tool);\r\n            v.addMouseMotionListener(tool);\r\n            v.addKeyListener(tool);\r\n        }\r\n        tool.addToolListener(this);\r\n    }\r\n    firePropertyChange(DrawingEditor.TOOL_PROPERTY, oldValue, newValue);\r\n}"},
 {"id":527, "parametername":"ToolEvent evt", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1590, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.areaInvalidated(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"public void areaInvalidated(ToolEvent evt) {\r\n    Rectangle r = evt.getInvalidatedArea();\r\n    evt.getView().getComponent().repaint(r.x, r.y, r.width, r.height);\r\n}"},
 {"id":528, "parametername":"ToolEvent evt", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1607, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.toolStarted(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"public void toolStarted(ToolEvent evt) {\r\n    setActiveView(evt.getView());\r\n}"},
 {"id":529, "parametername":"DrawingView newValue", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1600, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.setActiveView(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void setActiveView(DrawingView newValue) {\r\n    DrawingView oldValue = activeView;\r\n    activeView = newValue;\r\n    if ((newValue != null) && (newValue != oldValue)) {\r\n        preferredViewSize = activeView.getComponent().getPreferredSize();\r\n    }\r\n    firePropertyChange(DrawingEditor.ACTIVE_VIEW_PROPERTY, oldValue, newValue);\r\n}"},
 {"id":530, "parametername":"ToolEvent evt", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1606, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.toolDone(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"public void toolDone(ToolEvent evt) {\r\n    // XXX - Maybe we should do this with all views of the editor??\r\n    DrawingView v = getActiveView();\r\n    if (v != null) {\r\n        JComponent c = v.getComponent();\r\n        Dimension oldPreferredViewSize = preferredViewSize;\r\n        preferredViewSize = c.getPreferredSize();\r\n        if ((oldPreferredViewSize == null) || (!(oldPreferredViewSize.equals(preferredViewSize)))) {\r\n            c.revalidate();\r\n        }\r\n    }\r\n}"},
 {"id":531, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1589, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic void applyDefaultAttributesTo(Figure f) {\r\n    for (Map.Entry<AttributeKey, Object> entry : defaultAttributes.entrySet()) {\r\n        entry.getKey().basicSet(f, entry.getValue());\r\n    }\r\n}"},
 {"id":532, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1593, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public <T> T getDefaultAttribute(AttributeKey<T> key) {\r\n    if (defaultAttributes.containsKey(key)) {\r\n        return key.get(defaultAttributes);\r\n    } else {\r\n        return key.getDefaultValue();\r\n    }\r\n}"},
 {"id":533, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1602, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"public void setDefaultAttribute(AttributeKey key, Object newValue) {\r\n    Object oldValue = defaultAttributes.put(key, newValue);\r\n    firePropertyChange(key.getKey(), oldValue, newValue);\r\n}"},
 {"id":534, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1599, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.remove(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void remove(DrawingView view) {\r\n    view.getComponent().removeFocusListener(focusHandler);\r\n    views.remove(view);\r\n    if ((tool) != null) {\r\n        view.removeMouseListener(tool);\r\n        view.removeMouseMotionListener(tool);\r\n        view.removeKeyListener(tool);\r\n    }\r\n    view.removeNotify(this);\r\n    if ((activeView) == view) {\r\n        view = ((views.size()) > 0) ? views.iterator().next() : null;\r\n    }\r\n    updateActiveView();\r\n}"},
 {"id":535, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1588, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.add(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void add(DrawingView view) {\r\n    views.add(view);\r\n    view.addNotify(this);\r\n    view.getComponent().addFocusListener(focusHandler);\r\n    if ((tool) != null) {\r\n        view.addMouseListener(tool);\r\n        view.addMouseMotionListener(tool);\r\n        view.addKeyListener(tool);\r\n    }\r\n    updateActiveView();\r\n}"},
 {"id":536, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1604, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"public void setHandleAttribute(AttributeKey key, Object value) {\r\n    handleAttributes.put(key, value);\r\n}"},
 {"id":537, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":153, "classname":"org.jhotdraw.draw.DefaultDrawingEditor", "methodid":1596, "methodname":"org.jhotdraw.draw.DefaultDrawingEditor.getHandleAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public <T> T getHandleAttribute(AttributeKey<T> key) {\r\n    if (handleAttributes.containsKey(key)) {\r\n        return key.get(handleAttributes);\r\n    } else {\r\n        return key.getDefaultValue();\r\n    }\r\n}"},
 {"id":538, "parametername":"CompositeFigureEvent evt", "parametertype":"org.jhotdraw.draw.CompositeFigureEvent", "parameterclass":137, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1684, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureAdded(org.jhotdraw.draw.CompositeFigureEvent)", "isreturn":0, "sourcecode":"public void figureAdded(CompositeFigureEvent evt) {\r\n    if (((drawing.getChildCount()) == 1) && ((getEmptyDrawingMessage()) != null)) {\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(evt.getInvalidatedArea());\r\n    }\r\n    invalidateDimension();\r\n}"},
 {"id":539, "parametername":"CompositeFigureEvent evt", "parametertype":"org.jhotdraw.draw.CompositeFigureEvent", "parameterclass":137, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1688, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRemoved(org.jhotdraw.draw.CompositeFigureEvent)", "isreturn":0, "sourcecode":"public void figureRemoved(CompositeFigureEvent evt) {\r\n    if (((drawing.getChildCount()) == 0) && ((getEmptyDrawingMessage()) != null)) {\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(evt.getInvalidatedArea());\r\n    }\r\n    removeFromSelection(evt.getChildFigure());\r\n    invalidateDimension();\r\n}"},
 {"id":540, "parametername":"FigureEvent evt", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1681, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void areaInvalidated(FigureEvent evt) {\r\n    repaintDrawingArea(evt.getInvalidatedArea());\r\n    invalidateDimension();\r\n}"},
 {"id":541, "parametername":"HandleEvent evt", "parametertype":"org.jhotdraw.draw.HandleEvent", "parameterclass":193, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1682, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.areaInvalidated(org.jhotdraw.draw.HandleEvent)", "isreturn":0, "sourcecode":"public void areaInvalidated(HandleEvent evt) {\r\n    repaint(evt.getInvalidatedArea());\r\n    invalidateDimension();\r\n}"},
 {"id":542, "parametername":"HandleEvent e", "parametertype":"org.jhotdraw.draw.HandleEvent", "parameterclass":193, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1694, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.handleRequestSecondaryHandles(org.jhotdraw.draw.HandleEvent)", "isreturn":0, "sourcecode":"public void handleRequestSecondaryHandles(HandleEvent e) {\r\n    secondaryHandleOwner = e.getHandle();\r\n    secondaryHandles.clear();\r\n    secondaryHandles.addAll(secondaryHandleOwner.createSecondaryHandles());\r\n    for (Handle h : secondaryHandles) {\r\n        h.setView(this);\r\n        h.addHandleListener(eventHandler);\r\n    }\r\n    repaint();\r\n}"},
 {"id":543, "parametername":"HandleEvent e", "parametertype":"org.jhotdraw.draw.HandleEvent", "parameterclass":193, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1693, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.handleRequestRemove(org.jhotdraw.draw.HandleEvent)", "isreturn":0, "sourcecode":"public void handleRequestRemove(HandleEvent e) {\r\n    selectionHandles.remove(e.getHandle());\r\n    e.getHandle().dispose();\r\n    invalidateHandles();\r\n    repaint(e.getInvalidatedArea());\r\n}"},
 {"id":544, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1683, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void attributeChanged(FigureEvent e) {\r\n    if ((e.getSource()) == (drawing)) {\r\n        if ((e.getAttribute().equals(AttributeKeys.CANVAS_HEIGHT)) || (e.getAttribute().equals(AttributeKeys.CANVAS_WIDTH))) {\r\n            validateViewTranslation();\r\n        }\r\n        repaint();\r\n    } else {\r\n        repaintDrawingArea(e.getInvalidatedArea());\r\n    }\r\n}"},
 {"id":545, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1687, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureHandlesChanged(FigureEvent e) {\r\n}"},
 {"id":546, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1686, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureChanged(FigureEvent e) {\r\n    repaintDrawingArea(e.getInvalidatedArea());\r\n}"},
 {"id":547, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1685, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureAdded(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureAdded(FigureEvent e) {\r\n}"},
 {"id":548, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1689, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureRemoved(FigureEvent e) {\r\n}"},
 {"id":549, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":154, "classname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler", "methodid":1690, "methodname":"org.jhotdraw.draw.DefaultDrawingView$EventHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureRequestRemove(FigureEvent e) {\r\n}"},
 {"id":550, "parametername":"Drawing newValue", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1668, "methodname":"org.jhotdraw.draw.DefaultDrawingView.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void setDrawing(Drawing newValue) {\r\n    Drawing oldValue = drawing;\r\n    if ((this.drawing) != null) {\r\n        this.drawing.removeCompositeFigureListener(eventHandler);\r\n        this.drawing.removeFigureListener(eventHandler);\r\n        clearSelection();\r\n    }\r\n    this.drawing = newValue;\r\n    if ((this.drawing) != null) {\r\n        this.drawing.addCompositeFigureListener(eventHandler);\r\n        this.drawing.addFigureListener(eventHandler);\r\n    }\r\n    invalidateDimension();\r\n    if ((getParent()) != null) {\r\n        getParent().validate();\r\n        if ((getParent()) instanceof JViewport) {\r\n            JViewport vp = ((JViewport) (getParent()));\r\n            Rectangle2D.Double r = getDrawingArea();\r\n            vp.setViewPosition(drawingToView(new Point2D.Double(Math.min(0, (-(r.x))), Math.min(0, (-(r.y))))));\r\n        }\r\n    }\r\n    firePropertyChange(DrawingView.DRAWING_PROPERTY, oldValue, newValue);\r\n    validateViewTranslation();\r\n    revalidate();\r\n    repaint();\r\n}"},
 {"id":551, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1613, "methodname":"org.jhotdraw.draw.DefaultDrawingView.addToSelection(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Adds a figure to the current selection.\r\n */\r\npublic void addToSelection(Figure figure) {\r\n    if (DefaultDrawingView.DEBUG) {\r\n        System.out.println((((\"DefaultDrawingView\" + \".addToSelection(\") + figure) + \")\"));\r\n    }\r\n    Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n    if (selectedFigures.add(figure)) {\r\n        figure.addFigureListener(handleInvalidator);\r\n        Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n        Rectangle invalidatedArea = null;\r\n        if ((handlesAreValid) && ((getEditor()) != null)) {\r\n            for (Handle h : figure.createHandles(detailLevel)) {\r\n                h.setView(this);\r\n                selectionHandles.add(h);\r\n                h.addHandleListener(eventHandler);\r\n                if (invalidatedArea == null) {\r\n                    invalidatedArea = h.getDrawingArea();\r\n                } else {\r\n                    invalidatedArea.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        fireSelectionChanged(oldSelection, newSelection);\r\n        if (invalidatedArea != null) {\r\n            repaint(invalidatedArea);\r\n        }\r\n    }\r\n}"},
 {"id":552, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1660, "methodname":"org.jhotdraw.draw.DefaultDrawingView.removeFromSelection(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Removes a figure from the selection.\r\n */\r\npublic void removeFromSelection(Figure figure) {\r\n    Set<Figure> oldSelection = new HashSet<Figure>(selectedFigures);\r\n    if (selectedFigures.remove(figure)) {\r\n        Set<Figure> newSelection = new HashSet<Figure>(selectedFigures);\r\n        invalidateHandles();\r\n        figure.removeFigureListener(handleInvalidator);\r\n        fireSelectionChanged(oldSelection, newSelection);\r\n        repaint();\r\n    }\r\n}"},
 {"id":553, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1675, "methodname":"org.jhotdraw.draw.DefaultDrawingView.toggleSelection(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * If a figure isnt selected it is added to the selection.\r\n * Otherwise it is removed from the selection.\r\n */\r\npublic void toggleSelection(Figure figure) {\r\n    if (selectedFigures.contains(figure)) {\r\n        removeFromSelection(figure);\r\n    } else {\r\n        addToSelection(figure);\r\n    }\r\n}"},
 {"id":554, "parametername":"Figure checkFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1656, "methodname":"org.jhotdraw.draw.DefaultDrawingView.isFigureSelected(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Test whether a given figure is selected.\r\n */\r\npublic boolean isFigureSelected(Figure checkFigure) {\r\n    return selectedFigures.contains(checkFigure);\r\n}"},
 {"id":555, "parametername":"Handle master", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1633, "methodname":"org.jhotdraw.draw.DefaultDrawingView.getCompatibleHandles(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"/**\r\n * Gets compatible handles.\r\n *\r\n * @return A collection containing the handle and all compatible handles.\r\n */\r\npublic Collection<Handle> getCompatibleHandles(Handle master) {\r\n    validateHandles();\r\n    HashSet<Figure> owners = new HashSet<Figure>();\r\n    LinkedList<Handle> compatibleHandles = new LinkedList<Handle>();\r\n    owners.add(master.getOwner());\r\n    compatibleHandles.add(master);\r\n    for (Handle handle : getSelectionHandles()) {\r\n        if ((!(owners.contains(handle.getOwner()))) && (handle.isCombinableWith(master))) {\r\n            owners.add(handle.getOwner());\r\n            compatibleHandles.add(handle);\r\n        }\r\n    }\r\n    return compatibleHandles;\r\n}"},
 {"id":556, "parametername":"FigureSelectionListener fsl", "parametertype":"org.jhotdraw.draw.FigureSelectionListener", "parameterclass":180, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1610, "methodname":"org.jhotdraw.draw.DefaultDrawingView.addFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)", "isreturn":0, "sourcecode":"public void addFigureSelectionListener(FigureSelectionListener fsl) {\r\n    listenerList.add(FigureSelectionListener.class, fsl);\r\n}"},
 {"id":557, "parametername":"FigureSelectionListener fsl", "parametertype":"org.jhotdraw.draw.FigureSelectionListener", "parameterclass":180, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1659, "methodname":"org.jhotdraw.draw.DefaultDrawingView.removeFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)", "isreturn":0, "sourcecode":"public void removeFigureSelectionListener(FigureSelectionListener fsl) {\r\n    listenerList.remove(FigureSelectionListener.class, fsl);\r\n}"},
 {"id":558, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1661, "methodname":"org.jhotdraw.draw.DefaultDrawingView.removeNotify(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void removeNotify(DrawingEditor editor) {\r\n    this.editor = null;\r\n    repaint();\r\n}"},
 {"id":559, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1611, "methodname":"org.jhotdraw.draw.DefaultDrawingView.addNotify(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void addNotify(DrawingEditor editor) {\r\n    DrawingEditor oldValue = editor;\r\n    this.editor = editor;\r\n    firePropertyChange(\"editor\", oldValue, editor);\r\n    invalidateHandles();\r\n    repaint();\r\n}"},
 {"id":560, "parametername":"Constrainer newValue", "parametertype":"org.jhotdraw.draw.Constrainer", "parameterclass":147, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1674, "methodname":"org.jhotdraw.draw.DefaultDrawingView.setVisibleConstrainer(org.jhotdraw.draw.Constrainer)", "isreturn":0, "sourcecode":"public void setVisibleConstrainer(Constrainer newValue) {\r\n    Constrainer oldValue = visibleConstrainer;\r\n    visibleConstrainer = newValue;\r\n    firePropertyChange(DrawingView.VISIBLE_CONSTRAINER_PROPERTY, oldValue, newValue);\r\n}"},
 {"id":561, "parametername":"Constrainer newValue", "parametertype":"org.jhotdraw.draw.Constrainer", "parameterclass":147, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1672, "methodname":"org.jhotdraw.draw.DefaultDrawingView.setInvisibleConstrainer(org.jhotdraw.draw.Constrainer)", "isreturn":0, "sourcecode":"public void setInvisibleConstrainer(Constrainer newValue) {\r\n    Constrainer oldValue = invisibleConstrainer;\r\n    invisibleConstrainer = newValue;\r\n    firePropertyChange(DrawingView.INVISIBLE_CONSTRAINER_PROPERTY, oldValue, newValue);\r\n}"},
 {"id":562, "parametername":"Handle newValue", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":155, "classname":"org.jhotdraw.draw.DefaultDrawingView", "methodid":1665, "methodname":"org.jhotdraw.draw.DefaultDrawingView.setActiveHandle(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"// End of variables declaration//GEN-END:variables\r\npublic void setActiveHandle(Handle newValue) {\r\n    Handle oldValue = activeHandle;\r\n    if (oldValue != null) {\r\n        repaint(oldValue.getDrawingArea());\r\n    }\r\n    activeHandle = newValue;\r\n    if (newValue != null) {\r\n        repaint(newValue.getDrawingArea());\r\n    }\r\n    firePropertyChange(DrawingView.ACTIVE_HANDLE_PROPERTY, oldValue, newValue);\r\n}"},
 {"id":563, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":159, "classname":"org.jhotdraw.draw.DefaultDrawingViewTransferHandler", "methodid":1712, "methodname":"org.jhotdraw.draw.DefaultDrawingViewTransferHandler.createTransferable(org.jhotdraw.draw.DrawingView,java.util.Set)", "isreturn":0, "sourcecode":"protected Transferable createTransferable(DrawingView view, Set<Figure> transferFigures) {\r\n    if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n        System.out.println(((this) + \".createTransferable\"));\r\n    }\r\n    Transferable retValue;\r\n    Drawing drawing = view.getDrawing();\r\n    if (((drawing.getOutputFormats()) == null) || ((drawing.getOutputFormats().size()) == 0)) {\r\n        retValue = null;\r\n    } else {\r\n        List<Figure> toBeCopied = drawing.sort(transferFigures);\r\n        if ((toBeCopied.size()) > 0) {\r\n            try {\r\n                CompositeTransferable transfer = new CompositeTransferable();\r\n                for (OutputFormat format : drawing.getOutputFormats()) {\r\n                    Transferable t = format.createTransferable(drawing, toBeCopied, view.getScaleFactor());\r\n                    if (!(transfer.isDataFlavorSupported(t.getTransferDataFlavors()[0]))) {\r\n                        transfer.add(t);\r\n                    }\r\n                }\r\n                retValue = transfer;\r\n            } catch (IOException e) {\r\n                if (DefaultDrawingViewTransferHandler.DEBUG) {\r\n                    e.printStackTrace();\r\n                }\r\n                retValue = null;\r\n            }\r\n        } else {\r\n            retValue = null;\r\n        }\r\n    }\r\n    return retValue;\r\n}"},
 {"id":564, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":160, "classname":"org.jhotdraw.draw.DefaultHandleTracker", "methodid":1731, "methodname":"org.jhotdraw.draw.DefaultHandleTracker.-init-(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultHandleTracker(Handle handle) {\r\n    masterHandle = handle;\r\n    multicaster = new HandleMulticaster(handle);\r\n}"},
 {"id":565, "parametername":"Handle master", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":160, "classname":"org.jhotdraw.draw.DefaultHandleTracker", "methodid":1732, "methodname":"org.jhotdraw.draw.DefaultHandleTracker.-init-(org.jhotdraw.draw.Handle,java.util.Collection)", "isreturn":0, "sourcecode":"public DefaultHandleTracker(Handle master, Collection<Handle> handles) {\r\n    masterHandle = master;\r\n    multicaster = new HandleMulticaster(handles);\r\n}"},
 {"id":566, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":160, "classname":"org.jhotdraw.draw.DefaultHandleTracker", "methodid":1734, "methodname":"org.jhotdraw.draw.DefaultHandleTracker.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/* FIXME - The handle should draw itself in selected mode\npublic void draw(Graphics2D g) {\ng.setColor(Color.RED);\ng.draw(\nmasterHandle.getBounds()\n);\n}\n */\r\n@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    getView().setCursor(masterHandle.getCursor());\r\n    getView().setActiveHandle(masterHandle);\r\n    clearHoverHandles();\r\n}"},
 {"id":567, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":160, "classname":"org.jhotdraw.draw.DefaultHandleTracker", "methodid":1736, "methodname":"org.jhotdraw.draw.DefaultHandleTracker.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    getView().setCursor(Cursor.getDefaultCursor());\r\n    getView().setActiveHandle(null);\r\n    clearHoverHandles();\r\n}"},
 {"id":568, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":160, "classname":"org.jhotdraw.draw.DefaultHandleTracker", "methodid":1749, "methodname":"org.jhotdraw.draw.DefaultHandleTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if (((hoverFigure) != null) && (hoverFigure.isSelectable())) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if ((hoverFigure) != null) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}"},
 {"id":569, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":160, "classname":"org.jhotdraw.draw.DefaultHandleTracker", "methodid":1749, "methodname":"org.jhotdraw.draw.DefaultHandleTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if (((hoverFigure) != null) && (hoverFigure.isSelectable())) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if ((hoverFigure) != null) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}"},
 {"id":570, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":160, "classname":"org.jhotdraw.draw.DefaultHandleTracker", "methodid":1748, "methodname":"org.jhotdraw.draw.DefaultHandleTracker.setHandles(org.jhotdraw.draw.Handle,java.util.Collection)", "isreturn":0, "sourcecode":"public void setHandles(Handle handle, Collection<Handle> compatibleHandles) {\r\n    masterHandle = handle;\r\n    multicaster = new HandleMulticaster(handle);\r\n}"},
 {"id":571, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":161, "classname":"org.jhotdraw.draw.DefaultSelectAreaTracker", "methodid":1762, "methodname":"org.jhotdraw.draw.DefaultSelectAreaTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if ((hoverFigure) != null) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if (((hoverFigure) != null) && (f.isSelectable())) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}"},
 {"id":572, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":161, "classname":"org.jhotdraw.draw.DefaultSelectAreaTracker", "methodid":1762, "methodname":"org.jhotdraw.draw.DefaultSelectAreaTracker.updateHoverHandles(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected void updateHoverHandles(DrawingView view, Figure f) {\r\n    if (f != (hoverFigure)) {\r\n        Rectangle r = null;\r\n        if ((hoverFigure) != null) {\r\n            for (Handle h : hoverHandles) {\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n                h.setView(null);\r\n                h.dispose();\r\n            }\r\n            hoverHandles.clear();\r\n        }\r\n        hoverFigure = f;\r\n        if (((hoverFigure) != null) && (f.isSelectable())) {\r\n            hoverHandles.addAll(hoverFigure.createHandles((-1)));\r\n            for (Handle h : hoverHandles) {\r\n                h.setView(view);\r\n                if (r == null) {\r\n                    r = h.getDrawingArea();\r\n                } else {\r\n                    r.add(h.getDrawingArea());\r\n                }\r\n            }\r\n        }\r\n        if (r != null) {\r\n            r.grow(1, 1);\r\n            fireAreaInvalidated(r);\r\n        }\r\n    }\r\n}"},
 {"id":573, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":161, "classname":"org.jhotdraw.draw.DefaultSelectAreaTracker", "methodid":1751, "methodname":"org.jhotdraw.draw.DefaultSelectAreaTracker.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    clearHoverHandles();\r\n}"},
 {"id":574, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":161, "classname":"org.jhotdraw.draw.DefaultSelectAreaTracker", "methodid":1754, "methodname":"org.jhotdraw.draw.DefaultSelectAreaTracker.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    clearHoverHandles();\r\n}"},
 {"id":575, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":162, "classname":"org.jhotdraw.draw.DelegationSelectionTool", "methodid":1775, "methodname":"org.jhotdraw.draw.DelegationSelectionTool.showPopupMenu(org.jhotdraw.draw.Figure,java.awt.Point,java.awt.Component)", "isreturn":0, "sourcecode":"protected void showPopupMenu(Figure figure, Point p, Component c) {\r\n    if (DelegationSelectionTool.DEBUG) {\r\n        System.out.println((\"DelegationSelectionTool.showPopupMenu \" + figure));\r\n    }\r\n    JPopupMenu menu = new JPopupMenu();\r\n    popupMenu = menu;\r\n    JMenu submenu = null;\r\n    String submenuName = null;\r\n    LinkedList<Action> popupActions = new LinkedList<Action>();\r\n    if (figure != null) {\r\n        LinkedList<Action> figureActions = new LinkedList<Action>(figure.getActions(viewToDrawing(p)));\r\n        if (((popupActions.size()) != 0) && ((figureActions.size()) != 0)) {\r\n            popupActions.add(null);\r\n        }\r\n        popupActions.addAll(figureActions);\r\n        if (((popupActions.size()) != 0) && ((selectionActions.size()) != 0)) {\r\n            popupActions.add(null);\r\n        }\r\n        popupActions.addAll(selectionActions);\r\n    }\r\n    if (((popupActions.size()) != 0) && ((drawingActions.size()) != 0)) {\r\n        popupActions.add(null);\r\n    }\r\n    popupActions.addAll(drawingActions);\r\n    HashMap<Object, ButtonGroup> buttonGroups = new HashMap<Object, ButtonGroup>();\r\n    for (Action a : popupActions) {\r\n        if ((a != null) && ((a.getValue(Actions.SUBMENU_KEY)) != null)) {\r\n            if ((submenuName == null) || (!(submenuName.equals(a.getValue(Actions.SUBMENU_KEY))))) {\r\n                submenuName = ((String) (a.getValue(Actions.SUBMENU_KEY)));\r\n                submenu = new JMenu(submenuName);\r\n                menu.add(submenu);\r\n            }\r\n        } else {\r\n            submenuName = null;\r\n            submenu = null;\r\n        }\r\n        if (a == null) {\r\n            if (submenu != null) {\r\n                submenu.addSeparator();\r\n            } else {\r\n                menu.addSeparator();\r\n            }\r\n        } else {\r\n            AbstractButton button;\r\n            if ((a.getValue(Actions.BUTTON_GROUP_KEY)) != null) {\r\n                ButtonGroup bg = buttonGroups.get(a.getValue(Actions.BUTTON_GROUP_KEY));\r\n                if (bg == null) {\r\n                    bg = new ButtonGroup();\r\n                    buttonGroups.put(a.getValue(Actions.BUTTON_GROUP_KEY), bg);\r\n                }\r\n                button = new JRadioButtonMenuItem(a);\r\n                bg.add(button);\r\n                button.setSelected(((a.getValue(Actions.SELECTED_KEY)) == (Boolean.TRUE)));\r\n            } else\r\n                if ((a.getValue(Actions.SELECTED_KEY)) != null) {\r\n                    button = new JCheckBoxMenuItem(a);\r\n                    button.setSelected(((a.getValue(Actions.SELECTED_KEY)) == (Boolean.TRUE)));\r\n                } else {\r\n                    button = new JMenuItem(a);\r\n                }\r\n\r\n            if (submenu != null) {\r\n                submenu.add(button);\r\n            } else {\r\n                menu.add(button);\r\n            }\r\n        }\r\n    }\r\n    menu.show(c, p.x, p.y);\r\n}"},
 {"id":576, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":162, "classname":"org.jhotdraw.draw.DelegationSelectionTool", "methodid":1765, "methodname":"org.jhotdraw.draw.DelegationSelectionTool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic String getToolTipText(DrawingView view, MouseEvent evt) {\r\n    Handle handle = view.findHandle(evt.getPoint());\r\n    if (handle != null) {\r\n        return handle.getToolTipText(evt.getPoint());\r\n    }\r\n    Figure figure = view.findFigure(evt.getPoint());\r\n    if (figure != null) {\r\n        return figure.getToolTipText(viewToDrawing(evt.getPoint()));\r\n    }\r\n    return null;\r\n}"},
 {"id":577, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":163, "classname":"org.jhotdraw.draw.DiamondFigure", "methodid":1783, "methodname":"org.jhotdraw.draw.DiamondFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopDiamondConnector(this);\r\n}"},
 {"id":578, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":163, "classname":"org.jhotdraw.draw.DiamondFigure", "methodid":1783, "methodname":"org.jhotdraw.draw.DiamondFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n/**\r\n * Returns the Figures connector for the specified location.\r\n * By default a ChopDiamondConnector is returned.\r\n *\r\n * @see ChopDiamondConnector\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopDiamondConnector(this);\r\n}"},
 {"id":579, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":163, "classname":"org.jhotdraw.draw.DiamondFigure", "methodid":1782, "methodname":"org.jhotdraw.draw.DiamondFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopDiamondConnector(this);\r\n}"},
 {"id":580, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":163, "classname":"org.jhotdraw.draw.DiamondFigure", "methodid":1782, "methodname":"org.jhotdraw.draw.DiamondFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    return new ChopDiamondConnector(this);\r\n}"},
 {"id":581, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":165, "classname":"org.jhotdraw.draw.DnDTracker", "methodid":1793, "methodname":"org.jhotdraw.draw.DnDTracker.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public DnDTracker(Figure figure) {\r\n    anchorFigure = figure;\r\n}"},
 {"id":582, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":165, "classname":"org.jhotdraw.draw.DnDTracker", "methodid":1798, "methodname":"org.jhotdraw.draw.DnDTracker.setDraggedFigure(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void setDraggedFigure(Figure f) {\r\n    anchorFigure = f;\r\n}"},
 {"id":583, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":166, "classname":"org.jhotdraw.draw.DragHandle", "methodid":1799, "methodname":"org.jhotdraw.draw.DragHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DragHandle(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":584, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":167, "classname":"org.jhotdraw.draw.DragTracker", "methodid":1807, "methodname":"org.jhotdraw.draw.DragTracker.setDraggedFigure(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void setDraggedFigure(Figure f);"},
 {"id":585, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1809, "methodname":"org.jhotdraw.draw.Drawing.add(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Adds a figure to the drawing.\r\n * The drawing sends an {@code addNotify} message to the figure\r\n * after it has been added.\r\n *\r\n * @see Figure#addNotify\r\n * @param figure\r\n * \t\tto be added to the drawing\r\n */\r\nboolean add(Figure figure);"},
 {"id":586, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1808, "methodname":"org.jhotdraw.draw.Drawing.add(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Adds a figure to the drawing.\r\n * The drawing sends an {@code addNotify} message to the figure\r\n * after it has been added.\r\n *\r\n * @see Figure#addNotify\r\n * @param index\r\n * \t\tThe z-index of the figure.\r\n * @param figure\r\n * \t\tto be added to the drawing\r\n */\r\nvoid add(int index, Figure figure);"},
 {"id":587, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1839, "methodname":"org.jhotdraw.draw.Drawing.remove(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Removes a figure from the drawing.\r\n * The drawing sends a {@code removeNotify} message to the figure\r\n * before it is removed.\r\n *\r\n * @see Figure#removeNotify\r\n * @param figure\r\n * \t\tthat is part of the drawing and should be removed\r\n */\r\nboolean remove(Figure figure);"},
 {"id":588, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1818, "methodname":"org.jhotdraw.draw.Drawing.basicRemove(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Removes a figure temporarily from the drawing.\r\n *\r\n * @see #basicAdd(Figure)\r\n * @param figure\r\n * \t\tthat is part of the drawing and should be removed\r\n */\r\nint basicRemove(Figure figure);"},
 {"id":589, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1816, "methodname":"org.jhotdraw.draw.Drawing.basicAdd(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Reinserts a figure which was temporarily removed using basicRemove.\r\n * <p>\r\n * This is a convenience method for calling\r\n * {@code basicAdd(size(), figure)}.\r\n *\r\n * @param figure\r\n * \t\tthat is part of the drawing and should be removed\r\n * @see #basicRemove(Figure)\r\n */\r\nvoid basicAdd(Figure figure);"},
 {"id":590, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1815, "methodname":"org.jhotdraw.draw.Drawing.basicAdd(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Reinserts a figure which was temporarily removed using basicRemove.\r\n *\r\n * @see #basicRemove(Figure)\r\n * @param figure\r\n * \t\tthat is part of the drawing and should be removed\r\n */\r\nvoid basicAdd(int index, Figure figure);"},
 {"id":591, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1838, "methodname":"org.jhotdraw.draw.Drawing.indexOf(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the index of the specified figure.\r\n *\r\n * Returns -1 if the Figure is not directly contained in this Drawing, for\r\n * example if the Figure is a child of a CompositeFigure.\r\n */\r\nint indexOf(Figure figure);"},
 {"id":592, "parametername":"Figure ignore", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1826, "methodname":"org.jhotdraw.draw.Drawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Finds a top level Figure. Use this call for hit detection that\r\n * should not descend into the figures children.\r\n */\r\nFigure findFigureExcept(Point2D.Double p, Figure ignore);"},
 {"id":593, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1826, "methodname":"org.jhotdraw.draw.Drawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"/**\r\n * Finds a top level Figure. Use this call for hit detection that\r\n * should not descend into the figures children.\r\n */\r\nFigure findFigureExcept(Point2D.Double p, Figure ignore);"},
 {"id":594, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1824, "methodname":"org.jhotdraw.draw.Drawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Finds a top level Figure which is behind the specified Figure.\r\n */\r\nFigure findFigureBehind(Point2D.Double p, Figure figure);"},
 {"id":595, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1824, "methodname":"org.jhotdraw.draw.Drawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"/**\r\n * Finds a top level Figure which is behind the specified Figure.\r\n */\r\nFigure findFigureBehind(Point2D.Double p, Figure figure);"},
 {"id":596, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1842, "methodname":"org.jhotdraw.draw.Drawing.sendToBack(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Sends a figure to the back of the drawing.\r\n *\r\n * @param figure\r\n * \t\tthat is part of the drawing\r\n */\r\nvoid sendToBack(Figure figure);"},
 {"id":597, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1820, "methodname":"org.jhotdraw.draw.Drawing.bringToFront(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Brings a figure to the front.\r\n *\r\n * @param figure\r\n * \t\tthat is part of the drawing\r\n */\r\nvoid bringToFront(Figure figure);"},
 {"id":598, "parametername":"InputFormat format", "parametertype":"org.jhotdraw.draw.InputFormat", "parameterclass":203, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1812, "methodname":"org.jhotdraw.draw.Drawing.addInputFormat(org.jhotdraw.draw.InputFormat)", "isreturn":0, "sourcecode":"/**\r\n * Adds an input format to the drawing.\r\n */\r\nvoid addInputFormat(InputFormat format);"},
 {"id":599, "parametername":"OutputFormat format", "parametertype":"org.jhotdraw.draw.OutputFormat", "parameterclass":221, "classid":168, "classname":"org.jhotdraw.draw.Drawing", "methodid":1813, "methodname":"org.jhotdraw.draw.Drawing.addOutputFormat(org.jhotdraw.draw.OutputFormat)", "isreturn":0, "sourcecode":"/**\r\n * Adds an output format to the drawing.\r\n */\r\nvoid addOutputFormat(OutputFormat format);"},
 {"id":600, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1847, "methodname":"org.jhotdraw.draw.DrawingEditor.add(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Gets the editors current drawing.\r\n * /\r\n * Drawing getDrawing();\r\n * /**\r\n * Sets the editors current drawing.\r\n * /\r\n * void setDrawing(Drawing drawing);\r\n */\r\n/**\r\n * Adds a drawing view to the editor.\r\n * The editor invokes addNotify on the view, and it registers its tool\r\n * as an event listener on the view.\r\n */\r\nvoid add(DrawingView view);"},
 {"id":601, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1858, "methodname":"org.jhotdraw.draw.DrawingEditor.remove(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Removes a drawing view from the editor.\r\n * The editor invokes removeNotify on the view, and it unregisters its tool\r\n * on the view.\r\n */\r\nvoid remove(DrawingView view);"},
 {"id":602, "parametername":"DrawingView newValue", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1860, "methodname":"org.jhotdraw.draw.DrawingEditor.setActiveView(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Sets the editors active drawing view.\r\n * This can be set to null, if the editor has no views.\r\n */\r\nvoid setActiveView(DrawingView newValue);"},
 {"id":603, "parametername":"Tool t", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1865, "methodname":"org.jhotdraw.draw.DrawingEditor.setTool(org.jhotdraw.draw.Tool)", "isreturn":0, "sourcecode":"/**\r\n * Calls deactivate on the previously active tool of this drawing editor.\r\n * Calls activate on the provided tool.\r\n * Forwards all mouse, mouse moation and keyboard events that occur on the\r\n * DrawingView to the provided tool.\r\n * <p>\r\n * This is a bound property.\r\n */\r\nvoid setTool(Tool t);"},
 {"id":604, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1862, "methodname":"org.jhotdraw.draw.DrawingEditor.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Sets a default attribute of the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n */\r\npublic <T> void setDefaultAttribute(AttributeKey<T> key, T value);"},
 {"id":605, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1852, "methodname":"org.jhotdraw.draw.DrawingEditor.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Gets a default attribute from the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n */\r\npublic <T> T getDefaultAttribute(AttributeKey<T> key);"},
 {"id":606, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1849, "methodname":"org.jhotdraw.draw.DrawingEditor.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Applies the default attributes to the specified figure.\r\n */\r\npublic void applyDefaultAttributesTo(Figure f);"},
 {"id":607, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1864, "methodname":"org.jhotdraw.draw.DrawingEditor.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Sets a handle attribute of the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n *\r\n * @param key\r\n * \t\tAttributeKey.\r\n * @param value\r\n * \t\tAttribute value.\r\n */\r\npublic <T> void setHandleAttribute(AttributeKey<T> key, T value);"},
 {"id":608, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":169, "classname":"org.jhotdraw.draw.DrawingEditor", "methodid":1855, "methodname":"org.jhotdraw.draw.DrawingEditor.getHandleAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Gets a handle attribute from the editor.\r\n * The default attribute will be used by creation tools, to create a new\r\n * figure.\r\n *\r\n * @param key\r\n * \t\tAttributeKey.\r\n * @return If the handle attribute has been set, returns the previously\r\nset value. If the handle attribute has not been set, returns key.getDefaultValue().\r\n */\r\npublic <T> T getHandleAttribute(AttributeKey<T> key);"},
 {"id":609, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":170, "classname":"org.jhotdraw.draw.DrawingPageable", "methodid":1866, "methodname":"org.jhotdraw.draw.DrawingPageable.-init-(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingPageable(Drawing drawing) {\r\n    this.drawing = drawing;\r\n    Paper paper = new Paper();\r\n    pageFormat = new PageFormat();\r\n    pageFormat.setPaper(paper);\r\n}"},
 {"id":610, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1917, "methodname":"org.jhotdraw.draw.DrawingView.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Sets and installs another drawing in the view.\r\n * This is a bound property.\r\n */\r\npublic void setDrawing(Drawing d);"},
 {"id":611, "parametername":"Figure checkFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1903, "methodname":"org.jhotdraw.draw.DrawingView.isFigureSelected(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Test whether a given figure is selected.\r\n */\r\npublic boolean isFigureSelected(Figure checkFigure);"},
 {"id":612, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1880, "methodname":"org.jhotdraw.draw.DrawingView.addToSelection(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Adds a figure to the current selection.\r\n */\r\npublic void addToSelection(Figure figure);"},
 {"id":613, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1905, "methodname":"org.jhotdraw.draw.DrawingView.removeFromSelection(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Removes a figure from the selection.\r\n */\r\npublic void removeFromSelection(Figure figure);"},
 {"id":614, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1923, "methodname":"org.jhotdraw.draw.DrawingView.toggleSelection(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * If a figure isnt selected it is added to the selection.\r\n * Otherwise it is removed from the selection.\r\n */\r\npublic void toggleSelection(Figure figure);"},
 {"id":615, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1889, "methodname":"org.jhotdraw.draw.DrawingView.getCompatibleHandles(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"/**\r\n * Gets compatible handles.\r\n *\r\n * @return A collection containing the handle and all compatible handles.\r\n */\r\npublic Collection<Handle> getCompatibleHandles(Handle handle);"},
 {"id":616, "parametername":"Handle newValue", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1914, "methodname":"org.jhotdraw.draw.DrawingView.setActiveHandle(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"/**\r\n * Sets the active handle.\r\n */\r\npublic void setActiveHandle(Handle newValue);"},
 {"id":617, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1877, "methodname":"org.jhotdraw.draw.DrawingView.addNotify(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Informs the view that it has been added to the specified editor.\r\n * The view must draw the tool of the editor, if getActiveView() of the\r\n * editor returns the view.\r\n */\r\npublic void addNotify(DrawingEditor editor);"},
 {"id":618, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1909, "methodname":"org.jhotdraw.draw.DrawingView.removeNotify(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Informs the view that it has been removed from the specified editor.\r\n * The view must not draw the tool from the editor anymore.\r\n */\r\npublic void removeNotify(DrawingEditor editor);"},
 {"id":619, "parametername":"FigureSelectionListener fsl", "parametertype":"org.jhotdraw.draw.FigureSelectionListener", "parameterclass":180, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1873, "methodname":"org.jhotdraw.draw.DrawingView.addFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)", "isreturn":0, "sourcecode":"/**\r\n * Add a listener for selection changes in this DrawingView.\r\n *\r\n * @param fsl\r\n * \t\tjhotdraw.framework.FigureSelectionListener\r\n */\r\npublic void addFigureSelectionListener(FigureSelectionListener fsl);"},
 {"id":620, "parametername":"FigureSelectionListener fsl", "parametertype":"org.jhotdraw.draw.FigureSelectionListener", "parameterclass":180, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1904, "methodname":"org.jhotdraw.draw.DrawingView.removeFigureSelectionListener(org.jhotdraw.draw.FigureSelectionListener)", "isreturn":0, "sourcecode":"/**\r\n * Remove a listener for selection changes in this DrawingView.\r\n *\r\n * @param fsl\r\n * \t\tjhotdraw.framework.FigureSelectionListener\r\n */\r\npublic void removeFigureSelectionListener(FigureSelectionListener fsl);"},
 {"id":621, "parametername":"Constrainer constrainer", "parametertype":"org.jhotdraw.draw.Constrainer", "parameterclass":147, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1922, "methodname":"org.jhotdraw.draw.DrawingView.setVisibleConstrainer(org.jhotdraw.draw.Constrainer)", "isreturn":0, "sourcecode":"/**\r\n * Sets the editors constrainer for this view, for use, when the\r\n * visible constrainer is turned on.\r\n * This is a bound property.\r\n */\r\npublic void setVisibleConstrainer(Constrainer constrainer);"},
 {"id":622, "parametername":"Constrainer constrainer", "parametertype":"org.jhotdraw.draw.Constrainer", "parameterclass":147, "classid":171, "classname":"org.jhotdraw.draw.DrawingView", "methodid":1920, "methodname":"org.jhotdraw.draw.DrawingView.setInvisibleConstrainer(org.jhotdraw.draw.Constrainer)", "isreturn":0, "sourcecode":"/**\r\n * Sets the editors constrainer for this view, for use, when the\r\n * visible constrainer is turned off.\r\n * This is a bound property.\r\n */\r\npublic void setInvisibleConstrainer(Constrainer constrainer);"},
 {"id":623, "parametername":"BezierPath path", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":172, "classname":"org.jhotdraw.draw.ElbowLiner", "methodid":1929, "methodname":"org.jhotdraw.draw.ElbowLiner.createHandles(org.jhotdraw.geom.BezierPath)", "isreturn":0, "sourcecode":"public Collection<Handle> createHandles(BezierPath path) {\r\n    return null;\r\n}"},
 {"id":624, "parametername":"ConnectionFigure figure", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":172, "classname":"org.jhotdraw.draw.ElbowLiner", "methodid":1930, "methodname":"org.jhotdraw.draw.ElbowLiner.lineout(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public void lineout(ConnectionFigure figure) {\r\n    BezierPath path = ((LineConnectionFigure) (figure)).getBezierPath();\r\n    Connector start = figure.getStartConnector();\r\n    Connector end = figure.getEndConnector();\r\n    if (((start == null) || (end == null)) || (path == null)) {\r\n        return;\r\n    }\r\n    // Special treatment if the connection connects the same figure\r\n    if ((figure.getStartFigure()) == (figure.getEndFigure())) {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 5) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 5) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            soutcode = Geom.outcode(sb, eb);\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            eoutcode = Geom.outcode(sb, eb);\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        switch (soutcode) {\r\n            case Geom.OUT_TOP :\r\n                eoutcode = Geom.OUT_LEFT;\r\n                break;\r\n            case Geom.OUT_RIGHT :\r\n                eoutcode = Geom.OUT_TOP;\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n                eoutcode = Geom.OUT_RIGHT;\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                eoutcode = Geom.OUT_BOTTOM;\r\n                break;\r\n            default :\r\n                eoutcode = Geom.OUT_TOP;\r\n                soutcode = Geom.OUT_RIGHT;\r\n                break;\r\n        }\r\n        path.get(1).moveTo(((sp.x) + (shoulderSize)), sp.y);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (shoulderSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (shoulderSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (shoulderSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (shoulderSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(3).moveTo(((ep.x) + (shoulderSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(3).moveTo(((ep.x) - (shoulderSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) + (shoulderSize)));\r\n                } else {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) - (shoulderSize)));\r\n                }\r\n\r\n\r\n        switch (soutcode) {\r\n            case Geom.OUT_RIGHT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_TOP :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n            default :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n        }\r\n    } else {\r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        path.clear();\r\n        path.add(new BezierPath.Node(sp.x, sp.y));\r\n        if (((sp.x) == (ep.x)) || ((sp.y) == (ep.y))) {\r\n            path.add(new BezierPath.Node(ep.x, ep.y));\r\n        } else {\r\n            Rectangle2D.Double sb = start.getBounds();\r\n            sb.x += 5.0;\r\n            sb.y += 5.0;\r\n            sb.width -= 10.0;\r\n            sb.height -= 10.0;\r\n            Rectangle2D.Double eb = end.getBounds();\r\n            eb.x += 5.0;\r\n            eb.y += 5.0;\r\n            eb.width -= 10.0;\r\n            eb.height -= 10.0;\r\n            int soutcode = sb.outcode(sp);\r\n            if (soutcode == 0) {\r\n                soutcode = Geom.outcode(sb, eb);\r\n            }\r\n            int eoutcode = eb.outcode(ep);\r\n            if (eoutcode == 0) {\r\n                eoutcode = Geom.outcode(eb, sb);\r\n            }\r\n            if (((soutcode & ((Geom.OUT_TOP) | (Geom.OUT_BOTTOM))) != 0) && ((eoutcode & ((Geom.OUT_TOP) | (Geom.OUT_BOTTOM))) != 0)) {\r\n                path.add(new BezierPath.Node(sp.x, (((sp.y) + (ep.y)) / 2)));\r\n                path.add(new BezierPath.Node(ep.x, (((sp.y) + (ep.y)) / 2)));\r\n            } else\r\n                if (((soutcode & ((Geom.OUT_LEFT) | (Geom.OUT_RIGHT))) != 0) && ((eoutcode & ((Geom.OUT_LEFT) | (Geom.OUT_RIGHT))) != 0)) {\r\n                    path.add(new BezierPath.Node((((sp.x) + (ep.x)) / 2), sp.y));\r\n                    path.add(new BezierPath.Node((((sp.x) + (ep.x)) / 2), ep.y));\r\n                } else\r\n                    if ((soutcode == (Geom.OUT_BOTTOM)) && (eoutcode == (Geom.OUT_LEFT))) {\r\n                        path.add(new BezierPath.Node(sp.x, ep.y));\r\n                    } else {\r\n                        path.add(new BezierPath.Node(ep.x, sp.y));\r\n                    }\r\n\r\n\r\n            path.add(new BezierPath.Node(ep.x, ep.y));\r\n        }\r\n    }\r\n    // Ensure all path nodes are straight\r\n    for (BezierPath.Node node : path) {\r\n        node.setMask(BezierPath.C0_MASK);\r\n    }\r\n    path.invalidatePath();\r\n}"},
 {"id":625, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":172, "classname":"org.jhotdraw.draw.ElbowLiner", "methodid":1931, "methodname":"org.jhotdraw.draw.ElbowLiner.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) {\r\n}"},
 {"id":626, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":172, "classname":"org.jhotdraw.draw.ElbowLiner", "methodid":1932, "methodname":"org.jhotdraw.draw.ElbowLiner.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) {\r\n}"},
 {"id":627, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":173, "classname":"org.jhotdraw.draw.EllipseFigure", "methodid":1940, "methodname":"org.jhotdraw.draw.EllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopEllipseConnector(this);\r\n}"},
 {"id":628, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":173, "classname":"org.jhotdraw.draw.EllipseFigure", "methodid":1940, "methodname":"org.jhotdraw.draw.EllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\n@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopEllipseConnector(this);\r\n}"},
 {"id":629, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":173, "classname":"org.jhotdraw.draw.EllipseFigure", "methodid":1939, "methodname":"org.jhotdraw.draw.EllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopEllipseConnector(this);\r\n}"},
 {"id":630, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":173, "classname":"org.jhotdraw.draw.EllipseFigure", "methodid":1939, "methodname":"org.jhotdraw.draw.EllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopEllipseConnector(this);\r\n}"},
 {"id":631, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1987, "methodname":"org.jhotdraw.draw.Figure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"// ATTRIBUTES\r\n/**\r\n * Sets an attribute of the figure and calls attributeChanged on all\r\n * registered FigureListeners.\r\n * <p>\r\n * For efficiency reasons, the drawing is not automatically repainted.\r\n * If you want the drawing to be repainted when the attribute is changed,\r\n * you can either use {@code key.set(figure, value);} or\r\n * {@code figure.willChange(); figure.setAttribute(key, value);\r\n * figure.changed();}.\r\n *\r\n * @see AttributeKey#set\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T value);"},
 {"id":632, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1959, "methodname":"org.jhotdraw.draw.Figure.getAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Gets an attribute from the Figure.\r\n *\r\n * @see AttributeKey#get\r\n * @return Returns the attribute value. If the Figure does not have an\r\nattribute with the specified key, returns key.getDefaultValue().\r\n */\r\npublic <T> T getAttribute(AttributeKey<T> key);"},
 {"id":633, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1956, "methodname":"org.jhotdraw.draw.Figure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Gets a connector for this figure at the given location.\r\n * A figure can have different connectors at different locations.\r\n *\r\n * @param p\r\n * \t\tthe location of the connector.\r\n * @param prototype\r\n * \t\tThe prototype used to create a connection or null if\r\n * \t\tunknown. This allows for specific connectors for different\r\n * \t\tconnection figures.\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype);"},
 {"id":634, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1956, "methodname":"org.jhotdraw.draw.Figure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"/**\r\n * Gets a connector for this figure at the given location.\r\n * A figure can have different connectors at different locations.\r\n *\r\n * @param p\r\n * \t\tthe location of the connector.\r\n * @param prototype\r\n * \t\tThe prototype used to create a connection or null if\r\n * \t\tunknown. This allows for specific connectors for different\r\n * \t\tconnection figures.\r\n */\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype);"},
 {"id":635, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1955, "methodname":"org.jhotdraw.draw.Figure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Gets a compatible connector.\r\n * If the provided connector is part of this figure, return the connector.\r\n * If the provided connector is part of another figure, return a connector\r\n * with the same semantics for this figure.\r\n * Return null, if no compatible connector is available.\r\n */\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector);"},
 {"id":636, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1955, "methodname":"org.jhotdraw.draw.Figure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"/**\r\n * Gets a compatible connector.\r\n * If the provided connector is part of this figure, return the connector.\r\n * If the provided connector is part of another figure, return a connector\r\n * with the same semantics for this figure.\r\n * Return null, if no compatible connector is available.\r\n */\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector);"},
 {"id":637, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1963, "methodname":"org.jhotdraw.draw.Figure.getConnectors(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Returns all connectors of this Figure for the specified prototype of\r\n * a ConnectionFigure.\r\n * <p>\r\n * This is used by connection tools and connection handles\r\n * to visualize the connectors when the user is about to\r\n * create a ConnectionFigure to this Figure.\r\n *\r\n * @param prototype\r\n * \t\tThe prototype used to create a connection or null if\r\n * \t\tunknown. This allows for specific connectors for different\r\n * \t\tconnection figures.\r\n */\r\npublic Collection<Connector> getConnectors(ConnectionFigure prototype);"},
 {"id":638, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1976, "methodname":"org.jhotdraw.draw.Figure.includes(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"// COMPOSITE FIGURES\r\n/**\r\n * Checks whether the given figure is contained in this figure.\r\n * A figure includes itself.\r\n */\r\npublic boolean includes(Figure figure);"},
 {"id":639, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1948, "methodname":"org.jhotdraw.draw.Figure.addNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"// EVENT HANDLING\r\n/**\r\n * Informs a figure, that it has been added to a drawing.\r\n * The figure must inform all FigureListeners that it has been added.\r\n */\r\npublic void addNotify(Drawing d);"},
 {"id":640, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1983, "methodname":"org.jhotdraw.draw.Figure.removeNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Informs a figure, that it has been removed from a drawing.\r\n * The figure must inform all FigureListeners that it has been removed.\r\n */\r\npublic void removeNotify(Drawing d);"},
 {"id":641, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1974, "methodname":"org.jhotdraw.draw.Figure.handleDrop(java.awt.geom.Point2D$Double,java.util.Collection,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Handles a drop.\r\n *\r\n * @param p\r\n * \t\tThe location of the mouse event.\r\n * @param droppedFigures\r\n * \t\tThe dropped figures.\r\n * @param view\r\n * \t\tThe drawing view which is the source of the mouse event.\r\n * @return Returns true, if the figures should snap back to the location\r\nthey were dragged from.\r\n */\r\npublic boolean handleDrop(Point2D.Double p, Collection<Figure> droppedFigures, DrawingView view);"},
 {"id":642, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1975, "methodname":"org.jhotdraw.draw.Figure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Handles a mouse click.\r\n *\r\n * @param p\r\n * \t\tThe location of the mouse event.\r\n * @param evt\r\n * \t\tThe mouse event.\r\n * @param view\r\n * \t\tThe drawing view which is the source of the mouse event.\r\n * @return Returns true, if the event was consumed.\r\n */\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view);"},
 {"id":643, "parametername":"FigureListener l", "parametertype":"org.jhotdraw.draw.FigureListener", "parameterclass":178, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1947, "methodname":"org.jhotdraw.draw.Figure.addFigureListener(org.jhotdraw.draw.FigureListener)", "isreturn":0, "sourcecode":"/**\r\n * Adds a listener for FigureEvents.\r\n */\r\npublic void addFigureListener(FigureListener l);"},
 {"id":644, "parametername":"FigureListener l", "parametertype":"org.jhotdraw.draw.FigureListener", "parameterclass":178, "classid":174, "classname":"org.jhotdraw.draw.Figure", "methodid":1982, "methodname":"org.jhotdraw.draw.Figure.removeFigureListener(org.jhotdraw.draw.FigureListener)", "isreturn":0, "sourcecode":"/**\r\n * Removes a listener for FigureEvents.\r\n */\r\npublic void removeFigureListener(FigureListener l);"},
 {"id":645, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":175, "classname":"org.jhotdraw.draw.FigureAdapter", "methodid":1992, "methodname":"org.jhotdraw.draw.FigureAdapter.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void areaInvalidated(FigureEvent e) {\r\n}"},
 {"id":646, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":175, "classname":"org.jhotdraw.draw.FigureAdapter", "methodid":1993, "methodname":"org.jhotdraw.draw.FigureAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void attributeChanged(FigureEvent e) {\r\n}"},
 {"id":647, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":175, "classname":"org.jhotdraw.draw.FigureAdapter", "methodid":1994, "methodname":"org.jhotdraw.draw.FigureAdapter.figureAdded(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureAdded(FigureEvent e) {\r\n}"},
 {"id":648, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":175, "classname":"org.jhotdraw.draw.FigureAdapter", "methodid":1995, "methodname":"org.jhotdraw.draw.FigureAdapter.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureChanged(FigureEvent e) {\r\n}"},
 {"id":649, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":175, "classname":"org.jhotdraw.draw.FigureAdapter", "methodid":1997, "methodname":"org.jhotdraw.draw.FigureAdapter.figureRemoved(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureRemoved(FigureEvent e) {\r\n}"},
 {"id":650, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":175, "classname":"org.jhotdraw.draw.FigureAdapter", "methodid":1998, "methodname":"org.jhotdraw.draw.FigureAdapter.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureRequestRemove(FigureEvent e) {\r\n}"},
 {"id":651, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":175, "classname":"org.jhotdraw.draw.FigureAdapter", "methodid":1996, "methodname":"org.jhotdraw.draw.FigureAdapter.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureHandlesChanged(FigureEvent e) {\r\n}"},
 {"id":652, "parametername":"Figure source", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":176, "classname":"org.jhotdraw.draw.FigureEvent", "methodid":1999, "methodname":"org.jhotdraw.draw.FigureEvent.-init-(org.jhotdraw.draw.Figure,java.awt.geom.Rectangle2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Constructs an event for the given source Figure.\r\n *\r\n * @param invalidatedArea\r\n * \t\tThe bounds of the invalidated area on the drawing.\r\n */\r\npublic FigureEvent(Figure source, Rectangle2D.Double invalidatedArea) {\r\n    super(source);\r\n    this.invalidatedArea = invalidatedArea;\r\n}"},
 {"id":653, "parametername":"Figure source", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":176, "classname":"org.jhotdraw.draw.FigureEvent", "methodid":2000, "methodname":"org.jhotdraw.draw.FigureEvent.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Constructs an event for the given source Figure.\r\n */\r\npublic FigureEvent(Figure source, AttributeKey attribute, Object oldValue, Object newValue) {\r\n    super(source);\r\n    this.attribute = attribute;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}"},
 {"id":654, "parametername":"AttributeKey attribute", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":176, "classname":"org.jhotdraw.draw.FigureEvent", "methodid":2000, "methodname":"org.jhotdraw.draw.FigureEvent.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Constructs an event for the given source Figure.\r\n */\r\npublic FigureEvent(Figure source, AttributeKey attribute, Object oldValue, Object newValue) {\r\n    super(source);\r\n    this.attribute = attribute;\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}"},
 {"id":655, "parametername":"Figure f1", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":177, "classname":"org.jhotdraw.draw.FigureLayerComparator", "methodid":2007, "methodname":"org.jhotdraw.draw.FigureLayerComparator.compare(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public int compare(Figure f1, Figure f2) {\r\n    return (f1.getLayer()) - (f2.getLayer());\r\n}"},
 {"id":656, "parametername":"Figure f2", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":177, "classname":"org.jhotdraw.draw.FigureLayerComparator", "methodid":2007, "methodname":"org.jhotdraw.draw.FigureLayerComparator.compare(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public int compare(Figure f1, Figure f2) {\r\n    return (f1.getLayer()) - (f2.getLayer());\r\n}"},
 {"id":657, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":178, "classname":"org.jhotdraw.draw.FigureListener", "methodid":2008, "methodname":"org.jhotdraw.draw.FigureListener.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when the drawing area used by the figure needs to be repainted.\r\n */\r\npublic void areaInvalidated(FigureEvent e);"},
 {"id":658, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":178, "classname":"org.jhotdraw.draw.FigureListener", "methodid":2009, "methodname":"org.jhotdraw.draw.FigureListener.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when an attribute of the figure has changed.\r\n */\r\npublic void attributeChanged(FigureEvent e);"},
 {"id":659, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":178, "classname":"org.jhotdraw.draw.FigureListener", "methodid":2012, "methodname":"org.jhotdraw.draw.FigureListener.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when handles of a Figure have been added, removed or replaced.\r\n * <p>\r\n * DrawingViews listen to this event to repopulate the Handles.\r\n * <p>\r\n * A Figure should not fire this event, if just the state or the location\r\n * of Handle has changed.\r\n */\r\npublic void figureHandlesChanged(FigureEvent e);"},
 {"id":660, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":178, "classname":"org.jhotdraw.draw.FigureListener", "methodid":2011, "methodname":"org.jhotdraw.draw.FigureListener.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when the geometry (for example the bounds) of the figure has changed.\r\n */\r\npublic void figureChanged(FigureEvent e);"},
 {"id":661, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":178, "classname":"org.jhotdraw.draw.FigureListener", "methodid":2010, "methodname":"org.jhotdraw.draw.FigureListener.figureAdded(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when a figure was added to a drawing.\r\n */\r\npublic void figureAdded(FigureEvent e);"},
 {"id":662, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":178, "classname":"org.jhotdraw.draw.FigureListener", "methodid":2013, "methodname":"org.jhotdraw.draw.FigureListener.figureRemoved(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when a figure was removed from a drawing.\r\n */\r\npublic void figureRemoved(FigureEvent e);"},
 {"id":663, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":178, "classname":"org.jhotdraw.draw.FigureListener", "methodid":2014, "methodname":"org.jhotdraw.draw.FigureListener.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when the figure requests to be removed from a drawing.\r\n */\r\npublic void figureRequestRemove(FigureEvent e);"},
 {"id":664, "parametername":"DrawingView source", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":179, "classname":"org.jhotdraw.draw.FigureSelectionEvent", "methodid":2015, "methodname":"org.jhotdraw.draw.FigureSelectionEvent.-init-(org.jhotdraw.draw.DrawingView,java.util.Set,java.util.Set)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic FigureSelectionEvent(DrawingView source, Set<Figure> oldValue, Set<Figure> newValue) {\r\n    super(source);\r\n    this.oldValue = oldValue;\r\n    this.newValue = newValue;\r\n}"},
 {"id":665, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":180, "classname":"org.jhotdraw.draw.FigureSelectionListener", "methodid":2019, "methodname":"org.jhotdraw.draw.FigureSelectionListener.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt);"},
 {"id":666, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":181, "classname":"org.jhotdraw.draw.FloatingTextArea", "methodid":2021, "methodname":"org.jhotdraw.draw.FloatingTextArea.createOverlay(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Creates the overlay within the given container.\r\n *\r\n * @param view\r\n * \t\tthe DrawingView\r\n */\r\npublic void createOverlay(DrawingView view) {\r\n    createOverlay(view, null);\r\n}"},
 {"id":667, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":181, "classname":"org.jhotdraw.draw.FloatingTextArea", "methodid":2022, "methodname":"org.jhotdraw.draw.FloatingTextArea.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n *\r\n * @param view\r\n * \t\tthe DrawingView\r\n * @param figure\r\n * \t\tthe figure holding the text\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(editScrollContainer, 0);\r\n    editedFigure = figure;\r\n    this.view = view;\r\n    if ((editedFigure) != null) {\r\n        editedFigure.addFigureListener(figureHandler);\r\n        updateWidget();\r\n    }\r\n}"},
 {"id":668, "parametername":"TextHolderFigure figure", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":181, "classname":"org.jhotdraw.draw.FloatingTextArea", "methodid":2022, "methodname":"org.jhotdraw.draw.FloatingTextArea.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n *\r\n * @param view\r\n * \t\tthe DrawingView\r\n * @param figure\r\n * \t\tthe figure holding the text\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(editScrollContainer, 0);\r\n    editedFigure = figure;\r\n    this.view = view;\r\n    if ((editedFigure) != null) {\r\n        editedFigure.addFigureListener(figureHandler);\r\n        updateWidget();\r\n    }\r\n}"},
 {"id":669, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":182, "classname":"org.jhotdraw.draw.FloatingTextField", "methodid":2031, "methodname":"org.jhotdraw.draw.FloatingTextField.createOverlay(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Creates the overlay for the given Component.\r\n */\r\npublic void createOverlay(DrawingView view) {\r\n    createOverlay(view, null);\r\n}"},
 {"id":670, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":182, "classname":"org.jhotdraw.draw.FloatingTextField", "methodid":2032, "methodname":"org.jhotdraw.draw.FloatingTextField.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(textField, 0);\r\n    textField.setText(figure.getText());\r\n    textField.setColumns(figure.getTextColumns());\r\n    textField.selectAll();\r\n    textField.setVisible(true);\r\n    editedFigure = figure;\r\n    editedFigure.addFigureListener(figureHandler);\r\n    this.view = view;\r\n    updateWidget();\r\n}"},
 {"id":671, "parametername":"TextHolderFigure figure", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":182, "classname":"org.jhotdraw.draw.FloatingTextField", "methodid":2032, "methodname":"org.jhotdraw.draw.FloatingTextField.createOverlay(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates the overlay for the given Container using a\r\n * specific font.\r\n */\r\npublic void createOverlay(DrawingView view, TextHolderFigure figure) {\r\n    view.getComponent().add(textField, 0);\r\n    textField.setText(figure.getText());\r\n    textField.setColumns(figure.getTextColumns());\r\n    textField.selectAll();\r\n    textField.setVisible(true);\r\n    editedFigure = figure;\r\n    editedFigure.addFigureListener(figureHandler);\r\n    this.view = view;\r\n    updateWidget();\r\n}"},
 {"id":672, "parametername":"TextHolderFigure owner", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":183, "classname":"org.jhotdraw.draw.FontSizeHandle", "methodid":2040, "methodname":"org.jhotdraw.draw.FontSizeHandle.-init-(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic FontSizeHandle(TextHolderFigure owner) {\r\n    super(owner, new FontSizeLocator());\r\n}"},
 {"id":673, "parametername":"TextHolderFigure owner", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":183, "classname":"org.jhotdraw.draw.FontSizeHandle", "methodid":2041, "methodname":"org.jhotdraw.draw.FontSizeHandle.-init-(org.jhotdraw.draw.TextHolderFigure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"public FontSizeHandle(TextHolderFigure owner, Locator locator) {\r\n    super(owner, locator);\r\n}"},
 {"id":674, "parametername":"Locator locator", "parametertype":"org.jhotdraw.draw.Locator", "parameterclass":214, "classid":183, "classname":"org.jhotdraw.draw.FontSizeHandle", "methodid":2041, "methodname":"org.jhotdraw.draw.FontSizeHandle.-init-(org.jhotdraw.draw.TextHolderFigure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"public FontSizeHandle(TextHolderFigure owner, Locator locator) {\r\n    super(owner, locator);\r\n}"},
 {"id":675, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":184, "classname":"org.jhotdraw.draw.FontSizeLocator", "methodid":2052, "methodname":"org.jhotdraw.draw.FontSizeLocator.locate(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Locates a position on the provided figure.\r\n *\r\n * @return a Point2D.Double on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner) {\r\n    Point2D.Double p = ((Point2D.Double) (owner.getStartPoint().clone()));\r\n    if (owner instanceof TextHolderFigure) {\r\n        p.y += ((TextHolderFigure) (owner)).getFontSize();\r\n        p.y += ((TextHolderFigure) (owner)).getInsets().top;\r\n    } else {\r\n        p.y += AttributeKeys.FONT_SIZE.get(owner);\r\n    }\r\n    if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n        AttributeKeys.TRANSFORM.get(owner).transform(p, p);\r\n    }\r\n    return p;\r\n}"},
 {"id":676, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":184, "classname":"org.jhotdraw.draw.FontSizeLocator", "methodid":2053, "methodname":"org.jhotdraw.draw.FontSizeLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}"},
 {"id":677, "parametername":"Figure dependent", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":184, "classname":"org.jhotdraw.draw.FontSizeLocator", "methodid":2053, "methodname":"org.jhotdraw.draw.FontSizeLocator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner, Figure dependent) {\r\n    return locate(owner);\r\n}"},
 {"id":678, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":185, "classname":"org.jhotdraw.draw.GeneralPathTip", "methodid":2056, "methodname":"org.jhotdraw.draw.GeneralPathTip.getDecoratorPath(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected GeneralPath getDecoratorPath(Figure f) {\r\n    return ((GeneralPath) (path.clone()));\r\n}"},
 {"id":679, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":185, "classname":"org.jhotdraw.draw.GeneralPathTip", "methodid":2057, "methodname":"org.jhotdraw.draw.GeneralPathTip.getDecoratorPathRadius(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected double getDecoratorPathRadius(Figure f) {\r\n    return decorationRadius;\r\n}"},
 {"id":680, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":186, "classname":"org.jhotdraw.draw.GeometryEdit", "methodid":2058, "methodname":"org.jhotdraw.draw.GeometryEdit.-init-(org.jhotdraw.draw.Figure,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic GeometryEdit(Figure owner, Object oldGeometry, Object newGeometry) {\r\n    this.owner = owner;\r\n    this.oldGeometry = oldGeometry;\r\n    this.newGeometry = newGeometry;\r\n}"},
 {"id":681, "parametername":"GraphicalCompositeFigure owner", "parametertype":"org.jhotdraw.draw.GraphicalCompositeFigure", "parameterclass":188, "classid":187, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler", "methodid":2092, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.-init-(org.jhotdraw.draw.GraphicalCompositeFigure)", "isreturn":0, "sourcecode":"private PresentationFigureHandler(GraphicalCompositeFigure owner) {\r\n    this.owner = owner;\r\n}"},
 {"id":682, "parametername":"Figure newPresentationFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2064, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Constructor which creates a GraphicalCompositeFigure with\r\n * a given graphical figure for presenting it.\r\n *\r\n * @param newPresentationFigure\tfigure\r\n * \t\twhich renders the container\r\n */\r\npublic GraphicalCompositeFigure(Figure newPresentationFigure) {\r\n    super();\r\n    setPresentationFigure(newPresentationFigure);\r\n}"},
 {"id":683, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":187, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler", "methodid":2095, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    owner.remove(e.getFigure());\r\n}"},
 {"id":684, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":187, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler", "methodid":2094, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.willChange();\r\n        owner.fireFigureChanged(e);\r\n        owner.changed();\r\n    }\r\n}"},
 {"id":685, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":187, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler", "methodid":2093, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure$PresentationFigureHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.fireAreaInvalidated(e.getInvalidatedArea());\r\n    }\r\n}"},
 {"id":686, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2065, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.addNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().addNotify(drawing);\r\n    }\r\n}"},
 {"id":687, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2083, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.removeNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void removeNotify(Drawing drawing) {\r\n    super.removeNotify(drawing);\r\n    if ((getPresentationFigure()) != null) {\r\n        getPresentationFigure().removeNotify(drawing);\r\n    }\r\n}"},
 {"id":688, "parametername":"Figure newPresentationFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2087, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.setPresentationFigure(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Set a figure which renders this BasicCompositeFigure. The presentation\r\n * tasks for the BasicCompositeFigure are delegated to this presentation\r\n * figure.\r\n *\r\n * @param newPresentationFigure\tfigure\r\n * \t\ttakes over the presentation tasks\r\n */\r\npublic void setPresentationFigure(Figure newPresentationFigure) {\r\n    if ((this.presentationFigure) != null) {\r\n        this.presentationFigure.removeFigureListener(presentationFigureHandler);\r\n        if ((getDrawing()) != null) {\r\n            this.presentationFigure.removeNotify(getDrawing());\r\n        }\r\n    }\r\n    this.presentationFigure = newPresentationFigure;\r\n    if ((this.presentationFigure) != null) {\r\n        this.presentationFigure.addFigureListener(presentationFigureHandler);\r\n        if ((getDrawing()) != null) {\r\n            this.presentationFigure.addNotify(getDrawing());\r\n        }\r\n    }\r\n    // FIXME: We should calculate the layout here.\r\n}"},
 {"id":689, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2084, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\n@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n        if ((getPresentationFigure()) != null) {\r\n            getPresentationFigure().setAttribute(key, newValue);\r\n        }\r\n        super.setAttribute(key, newValue);\r\n        Object oldValue = attributes.put(key, newValue);\r\n    }\r\n}"},
 {"id":690, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2085, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.setAttributeEnabled(org.jhotdraw.draw.AttributeKey,boolean)", "isreturn":0, "sourcecode":"public void setAttributeEnabled(AttributeKey key, boolean b) {\r\n    if ((forbiddenAttributes) == null) {\r\n        forbiddenAttributes = new HashSet<AttributeKey>();\r\n    }\r\n    if (b) {\r\n        forbiddenAttributes.remove(key);\r\n    } else {\r\n        forbiddenAttributes.add(key);\r\n    }\r\n}"},
 {"id":691, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2074, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.getAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Gets an attribute from the figure.\r\n */\r\n@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    if ((getPresentationFigure()) != null) {\r\n        return key.get(getPresentationFigure());\r\n    } else {\r\n        return !(attributes.containsKey(key)) ? key.getDefaultValue() : key.get(attributes);\r\n    }\r\n}"},
 {"id":692, "parametername":"Figure that", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2066, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.applyAttributesTo(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Applies all attributes of this figure to that figure.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprotected void applyAttributesTo(Figure that) {\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        entry.getKey().basicSet(that, entry.getValue());\r\n    }\r\n}"},
 {"id":693, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2091, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.writeAttributes(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"protected void writeAttributes(DOMOutput out) throws IOException {\r\n    Figure prototype = ((Figure) (out.getPrototype()));\r\n    boolean isElementOpen = false;\r\n    for (Map.Entry<AttributeKey, Object> entry : attributes.entrySet()) {\r\n        AttributeKey key = entry.getKey();\r\n        if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n            Object prototypeValue = key.get(prototype);\r\n            Object attributeValue = key.get(this);\r\n            if ((prototypeValue != attributeValue) || (((prototypeValue != null) && (attributeValue != null)) && (!(prototypeValue.equals(attributeValue))))) {\r\n                if (!isElementOpen) {\r\n                    out.openElement(\"a\");\r\n                    isElementOpen = true;\r\n                }\r\n                out.openElement(key.getKey());\r\n                out.writeObject(entry.getValue());\r\n                out.closeElement();\r\n            }\r\n        }\r\n    }\r\n    if (isElementOpen) {\r\n        out.closeElement();\r\n    }\r\n}"},
 {"id":694, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2081, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.readAttributes(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\nprotected void readAttributes(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"a\")) > 0) {\r\n        in.openElement(\"a\");\r\n        for (int i = (in.getElementCount()) - 1; i >= 0; i--) {\r\n            in.openElement(i);\r\n            String name = in.getTagName();\r\n            Object value = in.readObject();\r\n            AttributeKey key = getAttributeKey(name);\r\n            if ((key != null) && (key.isAssignable(value))) {\r\n                if (((forbiddenAttributes) == null) || (!(forbiddenAttributes.contains(key)))) {\r\n                    key.basicSet(this, value);\r\n                }\r\n            }\r\n            in.closeElement();\r\n        }\r\n        in.closeElement();\r\n    }\r\n}"},
 {"id":695, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2080, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    readAttributes(in);\r\n}"},
 {"id":696, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":188, "classname":"org.jhotdraw.draw.GraphicalCompositeFigure", "methodid":2090, "methodname":"org.jhotdraw.draw.GraphicalCompositeFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    writeAttributes(out);\r\n}"},
 {"id":697, "parametername":"TranslationDirection dir", "parametertype":"org.jhotdraw.draw.TranslationDirection", "parameterclass":276, "classid":189, "classname":"org.jhotdraw.draw.GridConstrainer", "methodid":2103, "methodname":"org.jhotdraw.draw.GridConstrainer.constrainPoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)", "isreturn":0, "sourcecode":"/**\r\n * Constrains the placement of a point towards a direction.\r\n * <p>\r\n * This method changes the point which is passed as a parameter.\r\n *\r\n * @param p\r\n * \t\tA point on the drawing.\r\n * @param dir\r\n * \t\tA direction.\r\n * @return Returns the constrained point.\r\n */\r\nprotected Point2D.Double constrainPoint(Point2D.Double p, TranslationDirection dir) {\r\n    Point2D.Double p0 = constrainPoint(((Point2D.Double) (p.clone())));\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            if ((p0.y) < (p.y)) {\r\n                p.y = p0.y;\r\n            } else\r\n                if ((p0.y) > (p.y)) {\r\n                    p.y = (p0.y) - (height);\r\n                }\r\n\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            if ((p0.y) < (p.y)) {\r\n                p.y = (p0.y) + (height);\r\n            } else\r\n                if ((p0.y) > (p.y)) {\r\n                    p.y = p0.y;\r\n                }\r\n\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            if ((p0.x) < (p.x)) {\r\n                p.x = p0.x;\r\n            } else\r\n                if ((p0.x) > (p.x)) {\r\n                    p.x = (p0.x) - (width);\r\n                }\r\n\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            if ((p0.x) < (p.x)) {\r\n                p.x = (p0.x) + (width);\r\n            } else\r\n                if ((p0.x) > (p.x)) {\r\n                    p.x = p0.x;\r\n                }\r\n\r\n            break;\r\n    }\r\n    return p;\r\n}"},
 {"id":698, "parametername":"TranslationDirection dir", "parametertype":"org.jhotdraw.draw.TranslationDirection", "parameterclass":276, "classid":189, "classname":"org.jhotdraw.draw.GridConstrainer", "methodid":2119, "methodname":"org.jhotdraw.draw.GridConstrainer.translatePoint(java.awt.geom.Point2D$Double,org.jhotdraw.draw.TranslationDirection)", "isreturn":0, "sourcecode":"/**\r\n * Moves a point to the closest grid point in a direction.\r\n */\r\npublic Point2D.Double translatePoint(Point2D.Double p, TranslationDirection dir) {\r\n    Point2D.Double p0 = constrainPoint(((Point2D.Double) (p.clone())));\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            p.y = (p0.y) - (height);\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            p.y = (p0.y) + (height);\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            p.x = (p0.x) - (width);\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            p.x = (p0.x) + (width);\r\n            break;\r\n    }\r\n    return p;\r\n}"},
 {"id":699, "parametername":"TranslationDirection dir", "parametertype":"org.jhotdraw.draw.TranslationDirection", "parameterclass":276, "classid":189, "classname":"org.jhotdraw.draw.GridConstrainer", "methodid":2105, "methodname":"org.jhotdraw.draw.GridConstrainer.constrainRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)", "isreturn":0, "sourcecode":"/**\r\n * Constrains the placement of a rectangle towards a direction.\r\n * <p>\r\n * This method changes the location of the rectangle which is passed as a\r\n * parameter. This method does not change the size of the rectangle.\r\n *\r\n * @param r\r\n * \t\tA rectangle on the drawing.\r\n * @param dir\r\n * \t\tA direction.\r\n * @return Returns the constrained rectangle.\r\n */\r\nprotected Rectangle2D.Double constrainRectangle(Rectangle2D.Double r, TranslationDirection dir) {\r\n    Point2D.Double p0 = new Point2D.Double(r.x, r.y);\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case WEST :\r\n            constrainPoint(p0, dir);\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n            p0.x += r.width;\r\n            constrainPoint(p0, dir);\r\n            p0.x -= r.width;\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n            p0.y += r.height;\r\n            constrainPoint(p0, dir);\r\n            p0.y -= r.height;\r\n            break;\r\n        case SOUTH_EAST :\r\n            p0.y += r.height;\r\n            p0.x += r.width;\r\n            constrainPoint(p0, dir);\r\n            p0.y -= r.height;\r\n            p0.x -= r.width;\r\n            break;\r\n    }\r\n    r.x = p0.x;\r\n    r.y = p0.y;\r\n    return r;\r\n}"},
 {"id":700, "parametername":"TranslationDirection dir", "parametertype":"org.jhotdraw.draw.TranslationDirection", "parameterclass":276, "classid":189, "classname":"org.jhotdraw.draw.GridConstrainer", "methodid":2120, "methodname":"org.jhotdraw.draw.GridConstrainer.translateRectangle(java.awt.geom.Rectangle2D$Double,org.jhotdraw.draw.TranslationDirection)", "isreturn":0, "sourcecode":"public Rectangle2D.Double translateRectangle(Rectangle2D.Double r, TranslationDirection dir) {\r\n    double x = r.x;\r\n    double y = r.y;\r\n    constrainRectangle(r, dir);\r\n    switch (dir) {\r\n        case NORTH :\r\n        case NORTH_WEST :\r\n        case NORTH_EAST :\r\n            if (y == (r.y)) {\r\n                r.y -= height;\r\n            }\r\n            break;\r\n        case SOUTH :\r\n        case SOUTH_WEST :\r\n        case SOUTH_EAST :\r\n            if (y == (r.y)) {\r\n                r.y += height;\r\n            }\r\n            break;\r\n    }\r\n    switch (dir) {\r\n        case WEST :\r\n        case NORTH_WEST :\r\n        case SOUTH_WEST :\r\n            if (x == (r.x)) {\r\n                r.x -= width;\r\n            }\r\n            break;\r\n        case EAST :\r\n        case NORTH_EAST :\r\n        case SOUTH_EAST :\r\n            if (x == (r.x)) {\r\n                r.x += width;\r\n            }\r\n            break;\r\n    }\r\n    return r;\r\n}"},
 {"id":701, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":189, "classname":"org.jhotdraw.draw.GridConstrainer", "methodid":2106, "methodname":"org.jhotdraw.draw.GridConstrainer.draw(java.awt.Graphics2D,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void draw(Graphics2D g, DrawingView view) {\r\n    if (isVisible) {\r\n        AffineTransform t = view.getDrawingToViewTransform();\r\n        Rectangle viewBounds = g.getClipBounds();\r\n        Rectangle2D.Double bounds = view.viewToDrawing(viewBounds);\r\n        Point2D.Double origin = constrainPoint(new Point2D.Double(bounds.x, bounds.y));\r\n        Point2D.Double point = new Point2D.Double();\r\n        Point2D.Double viewPoint = new Point2D.Double();\r\n        // vertical grid lines are only drawn, if they are at least two\r\n        // pixels apart on the view coordinate system.\r\n        if (((width) * (view.getScaleFactor())) > 2) {\r\n            g.setColor(GridConstrainer.minorColor);\r\n            for (int i = ((int) ((origin.x) / (width))), m = ((int) (((origin.x) + (bounds.width)) / (width))) + 1; i <= m; i++) {\r\n                g.setColor(((i % (majorGridSpacing)) == 0 ? GridConstrainer.majorColor : GridConstrainer.minorColor));\r\n                point.x = (width) * i;\r\n                t.transform(point, viewPoint);\r\n                g.drawLine(((int) (viewPoint.x)), ((int) (viewBounds.y)), ((int) (viewPoint.x)), ((int) ((viewBounds.y) + (viewBounds.height))));\r\n            }\r\n        } else\r\n            if ((((width) * (majorGridSpacing)) * (view.getScaleFactor())) > 2) {\r\n                g.setColor(GridConstrainer.majorColor);\r\n                for (int i = ((int) ((origin.x) / (width))), m = ((int) (((origin.x) + (bounds.width)) / (width))) + 1; i <= m; i++) {\r\n                    if ((i % (majorGridSpacing)) == 0) {\r\n                        point.x = (width) * i;\r\n                        t.transform(point, viewPoint);\r\n                        g.drawLine(((int) (viewPoint.x)), ((int) (viewBounds.y)), ((int) (viewPoint.x)), ((int) ((viewBounds.y) + (viewBounds.height))));\r\n                    }\r\n                }\r\n            }\r\n\r\n        // horizontal grid lines are only drawn, if they are at least two\r\n        // pixels apart on the view coordinate system.\r\n        if (((height) * (view.getScaleFactor())) > 2) {\r\n            g.setColor(GridConstrainer.minorColor);\r\n            for (int i = ((int) ((origin.y) / (height))), m = ((int) (((origin.y) + (bounds.height)) / (height))) + 1; i <= m; i++) {\r\n                g.setColor(((i % (majorGridSpacing)) == 0 ? GridConstrainer.majorColor : GridConstrainer.minorColor));\r\n                point.y = (height) * i;\r\n                t.transform(point, viewPoint);\r\n                g.drawLine(((int) (viewBounds.x)), ((int) (viewPoint.y)), ((int) ((viewBounds.x) + (viewBounds.width))), ((int) (viewPoint.y)));\r\n            }\r\n        } else\r\n            if ((((height) * (majorGridSpacing)) * (view.getScaleFactor())) > 2) {\r\n                g.setColor(GridConstrainer.majorColor);\r\n                for (int i = ((int) ((origin.y) / (height))), m = ((int) (((origin.y) + (bounds.height)) / (height))) + 1; i <= m; i++) {\r\n                    if ((i % (majorGridSpacing)) == 0) {\r\n                        point.y = (height) * i;\r\n                        t.transform(point, viewPoint);\r\n                        g.drawLine(((int) (viewBounds.x)), ((int) (viewPoint.y)), ((int) ((viewBounds.x) + (viewBounds.width))), ((int) (viewPoint.y)));\r\n                    }\r\n                }\r\n            }\r\n\r\n    }\r\n}"},
 {"id":702, "parametername":"RotationDirection dir", "parametertype":"org.jhotdraw.draw.RotationDirection", "parameterclass":243, "classid":189, "classname":"org.jhotdraw.draw.GridConstrainer", "methodid":2112, "methodname":"org.jhotdraw.draw.GridConstrainer.rotateAngle(double,org.jhotdraw.draw.RotationDirection)", "isreturn":0, "sourcecode":"public double rotateAngle(double angle, RotationDirection dir) {\r\n    // Check parameters\r\n    if (dir == null) {\r\n        throw new IllegalArgumentException(\"dir must not be null\");\r\n    }\r\n    // Rotate into the specified direction by theta\r\n    angle = constrainAngle(angle);\r\n    switch (dir) {\r\n        case CLOCKWISE :\r\n            angle += theta;\r\n            break;\r\n        case COUNTER_CLOCKWISE :\r\n        default :\r\n            angle -= theta;\r\n            break;\r\n    }\r\n    return angle;\r\n}"},
 {"id":703, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":191, "classname":"org.jhotdraw.draw.Handle", "methodid":2137, "methodname":"org.jhotdraw.draw.Handle.setView(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Sets the view of the handle.\r\n */\r\npublic void setView(DrawingView view);"},
 {"id":704, "parametername":"HandleListener l", "parametertype":"org.jhotdraw.draw.HandleListener", "parameterclass":194, "classid":191, "classname":"org.jhotdraw.draw.Handle", "methodid":2124, "methodname":"org.jhotdraw.draw.Handle.addHandleListener(org.jhotdraw.draw.HandleListener)", "isreturn":0, "sourcecode":"/**\r\n * Adds a listener for this handle.\r\n */\r\npublic void addHandleListener(HandleListener l);"},
 {"id":705, "parametername":"HandleListener l", "parametertype":"org.jhotdraw.draw.HandleListener", "parameterclass":194, "classid":191, "classname":"org.jhotdraw.draw.Handle", "methodid":2136, "methodname":"org.jhotdraw.draw.Handle.removeHandleListener(org.jhotdraw.draw.HandleListener)", "isreturn":0, "sourcecode":"/**\r\n * Removes a listener for this handle.\r\n */\r\nvoid removeHandleListener(HandleListener l);"},
 {"id":706, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":191, "classname":"org.jhotdraw.draw.Handle", "methodid":2135, "methodname":"org.jhotdraw.draw.Handle.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"/**\r\n * Returns true, if this handle is combinable with the specified handle.\r\n * This method is used to determine, if multiple handles need to be tracked,\r\n * when more than one figure is selected.\r\n */\r\npublic boolean isCombinableWith(Handle handle);"},
 {"id":707, "parametername":"Handle src", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":193, "classname":"org.jhotdraw.draw.HandleEvent", "methodid":2144, "methodname":"org.jhotdraw.draw.HandleEvent.-init-(org.jhotdraw.draw.Handle,java.awt.Rectangle)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic HandleEvent(Handle src, Rectangle invalidatedArea) {\r\n    super(src);\r\n    this.invalidatedArea = invalidatedArea;\r\n}"},
 {"id":708, "parametername":"HandleEvent e", "parametertype":"org.jhotdraw.draw.HandleEvent", "parameterclass":193, "classid":194, "classname":"org.jhotdraw.draw.HandleListener", "methodid":2147, "methodname":"org.jhotdraw.draw.HandleListener.areaInvalidated(org.jhotdraw.draw.HandleEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(HandleEvent e);"},
 {"id":709, "parametername":"HandleEvent e", "parametertype":"org.jhotdraw.draw.HandleEvent", "parameterclass":193, "classid":194, "classname":"org.jhotdraw.draw.HandleListener", "methodid":2148, "methodname":"org.jhotdraw.draw.HandleListener.handleRequestRemove(org.jhotdraw.draw.HandleEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when requesting to remove a handle.\r\n */\r\npublic void handleRequestRemove(HandleEvent e);"},
 {"id":710, "parametername":"HandleEvent e", "parametertype":"org.jhotdraw.draw.HandleEvent", "parameterclass":193, "classid":194, "classname":"org.jhotdraw.draw.HandleListener", "methodid":2149, "methodname":"org.jhotdraw.draw.HandleListener.handleRequestSecondaryHandles(org.jhotdraw.draw.HandleEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when requesting to add secondary handles.\r\n */\r\npublic void handleRequestSecondaryHandles(HandleEvent e);"},
 {"id":711, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":195, "classname":"org.jhotdraw.draw.HandleMulticaster", "methodid":2150, "methodname":"org.jhotdraw.draw.HandleMulticaster.-init-(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic HandleMulticaster(Handle handle) {\r\n    this.handles = new LinkedList<Handle>();\r\n    this.handles.add(handle);\r\n}"},
 {"id":712, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":195, "classname":"org.jhotdraw.draw.HandleMulticaster", "methodid":2157, "methodname":"org.jhotdraw.draw.HandleMulticaster.trackEnd(java.awt.Point,java.awt.Point,int,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void trackEnd(Point current, Point anchor, int modifiersEx, DrawingView view) {\r\n    for (Handle h : new ReversedList<Handle>(handles)) {\r\n        h.trackEnd(current, anchor, modifiersEx);\r\n    }\r\n    view.getDrawing().fireUndoableEditHappened(edit);\r\n}"},
 {"id":713, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":195, "classname":"org.jhotdraw.draw.HandleMulticaster", "methodid":2158, "methodname":"org.jhotdraw.draw.HandleMulticaster.trackStart(java.awt.Point,int,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void trackStart(Point anchor, int modifiersEx, DrawingView view) {\r\n    view.getDrawing().fireUndoableEditHappened((edit = new CompositeEdit()));\r\n    for (Handle h : handles) {\r\n        h.trackStart(anchor, modifiersEx);\r\n    }\r\n}"},
 {"id":714, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":195, "classname":"org.jhotdraw.draw.HandleMulticaster", "methodid":2156, "methodname":"org.jhotdraw.draw.HandleMulticaster.trackDoubleClick(java.awt.Point,int,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void trackDoubleClick(Point p, int modifiersEx, DrawingView view) {\r\n    for (Handle h : handles) {\r\n        h.trackDoubleClick(p, modifiersEx);\r\n    }\r\n}"},
 {"id":715, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":195, "classname":"org.jhotdraw.draw.HandleMulticaster", "methodid":2159, "methodname":"org.jhotdraw.draw.HandleMulticaster.trackStep(java.awt.Point,java.awt.Point,int,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void trackStep(Point anchor, Point lead, int modifiersEx, DrawingView view) {\r\n    for (Handle h : handles) {\r\n        h.trackStep(anchor, lead, modifiersEx);\r\n    }\r\n}"},
 {"id":716, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":196, "classname":"org.jhotdraw.draw.HandleTracker", "methodid":2160, "methodname":"org.jhotdraw.draw.HandleTracker.setHandles(org.jhotdraw.draw.Handle,java.util.Collection)", "isreturn":0, "sourcecode":"public void setHandles(Handle handle, Collection<Handle> compatibleHandles);"},
 {"id":717, "parametername":"CompositeFigure compositeFigure", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":197, "classname":"org.jhotdraw.draw.HorizontalLayouter", "methodid":2162, "methodname":"org.jhotdraw.draw.HorizontalLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"public Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(compositeFigure);\r\n    Rectangle2D.Double layoutBounds = new Rectangle2D.Double(anchor.x, anchor.y, 0, 0);\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Dimension2DDouble preferredSize = child.getPreferredSize();\r\n            Insets2D.Double ins = getInsets(child);\r\n            layoutBounds.height = Math.max(layoutBounds.height, (((preferredSize.height) + (ins.top)) + (ins.bottom)));\r\n            layoutBounds.width += ((preferredSize.width) + (ins.left)) + (ins.right);\r\n        }\r\n    }\r\n    layoutBounds.width += (layoutInsets.left) + (layoutInsets.right);\r\n    layoutBounds.height += (layoutInsets.top) + (layoutInsets.bottom);\r\n    return layoutBounds;\r\n}"},
 {"id":718, "parametername":"CompositeFigure compositeFigure", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":197, "classname":"org.jhotdraw.draw.HorizontalLayouter", "methodid":2163, "methodname":"org.jhotdraw.draw.HorizontalLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"public Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(compositeFigure);\r\n    AttributeKeys.Alignment compositeAlignment = AttributeKeys.COMPOSITE_ALIGNMENT.get(compositeFigure);\r\n    Rectangle2D.Double layoutBounds = calculateLayout(compositeFigure, anchor, lead);\r\n    double x = (layoutBounds.x) + (layoutInsets.left);\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Insets2D.Double insets = getInsets(child);\r\n            double width = child.getPreferredSize().width;\r\n            double height = child.getPreferredSize().height;\r\n            // --\r\n            switch (compositeAlignment) {\r\n                case LEADING :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (insets.top))), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutInsets.top)) + (insets.top)) + height)));\r\n                    break;\r\n                case TRAILING :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom)) - height)), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom))));\r\n                    break;\r\n                case CENTER :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (((layoutBounds.height) - height) / 2.0))), new Point2D.Double(((x + (insets.left)) + width), (((layoutBounds.y) + (layoutInsets.top)) + (((layoutBounds.height) + height) / 2.0))));\r\n                    break;\r\n                case BLOCK :\r\n                default :\r\n                    child.setBounds(new Point2D.Double((x + (insets.left)), (((layoutBounds.y) + (layoutInsets.top)) + (insets.top))), new Point2D.Double(((x + (insets.left)) + width), ((((layoutBounds.y) + (layoutBounds.height)) - (layoutInsets.bottom)) - (insets.bottom))));\r\n                    break;\r\n            }\r\n            // ---\r\n            x += (width + (insets.left)) + (insets.right);\r\n        }\r\n    }\r\n    return layoutBounds;\r\n}"},
 {"id":719, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":198, "classname":"org.jhotdraw.draw.ImageFigure", "methodid":2173, "methodname":"org.jhotdraw.draw.ImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}"},
 {"id":720, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":198, "classname":"org.jhotdraw.draw.ImageFigure", "methodid":2173, "methodname":"org.jhotdraw.draw.ImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}"},
 {"id":721, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":198, "classname":"org.jhotdraw.draw.ImageFigure", "methodid":2172, "methodname":"org.jhotdraw.draw.ImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}"},
 {"id":722, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":198, "classname":"org.jhotdraw.draw.ImageFigure", "methodid":2172, "methodname":"org.jhotdraw.draw.ImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    // XXX - This doesnt work with a transformed rect\r\n    return new ChopRectangleConnector(this);\r\n}"},
 {"id":723, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":198, "classname":"org.jhotdraw.draw.ImageFigure", "methodid":2182, "methodname":"org.jhotdraw.draw.ImageFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    if ((in.getElementCount(\"imageData\")) > 0) {\r\n        in.openElement(\"imageData\");\r\n        String base64Data = in.getText();\r\n        if (base64Data != null) {\r\n            setImageData(Base64.decode(base64Data));\r\n        }\r\n        in.closeElement();\r\n    }\r\n}"},
 {"id":724, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":198, "classname":"org.jhotdraw.draw.ImageFigure", "methodid":2189, "methodname":"org.jhotdraw.draw.ImageFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    if ((getImageData()) != null) {\r\n        out.openElement(\"imageData\");\r\n        out.addText(Base64.encodeBytes(getImageData()));\r\n        out.closeElement();\r\n    }\r\n}"},
 {"id":725, "parametername":"ImageHolderFigure prototype", "parametertype":"org.jhotdraw.draw.ImageHolderFigure", "parameterclass":199, "classid":200, "classname":"org.jhotdraw.draw.ImageInputFormat", "methodid":2197, "methodname":"org.jhotdraw.draw.ImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new image output format for Portable Network Graphics PNG.\r\n */\r\npublic ImageInputFormat(ImageHolderFigure prototype) {\r\n    this(prototype, \"PNG\", \"Portable Network Graphics (PNG)\", \"png\", BufferedImage.TYPE_INT_ARGB);\r\n}"},
 {"id":726, "parametername":"ImageHolderFigure prototype", "parametertype":"org.jhotdraw.draw.ImageHolderFigure", "parameterclass":199, "classid":200, "classname":"org.jhotdraw.draw.ImageInputFormat", "methodid":2198, "methodname":"org.jhotdraw.draw.ImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure,java.lang.String,java.lang.String,java.lang.String,int)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * \t\tThe format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * \t\tThe format description to be used for the file filter.\r\n * @param fileExtension\r\n * \t\tThe file extension to be used for file filter.\r\n * @param bufferedImageType\r\n * \t\tThe BufferedImage type used to produce the image.\r\n * \t\tThe value of this parameter must match with the format name.\r\n */\r\npublic ImageInputFormat(ImageHolderFigure prototype, String formatName, String description, String fileExtension, int bufferedImageType) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.imageType = bufferedImageType;\r\n}"},
 {"id":727, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":200, "classname":"org.jhotdraw.draw.ImageInputFormat", "methodid":2206, "methodname":"org.jhotdraw.draw.ImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n    figure.loadImage(file);\r\n    figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAdd(figure);\r\n}"},
 {"id":728, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":200, "classname":"org.jhotdraw.draw.ImageInputFormat", "methodid":2205, "methodname":"org.jhotdraw.draw.ImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}"},
 {"id":729, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":200, "classname":"org.jhotdraw.draw.ImageInputFormat", "methodid":2207, "methodname":"org.jhotdraw.draw.ImageInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAdd(createImageHolder(in));\r\n}"},
 {"id":730, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":200, "classname":"org.jhotdraw.draw.ImageInputFormat", "methodid":2204, "methodname":"org.jhotdraw.draw.ImageInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    // 1. Try to read the image using the Java Image Flavor\r\n    // This causes a NoSuchMethodError to be thrown on Mac OS X 10.5.2.\r\n    if (t.isDataFlavorSupported(DataFlavor.imageFlavor)) {\r\n        try {\r\n            Image img = ((Image) (t.getTransferData(DataFlavor.imageFlavor)));\r\n            img = Images.toBufferedImage(img);\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(((BufferedImage) (img)));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            LinkedList<Figure> list = new LinkedList<Figure>();\r\n            list.add(figure);\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.addAll(list);\r\n            return;\r\n        } catch (Throwable e) {\r\n            // no need to do anything here, because we try to read the\r\n            // image/png below.\r\n            // e.printStackTrace();\r\n        }\r\n    }\r\n    // 2. Try to read the image using our own image/png flavor.\r\n    if (t.isDataFlavorSupported(ImageTransferable.IMAGE_PNG_FLAVOR)) {\r\n        try {\r\n            InputStream in = ((InputStream) (t.getTransferData(ImageTransferable.IMAGE_PNG_FLAVOR)));\r\n            Image img = ImageIO.read(in);\r\n            img = Images.toBufferedImage(img);\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(((BufferedImage) (img)));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            LinkedList<Figure> list = new LinkedList<Figure>();\r\n            list.add(figure);\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.addAll(list);\r\n        } catch (Throwable e) {\r\n            e.printStackTrace();\r\n            IOException ex = new IOException(\"Couldnt import image as image/png flavor\");\r\n            ex.initCause(e);\r\n            throw ex;\r\n        }\r\n    } else {\r\n        throw new IOException(\"Couldnt import image.\");\r\n    }\r\n}"},
 {"id":731, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":201, "classname":"org.jhotdraw.draw.ImageOutputFormat", "methodid":2217, "methodname":"org.jhotdraw.draw.ImageOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Writes the drawing to the specified file.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = null;\r\n    try {\r\n        out = new BufferedOutputStream(new FileOutputStream(file));\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}"},
 {"id":732, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":201, "classname":"org.jhotdraw.draw.ImageOutputFormat", "methodid":2218, "methodname":"org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Writes the drawing to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing, drawing.getChildren(), null, null);\r\n}"},
 {"id":733, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":201, "classname":"org.jhotdraw.draw.ImageOutputFormat", "methodid":2219, "methodname":"org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.awt.geom.AffineTransform,java.awt.Dimension)", "isreturn":0, "sourcecode":"/**\r\n * Writes the drawing to the specified output stream.\r\n * This method applies the specified transform to the drawing, and draws\r\n * it on an image of the specified size.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    write(out, drawing, drawing.getChildren(), drawingTransform, imageSize);\r\n}"},
 {"id":734, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":201, "classname":"org.jhotdraw.draw.ImageOutputFormat", "methodid":2210, "methodname":"org.jhotdraw.draw.ImageOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)", "isreturn":0, "sourcecode":"/**\r\n * Writes the drawing to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    return new ImageTransferable(toImage(drawing, figures, scaleFactor, true));\r\n}"},
 {"id":735, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":201, "classname":"org.jhotdraw.draw.ImageOutputFormat", "methodid":2220, "methodname":"org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List)", "isreturn":0, "sourcecode":"/**\r\n * Writes the figures to the specified output stream.\r\n * This method ensures that all figures of the drawing are visible on\r\n * the image.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures) throws IOException {\r\n    write(out, drawing, figures, null, null);\r\n}"},
 {"id":736, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":201, "classname":"org.jhotdraw.draw.ImageOutputFormat", "methodid":2221, "methodname":"org.jhotdraw.draw.ImageOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)", "isreturn":0, "sourcecode":"/**\r\n * Writes the figures to the specified output stream.\r\n * This method applies the specified transform to the drawing, and draws\r\n * it on an image of the specified size.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    BufferedImage img;\r\n    if ((drawingTransform == null) || (imageSize == null)) {\r\n        img = toImage(drawing, figures, 1.0, false);\r\n    } else {\r\n        img = toImage(drawing, figures, drawingTransform, imageSize);\r\n    }\r\n    ImageIO.write(img, formatName, out);\r\n    img.flush();\r\n}"},
 {"id":737, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":201, "classname":"org.jhotdraw.draw.ImageOutputFormat", "methodid":2215, "methodname":"org.jhotdraw.draw.ImageOutputFormat.toImage(org.jhotdraw.draw.Drawing,java.util.List,double,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a BufferedImage from the specified list of figures.\r\n * <p>\r\n * The images are drawn using the specified scale factor. If some figures\r\n * have a drawing area located at negative coordinates, then the drawing\r\n * coordinates are translated, so that all figures are visible on the\r\n * image.\r\n *\r\n * @param drawing\r\n * \t\tThe drawing.\r\n * @param figures\r\n * \t\tA list of figures of the drawing.\r\n * @param scaleFactor\r\n * \t\tThe scale factor used when drawing the figures.\r\n * @param clipToFigures\r\n * \t\tIf this is true, the image is clipped to the figures.\r\n * \t\tIf this is false, the image includes the drawing area,\r\n */\r\npublic BufferedImage toImage(Drawing drawing, List<Figure> figures, double scaleFactor, boolean clipToFigures) {\r\n    // Determine the draw bounds of the figures\r\n    Rectangle2D.Double drawBounds = null;\r\n    for (Figure f : figures) {\r\n        if (drawBounds == null) {\r\n            drawBounds = f.getDrawingArea();\r\n        } else {\r\n            drawBounds.add(f.getDrawingArea());\r\n        }\r\n    }\r\n    if (clipToFigures) {\r\n        AffineTransform transform = new AffineTransform();\r\n        transform.translate(((-(drawBounds.x)) * scaleFactor), ((-(drawBounds.y)) * scaleFactor));\r\n        transform.scale(scaleFactor, scaleFactor);\r\n        return toImage(drawing, figures, transform, new Dimension(((int) ((drawBounds.width) * scaleFactor)), ((int) ((drawBounds.height) * scaleFactor))));\r\n    } else {\r\n        AffineTransform transform = new AffineTransform();\r\n        if ((drawBounds.x) < 0) {\r\n            transform.translate(((-(drawBounds.x)) * scaleFactor), 0);\r\n        }\r\n        if ((drawBounds.y) < 0) {\r\n            transform.translate(0, ((-(drawBounds.y)) * scaleFactor));\r\n        }\r\n        transform.scale(scaleFactor, scaleFactor);\r\n        return toImage(drawing, figures, transform, new Dimension(((int) (((Math.max(0, drawBounds.x)) + (drawBounds.width)) * scaleFactor)), ((int) (((Math.max(0, drawBounds.y)) + (drawBounds.height)) * scaleFactor))));\r\n    }\r\n}"},
 {"id":738, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":201, "classname":"org.jhotdraw.draw.ImageOutputFormat", "methodid":2216, "methodname":"org.jhotdraw.draw.ImageOutputFormat.toImage(org.jhotdraw.draw.Drawing,java.util.List,java.awt.geom.AffineTransform,java.awt.Dimension)", "isreturn":0, "sourcecode":"/**\r\n * Creates a BufferedImage from the specified list of figures.\r\n *\r\n * @param drawing\r\n * \t\tThe drawing.\r\n * @param figures\r\n * \t\tA list of figures of the drawing.\r\n * @param transform\r\n * \t\tThe AffineTransform to be used when drawing\r\n * \t\tthe figures.\r\n * @param imageSize\r\n * \t\tThe width and height of the image.\r\n */\r\npublic BufferedImage toImage(Drawing drawing, List<Figure> figures, AffineTransform transform, Dimension imageSize) {\r\n    // Create the buffered image and clear it\r\n    Color background = AttributeKeys.CANVAS_FILL_COLOR.get(drawing);\r\n    double opacity = AttributeKeys.CANVAS_FILL_OPACITY.get(drawing);\r\n    if (background == null) {\r\n        background = new Color(255, 255, 255, ((int) (255 * opacity)));\r\n    } else {\r\n        background = new Color(background.getRed(), background.getGreen(), background.getBlue(), ((int) ((background.getAlpha()) * opacity)));\r\n    }\r\n    BufferedImage buf = new BufferedImage(imageSize.width, imageSize.height, ((background.getAlpha()) == 255 ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB));\r\n    Graphics2D g = buf.createGraphics();\r\n    // Clear the buffered image with the background color\r\n    Composite savedComposite = g.getComposite();\r\n    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));\r\n    g.setColor(background);\r\n    g.fillRect(0, 0, buf.getWidth(), buf.getHeight());\r\n    g.setComposite(savedComposite);\r\n    // Draw the figures onto the buffered image\r\n    setRenderingHints(g);\r\n    g.transform(transform);\r\n    for (Figure f : figures) {\r\n        f.draw(g);\r\n    }\r\n    g.dispose();\r\n    // Convert the image, if it does not have the specified image type\r\n    if ((imageType) != (BufferedImage.TYPE_INT_ARGB)) {\r\n        BufferedImage buf2 = new BufferedImage(buf.getWidth(), buf.getHeight(), imageType);\r\n        g = buf2.createGraphics();\r\n        setRenderingHints(g);\r\n        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));\r\n        g.drawImage(buf, 0, 0, null);\r\n        g.dispose();\r\n        buf.flush();\r\n        buf = buf2;\r\n    }\r\n    return buf;\r\n}"},
 {"id":739, "parametername":"ImageHolderFigure prototype", "parametertype":"org.jhotdraw.draw.ImageHolderFigure", "parameterclass":199, "classid":202, "classname":"org.jhotdraw.draw.ImageTool", "methodid":2222, "methodname":"org.jhotdraw.draw.ImageTool.-init-(org.jhotdraw.draw.ImageHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ImageTool(ImageHolderFigure prototype) {\r\n    super(prototype);\r\n}"},
 {"id":740, "parametername":"ImageHolderFigure prototype", "parametertype":"org.jhotdraw.draw.ImageHolderFigure", "parameterclass":199, "classid":202, "classname":"org.jhotdraw.draw.ImageTool", "methodid":2223, "methodname":"org.jhotdraw.draw.ImageTool.-init-(org.jhotdraw.draw.ImageHolderFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ImageTool(ImageHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}"},
 {"id":741, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":202, "classname":"org.jhotdraw.draw.ImageTool", "methodid":2225, "methodname":"org.jhotdraw.draw.ImageTool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    if ((workerThread) != null) {\r\n        try {\r\n            workerThread.join();\r\n        } catch (InterruptedException ex) {\r\n            // ignore\r\n        }\r\n    }\r\n    final File file;\r\n    if (useFileDialog) {\r\n        getFileDialog().setVisible(true);\r\n        if ((getFileDialog().getFile()) != null) {\r\n            file = new File(getFileDialog().getDirectory(), getFileDialog().getFile());\r\n        } else {\r\n            file = null;\r\n        }\r\n    } else {\r\n        if ((getFileChooser().showOpenDialog(getView().getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n            file = getFileChooser().getSelectedFile();\r\n        } else {\r\n            file = null;\r\n        }\r\n    }\r\n    if (file != null) {\r\n        final ImageHolderFigure loaderFigure = ((ImageHolderFigure) (prototype.clone()));\r\n        Worker worker = new Worker() {\r\n            public Object construct() {\r\n                try {\r\n                    ((ImageHolderFigure) (loaderFigure)).loadImage(file);\r\n                } catch (Throwable t) {\r\n                    return t;\r\n                }\r\n                return null;\r\n            }\r\n\r\n            public void finished(Object value) {\r\n                if (value instanceof Throwable) {\r\n                    Throwable t = ((Throwable) (value));\r\n                    JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                    getDrawing().remove(createdFigure);\r\n                    fireToolDone();\r\n                } else {\r\n                    try {\r\n                        if ((createdFigure) == null) {\r\n                            ((ImageHolderFigure) (prototype)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                        } else {\r\n                            ((ImageHolderFigure) (createdFigure)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                        }\r\n                    } catch (IOException ex) {\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        workerThread = new Thread(worker);\r\n        workerThread.start();\r\n    } else {\r\n        // getDrawing().remove(createdFigure);\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    }\r\n}"},
 {"id":742, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":203, "classname":"org.jhotdraw.draw.InputFormat", "methodid":2234, "methodname":"org.jhotdraw.draw.InputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Reads figures from a file and replaces the children of the drawing\r\n * with them.\r\n * <p>\r\n * This is a convenience method for calling read(File,Drawing,true).\r\n *\r\n * @param file\r\n * \t\tThe file.\r\n * @param drawing\r\n * \t\tThe drawing.\r\n */\r\npublic void read(File file, Drawing drawing) throws IOException;"},
 {"id":743, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":203, "classname":"org.jhotdraw.draw.InputFormat", "methodid":2235, "methodname":"org.jhotdraw.draw.InputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Reads figures from a file and adds them to the specified drawing.\r\n *\r\n * @param file\r\n * \t\tThe file.\r\n * @param drawing\r\n * \t\tThe drawing.\r\n * @param replace\r\n * \t\tSet this to true, if the contents of the file replaces the\r\n * \t\tcontents of the drawing (for example, when loading a drawing from a file).\r\n * \t\tSet this to false, to add the contents of the file to the drawing (for\r\n * \t\texample, when the file has been dropped into the drawing view).\r\n */\r\npublic void read(File file, Drawing drawing, boolean replace) throws IOException;"},
 {"id":744, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":203, "classname":"org.jhotdraw.draw.InputFormat", "methodid":2236, "methodname":"org.jhotdraw.draw.InputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Reads figures from a file and adds them to the specified drawing.\r\n *\r\n * @param in\r\n * \t\tThe input stream.\r\n * @param drawing\r\n * \t\tThe drawing.\r\n * @param replace\r\n * \t\tSet this to true, if the contents of the stream replaces the\r\n * \t\tcontents of the drawing (for example, when loading a drawing from a stream).\r\n * \t\tSet this to false, to add the contents of the file to the drawing (for\r\n * \t\texample, when the stream has been dropped into the drawing view).\r\n */\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException;"},
 {"id":745, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":203, "classname":"org.jhotdraw.draw.InputFormat", "methodid":2233, "methodname":"org.jhotdraw.draw.InputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Reads figures from the specified Transferable and adds them to the\r\n * specified drawing.\r\n *\r\n * @param t\r\n * \t\tThe Transferable.\r\n * @param drawing\r\n * \t\tThe drawing.\r\n * @param replace\r\n * \t\tSet this to true, if the contents of the transferable\r\n * \t\treplaces the contents of the drawing (for example, when loading a drawing\r\n * \t\tfrom a transferable). Set this to false, to add the contents of the\r\n * \t\ttransferable to the drawing (for example, when the transferable has been\r\n * \t\tdropped or pasted into the drawing view).\r\n */\r\npublic void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException;"},
 {"id":746, "parametername":"TextHolderFigure target", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":204, "classname":"org.jhotdraw.draw.LabelFigure", "methodid":2249, "methodname":"org.jhotdraw.draw.LabelFigure.setLabelFor(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"public void setLabelFor(TextHolderFigure target) {\r\n    if ((this.target) != null) {\r\n        this.target.removeFigureListener(this);\r\n    }\r\n    this.target = target;\r\n    if ((this.target) != null) {\r\n        this.target.addFigureListener(this);\r\n    }\r\n}"},
 {"id":747, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":204, "classname":"org.jhotdraw.draw.LabelFigure", "methodid":2239, "methodname":"org.jhotdraw.draw.LabelFigure.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void areaInvalidated(FigureEvent e) {\r\n}"},
 {"id":748, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":204, "classname":"org.jhotdraw.draw.LabelFigure", "methodid":2240, "methodname":"org.jhotdraw.draw.LabelFigure.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void attributeChanged(FigureEvent e) {\r\n}"},
 {"id":749, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":204, "classname":"org.jhotdraw.draw.LabelFigure", "methodid":2241, "methodname":"org.jhotdraw.draw.LabelFigure.figureAdded(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureAdded(FigureEvent e) {\r\n}"},
 {"id":750, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":204, "classname":"org.jhotdraw.draw.LabelFigure", "methodid":2242, "methodname":"org.jhotdraw.draw.LabelFigure.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureChanged(FigureEvent e) {\r\n}"},
 {"id":751, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":204, "classname":"org.jhotdraw.draw.LabelFigure", "methodid":2244, "methodname":"org.jhotdraw.draw.LabelFigure.figureRemoved(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureRemoved(FigureEvent e) {\r\n    if ((e.getFigure()) == (target)) {\r\n        target.removeFigureListener(this);\r\n        target = null;\r\n    }\r\n}"},
 {"id":752, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":204, "classname":"org.jhotdraw.draw.LabelFigure", "methodid":2245, "methodname":"org.jhotdraw.draw.LabelFigure.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureRequestRemove(FigureEvent e) {\r\n}"},
 {"id":753, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":204, "classname":"org.jhotdraw.draw.LabelFigure", "methodid":2243, "methodname":"org.jhotdraw.draw.LabelFigure.figureHandlesChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"public void figureHandlesChanged(FigureEvent e) {\r\n}"},
 {"id":754, "parametername":"LabeledLineConnectionFigure owner", "parametertype":"org.jhotdraw.draw.LabeledLineConnectionFigure", "parameterclass":206, "classid":205, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler", "methodid":2288, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.-init-(org.jhotdraw.draw.LabeledLineConnectionFigure)", "isreturn":0, "sourcecode":"private ChildHandler(LabeledLineConnectionFigure owner) {\r\n    this.owner = owner;\r\n}"},
 {"id":755, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":205, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler", "methodid":2291, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    owner.remove(e.getFigure());\r\n}"},
 {"id":756, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":205, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler", "methodid":2290, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.willChange();\r\n        owner.fireFigureChanged(e);\r\n        owner.changed();\r\n    }\r\n}"},
 {"id":757, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":205, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler", "methodid":2289, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure$ChildHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    if (!(owner.isChanging())) {\r\n        owner.fireAreaInvalidated(e.getInvalidatedArea());\r\n    }\r\n}"},
 {"id":758, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2283, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"// ATTRIBUTES\r\n/**\r\n * Sets an attribute of the figure.\r\n * AttributeKey name and semantics are defined by the class implementing\r\n * the figure interface.\r\n */\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    if (isAttributeEnabled(key)) {\r\n        if ((children) != null) {\r\n            for (Figure child : children) {\r\n                key.basicSet(child, newValue);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":759, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2253, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.add(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public boolean add(Figure figure) {\r\n    basicAdd(figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n    return true;\r\n}"},
 {"id":760, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2252, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.add(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void add(int index, Figure figure) {\r\n    basicAdd(index, figure);\r\n    if ((getDrawing()) != null) {\r\n        figure.addNotify(getDrawing());\r\n    }\r\n}"},
 {"id":761, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2257, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.basicAdd(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void basicAdd(Figure figure) {\r\n    basicAdd(children.size(), figure);\r\n}"},
 {"id":762, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2256, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.basicAdd(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    figure.addFigureListener(childHandler);\r\n    invalidate();\r\n}"},
 {"id":763, "parametername":"final Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2278, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.remove(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public boolean remove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index == (-1)) {\r\n        return false;\r\n    } else {\r\n        willChange();\r\n        basicRemoveChild(index);\r\n        if ((getDrawing()) != null) {\r\n            figure.removeNotify(getDrawing());\r\n        }\r\n        changed();\r\n        return true;\r\n    }\r\n}"},
 {"id":764, "parametername":"final Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2258, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.basicRemove(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public int basicRemove(final Figure figure) {\r\n    int index = children.indexOf(figure);\r\n    if (index != (-1)) {\r\n        basicRemoveChild(index);\r\n    }\r\n    return index;\r\n}"},
 {"id":765, "parametername":"Layouter newLayouter", "parametertype":"org.jhotdraw.draw.Layouter", "parameterclass":207, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2284, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.setLayouter(org.jhotdraw.draw.Layouter)", "isreturn":0, "sourcecode":"public void setLayouter(Layouter newLayouter) {\r\n    this.layouter = newLayouter;\r\n}"},
 {"id":766, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2255, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.addNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void addNotify(Drawing drawing) {\r\n    for (Figure child : new LinkedList<Figure>(children)) {\r\n        child.addNotify(drawing);\r\n    }\r\n    super.addNotify(drawing);\r\n}"},
 {"id":767, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2282, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.removeNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void removeNotify(Drawing drawing) {\r\n    for (Figure child : new LinkedList<Figure>(children)) {\r\n        child.removeNotify(drawing);\r\n    }\r\n    super.removeNotify(drawing);\r\n}"},
 {"id":768, "parametername":"CompositeFigureListener listener", "parametertype":"org.jhotdraw.draw.CompositeFigureListener", "parameterclass":138, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2281, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.removeCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)", "isreturn":0, "sourcecode":"public void removeCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.remove(CompositeFigureListener.class, listener);\r\n}"},
 {"id":769, "parametername":"CompositeFigureListener listener", "parametertype":"org.jhotdraw.draw.CompositeFigureListener", "parameterclass":138, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2254, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.addCompositeFigureListener(org.jhotdraw.draw.CompositeFigureListener)", "isreturn":0, "sourcecode":"public void addCompositeFigureListener(CompositeFigureListener listener) {\r\n    listenerList.add(CompositeFigureListener.class, listener);\r\n}"},
 {"id":770, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2266, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.fireFigureAdded(org.jhotdraw.draw.Figure,int)", "isreturn":0, "sourcecode":"/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureAdded(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureAdded(event);\r\n        }\r\n    }\r\n}"},
 {"id":771, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2267, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.fireFigureRemoved(org.jhotdraw.draw.Figure,int)", "isreturn":0, "sourcecode":"/**\r\n * Notify all listenerList that have registered interest for\r\n * notification on this event type.\r\n */\r\nprotected void fireFigureRemoved(Figure f, int zIndex) {\r\n    CompositeFigureEvent event = null;\r\n    // Notify all listeners that have registered interest for\r\n    // Guaranteed to return a non-null array\r\n    Object[] listeners = listenerList.getListenerList();\r\n    // Process the listeners last to first, notifying\r\n    // those that are interested in this event\r\n    for (int i = (listeners.length) - 2; i >= 0; i -= 2) {\r\n        if ((listeners[i]) == (CompositeFigureListener.class)) {\r\n            // Lazily create the event:\r\n            if (event == null)\r\n                event = new CompositeFigureEvent(this, f, f.getDrawingArea(), zIndex);\r\n\r\n            ((CompositeFigureListener) (listeners[(i + 1)])).figureRemoved(event);\r\n        }\r\n    }\r\n}"},
 {"id":772, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2263, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.contains(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}"},
 {"id":773, "parametername":"Figure child", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":206, "classname":"org.jhotdraw.draw.LabeledLineConnectionFigure", "methodid":2274, "methodname":"org.jhotdraw.draw.LabeledLineConnectionFigure.indexOf(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public int indexOf(Figure child) {\r\n    return children.indexOf(child);\r\n}"},
 {"id":774, "parametername":"CompositeFigure compositeFigure", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":207, "classname":"org.jhotdraw.draw.Layouter", "methodid":2293, "methodname":"org.jhotdraw.draw.Layouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/* extends Serializable, Storable */\r\n/**\r\n * Calculate the layout for the figure and all its subelements. The\r\n * layout is not actually performed but just its dimensions are calculated.\r\n *\r\n * @param anchor\r\n * \t\tstart point for the layout\r\n * @param lead\r\n * \t\tminimum lead point for the layout\r\n */\r\npublic Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead);"},
 {"id":775, "parametername":"CompositeFigure compositeFigure", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":207, "classname":"org.jhotdraw.draw.Layouter", "methodid":2294, "methodname":"org.jhotdraw.draw.Layouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Method which lays out a figure. It is called by the figure\r\n * if a layout task is to be performed. Implementing classes\r\n * specify a certain layout algorithm in this method.\r\n *\r\n * @param anchor\r\n * \t\tstart point for the layout\r\n * @param lead\r\n * \t\tminimum lead point for the layout\r\n */\r\npublic Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead);"},
 {"id":776, "parametername":"LineConnectionFigure owner", "parametertype":"org.jhotdraw.draw.LineConnectionFigure", "parameterclass":209, "classid":208, "classname":"org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler", "methodid":2332, "methodname":"org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.-init-(org.jhotdraw.draw.LineConnectionFigure)", "isreturn":0, "sourcecode":"private ConnectionHandler(LineConnectionFigure owner) {\r\n    this.owner = owner;\r\n}"},
 {"id":777, "parametername":"FigureEvent evt", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":208, "classname":"org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler", "methodid":2334, "methodname":"org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.figureRemoved(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureRemoved(FigureEvent evt) {\r\n    // The commented lines below must stay commented out.\r\n    // This is because, we must not set our connectors to null,\r\n    // in order to support reconnection using redo.\r\n    /* if (evt.getFigure() == owner.getStartFigure()\n    || evt.getFigure() == owner.getEndFigure()) {\n    owner.setStartConnector(null);\n    owner.setEndConnector(null);\n    }\n     */\r\n    owner.fireFigureRequestRemove();\r\n}"},
 {"id":778, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":208, "classname":"org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler", "methodid":2333, "methodname":"org.jhotdraw.draw.LineConnectionFigure$ConnectionHandler.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    if (((e.getSource()) == (owner.getStartFigure())) || ((e.getSource()) == (owner.getEndFigure()))) {\r\n        owner.willChange();\r\n        owner.updateConnection();\r\n        owner.changed();\r\n    }\r\n}"},
 {"id":779, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2300, "methodname":"org.jhotdraw.draw.LineConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"public boolean canConnect(Connector start, Connector end) {\r\n    return (start.getOwner().canConnect()) && (end.getOwner().canConnect());\r\n}"},
 {"id":780, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2300, "methodname":"org.jhotdraw.draw.LineConnectionFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"public boolean canConnect(Connector start, Connector end) {\r\n    return (start.getOwner().canConnect()) && (end.getOwner().canConnect());\r\n}"},
 {"id":781, "parametername":"Connector newEnd", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2319, "methodname":"org.jhotdraw.draw.LineConnectionFigure.setEndConnector(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"public void setEndConnector(Connector newEnd) {\r\n    if (newEnd != (endConnector)) {\r\n        if ((endConnector) != null) {\r\n            getEndFigure().removeFigureListener(connectionHandler);\r\n            if ((getStartFigure()) != null) {\r\n                if ((getDrawing()) != null) {\r\n                    handleDisconnect(getStartConnector(), getEndConnector());\r\n                }\r\n            }\r\n        }\r\n        endConnector = newEnd;\r\n        if ((endConnector) != null) {\r\n            getEndFigure().addFigureListener(connectionHandler);\r\n            if (((getStartFigure()) != null) && ((getEndFigure()) != null)) {\r\n                if ((getDrawing()) != null) {\r\n                    handleConnect(getStartConnector(), getEndConnector());\r\n                    updateConnection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":782, "parametername":"Connector newStart", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2324, "methodname":"org.jhotdraw.draw.LineConnectionFigure.setStartConnector(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"public void setStartConnector(Connector newStart) {\r\n    if (newStart != (startConnector)) {\r\n        if ((startConnector) != null) {\r\n            getStartFigure().removeFigureListener(connectionHandler);\r\n            if ((getEndFigure()) != null) {\r\n                handleDisconnect(getStartConnector(), getEndConnector());\r\n            }\r\n        }\r\n        startConnector = newStart;\r\n        if ((startConnector) != null) {\r\n            getStartFigure().addFigureListener(connectionHandler);\r\n            if (((getStartFigure()) != null) && ((getEndFigure()) != null)) {\r\n                handleConnect(getStartConnector(), getEndConnector());\r\n                updateConnection();\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":783, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2297, "methodname":"org.jhotdraw.draw.LineConnectionFigure.addNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"// COMPOSITE FIGURES\r\n// LAYOUT\r\n/* public Liner getBezierPathLayouter() {\nreturn (Liner) getAttribute(BEZIER_PATH_LAYOUTER);\n}\npublic void setBezierPathLayouter(Liner newValue) {\nsetAttribute(BEZIER_PATH_LAYOUTER, newValue);\n}\n/**\nLays out the connection. This is called when the connection\nitself changes. By default the connection is recalculated\n/\npublic void layoutConnection() {\nif (getStartConnector() != null && getEndConnector() != null) {\nwillChange();\nLiner bpl = getBezierPathLayouter();\nif (bpl != null) {\nbpl.lineout(this);\n} else {\nif (getStartConnector() != null) {\nPoint2D.Double start = getStartConnector().findStart(this);\nif(start != null) {\nbasicSetStartPoint(start);\n}\n}\nif (getEndConnector() != null) {\nPoint2D.Double end = getEndConnector().findEnd(this);\n\nif(end != null) {\nbasicSetEndPoint(end);\n}\n}\n}\nchanged();\n}\n}\n */\r\n// CLONING\r\n// EVENT HANDLING\r\n/**\r\n * This method is invoked, when the Figure is being removed from a Drawing.\r\n * This method invokes handleConnect, if the Figure is connected.\r\n *\r\n * @see #handleConnect\r\n */\r\n@Override\r\npublic void addNotify(Drawing drawing) {\r\n    super.addNotify(drawing);\r\n    if (((getStartConnector()) != null) && ((getEndConnector()) != null)) {\r\n        handleConnect(getStartConnector(), getEndConnector());\r\n        updateConnection();\r\n    }\r\n}"},
 {"id":784, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2317, "methodname":"org.jhotdraw.draw.LineConnectionFigure.removeNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * This method is invoked, when the Figure is being removed from a Drawing.\r\n * This method invokes handleDisconnect, if the Figure is connected.\r\n *\r\n * @see #handleDisconnect\r\n */\r\n@Override\r\npublic void removeNotify(Drawing drawing) {\r\n    if (((getStartConnector()) != null) && ((getEndConnector()) != null)) {\r\n        handleDisconnect(getStartConnector(), getEndConnector());\r\n    }\r\n    // Note: we do not set the connectors to null here, because we\r\n    // need them when we are added back to a drawing again. For example,\r\n    // when an undo is performed, after the LineConnection has been\r\n    // deleted.\r\n    /* setStartConnector(null);\n    setEndConnector(null);\n     */\r\n    super.removeNotify(drawing);\r\n}"},
 {"id":785, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2310, "methodname":"org.jhotdraw.draw.LineConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is removed from a Drawing, this method is\r\n * invoked on behalf of the removeNotify call to the Figure.\r\n *\r\n * @see #removeNotify\r\n */\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n}"},
 {"id":786, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2310, "methodname":"org.jhotdraw.draw.LineConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is removed from a Drawing, this method is\r\n * invoked on behalf of the removeNotify call to the Figure.\r\n *\r\n * @see #removeNotify\r\n */\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n}"},
 {"id":787, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2309, "methodname":"org.jhotdraw.draw.LineConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is added to a Drawing this method is invoked\r\n * on behalf of the addNotify call to the Figure.\r\n */\r\nprotected void handleConnect(Connector start, Connector end) {\r\n}"},
 {"id":788, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2309, "methodname":"org.jhotdraw.draw.LineConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n * <p>\r\n * Note: This method is only invoked, when the Figure is part of a\r\n * Drawing. If the Figure is added to a Drawing this method is invoked\r\n * on behalf of the addNotify call to the Figure.\r\n */\r\nprotected void handleConnect(Connector start, Connector end) {\r\n}"},
 {"id":789, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2299, "methodname":"org.jhotdraw.draw.LineConnectionFigure.canConnect(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"public boolean canConnect(Connector start) {\r\n    return start.getOwner().canConnect();\r\n}"},
 {"id":790, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2311, "methodname":"org.jhotdraw.draw.LineConnectionFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((getLiner()) == null) && ((evt.getClickCount()) == 2)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":791, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2315, "methodname":"org.jhotdraw.draw.LineConnectionFigure.readPoints(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"// PERSISTENCE\r\n@Override\r\nprotected void readPoints(DOMInput in) throws IOException {\r\n    super.readPoints(in);\r\n    in.openElement(\"startConnector\");\r\n    setStartConnector(((Connector) (in.readObject())));\r\n    in.closeElement();\r\n    in.openElement(\"endConnector\");\r\n    setEndConnector(((Connector) (in.readObject())));\r\n    in.closeElement();\r\n}"},
 {"id":792, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2313, "methodname":"org.jhotdraw.draw.LineConnectionFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    readAttributes(in);\r\n    readLiner(in);\r\n    // Note: Points must be read after Liner, because Liner influences\r\n    // the location of the points.\r\n    readPoints(in);\r\n}"},
 {"id":793, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2314, "methodname":"org.jhotdraw.draw.LineConnectionFigure.readLiner(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"protected void readLiner(DOMInput in) throws IOException {\r\n    if ((in.getElementCount(\"liner\")) > 0) {\r\n        in.openElement(\"liner\");\r\n        liner = ((Liner) (in.readObject()));\r\n        in.closeElement();\r\n    } else {\r\n        liner = null;\r\n    }\r\n}"},
 {"id":794, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2329, "methodname":"org.jhotdraw.draw.LineConnectionFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    writePoints(out);\r\n    writeAttributes(out);\r\n    writeLiner(out);\r\n}"},
 {"id":795, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2330, "methodname":"org.jhotdraw.draw.LineConnectionFigure.writeLiner(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"protected void writeLiner(DOMOutput out) throws IOException {\r\n    if ((liner) != null) {\r\n        out.openElement(\"liner\");\r\n        out.writeObject(liner);\r\n        out.closeElement();\r\n    }\r\n}"},
 {"id":796, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2331, "methodname":"org.jhotdraw.draw.LineConnectionFigure.writePoints(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\nprotected void writePoints(DOMOutput out) throws IOException {\r\n    super.writePoints(out);\r\n    out.openElement(\"startConnector\");\r\n    out.writeObject(getStartConnector());\r\n    out.closeElement();\r\n    out.openElement(\"endConnector\");\r\n    out.writeObject(getEndConnector());\r\n    out.closeElement();\r\n}"},
 {"id":797, "parametername":"Liner newValue", "parametertype":"org.jhotdraw.draw.Liner", "parameterclass":212, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2321, "methodname":"org.jhotdraw.draw.LineConnectionFigure.setLiner(org.jhotdraw.draw.Liner)", "isreturn":0, "sourcecode":"public void setLiner(Liner newValue) {\r\n    this.liner = newValue;\r\n}"},
 {"id":798, "parametername":"BezierPath.Node p", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":209, "classname":"org.jhotdraw.draw.LineConnectionFigure", "methodid":2322, "methodname":"org.jhotdraw.draw.LineConnectionFigure.setNode(int,org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"@Override\r\npublic void setNode(int index, BezierPath.Node p) {\r\n    if ((index != 0) && (index != ((getNodeCount()) - 1))) {\r\n        if ((getStartConnector()) != null) {\r\n            Point2D.Double start = getStartConnector().findStart(this);\r\n            if (start != null) {\r\n                setStartPoint(start);\r\n            }\r\n        }\r\n        if ((getEndConnector()) != null) {\r\n            Point2D.Double end = getEndConnector().findEnd(this);\r\n            if (end != null) {\r\n                setEndPoint(end);\r\n            }\r\n        }\r\n    }\r\n    super.setNode(index, p);\r\n}"},
 {"id":799, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":210, "classname":"org.jhotdraw.draw.LineDecoration", "methodid":2335, "methodname":"org.jhotdraw.draw.LineDecoration.draw(java.awt.Graphics2D,org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Draws the decoration in the direction specified by the two Points.\r\n */\r\npublic void draw(Graphics2D g, Figure f, Point2D.Double p1, Point2D.Double p2);"},
 {"id":800, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":210, "classname":"org.jhotdraw.draw.LineDecoration", "methodid":2336, "methodname":"org.jhotdraw.draw.LineDecoration.getDecorationRadius(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the radius of the decorator.\r\n * This is used to crop the end of the line, to prevent it from being\r\n * drawn it over the decorator.\r\n */\r\npublic abstract double getDecorationRadius(Figure f);"},
 {"id":801, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":210, "classname":"org.jhotdraw.draw.LineDecoration", "methodid":2337, "methodname":"org.jhotdraw.draw.LineDecoration.getDrawingArea(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Returns the drawing bounds of the decorator.\r\n */\r\npublic Rectangle2D.Double getDrawingArea(Figure f, Point2D.Double p1, Point2D.Double p2);"},
 {"id":802, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":211, "classname":"org.jhotdraw.draw.LineFigure", "methodid":2341, "methodname":"org.jhotdraw.draw.LineFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && ((view.getHandleDetailLevel()) == 0)) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":803, "parametername":"ConnectionFigure figure", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":212, "classname":"org.jhotdraw.draw.Liner", "methodid":2344, "methodname":"org.jhotdraw.draw.Liner.lineout(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"/**\r\n * Layouts the Path. This may alter the number and type of points\r\n * in the Path.\r\n *\r\n * @param figure\r\n * \t\tThe ConnectionFigure to be lined out.\r\n */\r\npublic void lineout(ConnectionFigure figure);"},
 {"id":804, "parametername":"BezierPath path", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":212, "classname":"org.jhotdraw.draw.Liner", "methodid":2343, "methodname":"org.jhotdraw.draw.Liner.createHandles(org.jhotdraw.geom.BezierPath)", "isreturn":0, "sourcecode":"/**\r\n * Creates Handles for the Liner.\r\n * The ConnectionFigure can provide these handles to the user, in order\r\n * to let her control the lineout.\r\n *\r\n * @param path\r\n * \t\tThe path for which to create handles.\r\n */\r\npublic Collection<Handle> createHandles(BezierPath path);"},
 {"id":805, "parametername":"Figure presentationFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":213, "classname":"org.jhotdraw.draw.ListFigure", "methodid":2346, "methodname":"org.jhotdraw.draw.ListFigure.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public ListFigure(Figure presentationFigure) {\r\n    super(presentationFigure);\r\n    setLayouter(new VerticalLayouter());\r\n    CompositeFigure.LAYOUT_INSETS.basicSet(this, new Insets2D.Double(4, 8, 4, 8));\r\n}"},
 {"id":806, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":214, "classname":"org.jhotdraw.draw.Locator", "methodid":2347, "methodname":"org.jhotdraw.draw.Locator.locate(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Locates a position on the provided figure.\r\n *\r\n * @return a point on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner);"},
 {"id":807, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":214, "classname":"org.jhotdraw.draw.Locator", "methodid":2348, "methodname":"org.jhotdraw.draw.Locator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Locates a position on the provided figure relative to the dependent\r\n * figure.\r\n *\r\n * @return a point on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner, Figure dependent);"},
 {"id":808, "parametername":"Figure dependent", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":214, "classname":"org.jhotdraw.draw.Locator", "methodid":2348, "methodname":"org.jhotdraw.draw.Locator.locate(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Locates a position on the provided figure relative to the dependent\r\n * figure.\r\n *\r\n * @return a point on the figure.\r\n */\r\npublic Point2D.Double locate(Figure owner, Figure dependent);"},
 {"id":809, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":215, "classname":"org.jhotdraw.draw.LocatorConnector", "methodid":2350, "methodname":"org.jhotdraw.draw.LocatorConnector.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"public LocatorConnector(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}"},
 {"id":810, "parametername":"Locator l", "parametertype":"org.jhotdraw.draw.Locator", "parameterclass":214, "classid":215, "classname":"org.jhotdraw.draw.LocatorConnector", "methodid":2350, "methodname":"org.jhotdraw.draw.LocatorConnector.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"public LocatorConnector(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}"},
 {"id":811, "parametername":"ConnectionFigure connection", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":215, "classname":"org.jhotdraw.draw.LocatorConnector", "methodid":2354, "methodname":"org.jhotdraw.draw.LocatorConnector.locate(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"protected Point2D.Double locate(ConnectionFigure connection) {\r\n    return locator.locate(getOwner());\r\n}"},
 {"id":812, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":215, "classname":"org.jhotdraw.draw.LocatorConnector", "methodid":2355, "methodname":"org.jhotdraw.draw.LocatorConnector.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    in.openElement(\"locator\");\r\n    this.locator = ((Locator) (in.readObject(0)));\r\n    in.closeElement();\r\n}"},
 {"id":813, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":215, "classname":"org.jhotdraw.draw.LocatorConnector", "methodid":2356, "methodname":"org.jhotdraw.draw.LocatorConnector.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.openElement(\"locator\");\r\n    out.writeObject(locator);\r\n    out.closeElement();\r\n}"},
 {"id":814, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":216, "classname":"org.jhotdraw.draw.LocatorHandle", "methodid":2357, "methodname":"org.jhotdraw.draw.LocatorHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"/**\r\n * Initializes the LocatorHandle with the given Locator.\r\n */\r\npublic LocatorHandle(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}"},
 {"id":815, "parametername":"Locator l", "parametertype":"org.jhotdraw.draw.Locator", "parameterclass":214, "classid":216, "classname":"org.jhotdraw.draw.LocatorHandle", "methodid":2357, "methodname":"org.jhotdraw.draw.LocatorHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"/**\r\n * Initializes the LocatorHandle with the given Locator.\r\n */\r\npublic LocatorHandle(Figure owner, Locator l) {\r\n    super(owner);\r\n    locator = l;\r\n}"},
 {"id":816, "parametername":"CompositeFigure compositeFigure", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":217, "classname":"org.jhotdraw.draw.LocatorLayouter", "methodid":2362, "methodname":"org.jhotdraw.draw.LocatorLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"public Rectangle2D.Double calculateLayout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Rectangle2D.Double bounds = null;\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        Locator locator = getLocator(child);\r\n        Rectangle2D.Double r;\r\n        if (locator == null) {\r\n            r = child.getBounds();\r\n        } else {\r\n            Point2D.Double p = locator.locate(compositeFigure);\r\n            Dimension2DDouble d = child.getPreferredSize();\r\n            r = new Rectangle2D.Double(p.x, p.y, d.width, d.height);\r\n        }\r\n        if (!(r.isEmpty())) {\r\n            if (bounds == null) {\r\n                bounds = r;\r\n            } else {\r\n                bounds.add(r);\r\n            }\r\n        }\r\n    }\r\n    return bounds == null ? new Rectangle2D.Double() : bounds;\r\n}"},
 {"id":817, "parametername":"CompositeFigure compositeFigure", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":217, "classname":"org.jhotdraw.draw.LocatorLayouter", "methodid":2364, "methodname":"org.jhotdraw.draw.LocatorLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"public Rectangle2D.Double layout(CompositeFigure compositeFigure, Point2D.Double anchor, Point2D.Double lead) {\r\n    Rectangle2D.Double bounds = null;\r\n    for (Figure child : compositeFigure.getChildren()) {\r\n        Locator locator = getLocator(child);\r\n        Rectangle2D.Double r;\r\n        if (locator == null) {\r\n            r = child.getBounds();\r\n        } else {\r\n            Point2D.Double p = locator.locate(compositeFigure, child);\r\n            Dimension2DDouble d = child.getPreferredSize();\r\n            r = new Rectangle2D.Double(p.x, p.y, d.width, d.height);\r\n        }\r\n        child.willChange();\r\n        child.setBounds(new Point2D.Double(r.getMinX(), r.getMinY()), new Point2D.Double(r.getMaxX(), r.getMaxY()));\r\n        child.changed();\r\n        if (!(r.isEmpty())) {\r\n            if (bounds == null) {\r\n                bounds = r;\r\n            } else {\r\n                bounds.add(r);\r\n            }\r\n        }\r\n    }\r\n    return bounds == null ? new Rectangle2D.Double() : bounds;\r\n}"},
 {"id":818, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":217, "classname":"org.jhotdraw.draw.LocatorLayouter", "methodid":2363, "methodname":"org.jhotdraw.draw.LocatorLayouter.getLocator(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"private Locator getLocator(Figure f) {\r\n    return LocatorLayouter.LAYOUT_LOCATOR.get(f);\r\n}"},
 {"id":819, "parametername":"org.jhotdraw.draw.Locator", "parametertype":"org.jhotdraw.draw.Locator", "parameterclass":214, "classid":217, "classname":"org.jhotdraw.draw.LocatorLayouter", "methodid":2363, "methodname":"org.jhotdraw.draw.LocatorLayouter.getLocator(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"private Locator getLocator(Figure f) {\r\n    return LocatorLayouter.LAYOUT_LOCATOR.get(f);\r\n}"},
 {"id":820, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2365, "methodname":"org.jhotdraw.draw.MoveHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic MoveHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}"},
 {"id":821, "parametername":"Locator locator", "parametertype":"org.jhotdraw.draw.Locator", "parameterclass":214, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2365, "methodname":"org.jhotdraw.draw.MoveHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic MoveHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}"},
 {"id":822, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2366, "methodname":"org.jhotdraw.draw.MoveHandle.addMoveHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addMoveHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(MoveHandle.southEast(f));\r\n    handles.add(MoveHandle.southWest(f));\r\n    handles.add(MoveHandle.northEast(f));\r\n    handles.add(MoveHandle.northWest(f));\r\n}"},
 {"id":823, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2374, "methodname":"org.jhotdraw.draw.MoveHandle.south(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle south(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.south());\r\n}"},
 {"id":824, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2374, "methodname":"org.jhotdraw.draw.MoveHandle.south(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle south(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.south());\r\n}"},
 {"id":825, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2375, "methodname":"org.jhotdraw.draw.MoveHandle.southEast(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle southEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southEast());\r\n}"},
 {"id":826, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2375, "methodname":"org.jhotdraw.draw.MoveHandle.southEast(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle southEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southEast());\r\n}"},
 {"id":827, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2376, "methodname":"org.jhotdraw.draw.MoveHandle.southWest(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle southWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southWest());\r\n}"},
 {"id":828, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2376, "methodname":"org.jhotdraw.draw.MoveHandle.southWest(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle southWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.southWest());\r\n}"},
 {"id":829, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2371, "methodname":"org.jhotdraw.draw.MoveHandle.north(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle north(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.north());\r\n}"},
 {"id":830, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2371, "methodname":"org.jhotdraw.draw.MoveHandle.north(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle north(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.north());\r\n}"},
 {"id":831, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2372, "methodname":"org.jhotdraw.draw.MoveHandle.northEast(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle northEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northEast());\r\n}"},
 {"id":832, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2372, "methodname":"org.jhotdraw.draw.MoveHandle.northEast(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle northEast(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northEast());\r\n}"},
 {"id":833, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2373, "methodname":"org.jhotdraw.draw.MoveHandle.northWest(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle northWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northWest());\r\n}"},
 {"id":834, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2373, "methodname":"org.jhotdraw.draw.MoveHandle.northWest(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle northWest(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.northWest());\r\n}"},
 {"id":835, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2368, "methodname":"org.jhotdraw.draw.MoveHandle.east(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle east(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.east());\r\n}"},
 {"id":836, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2368, "methodname":"org.jhotdraw.draw.MoveHandle.east(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle east(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.east());\r\n}"},
 {"id":837, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2380, "methodname":"org.jhotdraw.draw.MoveHandle.west(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle west(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.west());\r\n}"},
 {"id":838, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":218, "classname":"org.jhotdraw.draw.MoveHandle", "methodid":2380, "methodname":"org.jhotdraw.draw.MoveHandle.west(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle west(Figure owner) {\r\n    return new MoveHandle(owner, RelativeLocator.west());\r\n}"},
 {"id":839, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":219, "classname":"org.jhotdraw.draw.NullHandle", "methodid":2381, "methodname":"org.jhotdraw.draw.NullHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic NullHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}"},
 {"id":840, "parametername":"Locator locator", "parametertype":"org.jhotdraw.draw.Locator", "parameterclass":214, "classid":219, "classname":"org.jhotdraw.draw.NullHandle", "methodid":2381, "methodname":"org.jhotdraw.draw.NullHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic NullHandle(Figure owner, Locator locator) {\r\n    super(owner, locator);\r\n}"},
 {"id":841, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":219, "classname":"org.jhotdraw.draw.NullHandle", "methodid":2382, "methodname":"org.jhotdraw.draw.NullHandle.addLeadHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Creates handles for each lead of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addLeadHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new NullHandle(f, new RelativeLocator(0.0F, 0.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(0.0F, 1.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(1.0F, 0.0F)));\r\n    handles.add(new NullHandle(f, new RelativeLocator(1.0F, 1.0F)));\r\n}"},
 {"id":842, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":221, "classname":"org.jhotdraw.draw.OutputFormat", "methodid":2395, "methodname":"org.jhotdraw.draw.OutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Writes a Drawing into a file.\r\n *\r\n * @param file\r\n * \t\tThe file.\r\n * @param drawing\r\n * \t\tThe drawing.\r\n */\r\npublic void write(File file, Drawing drawing) throws IOException;"},
 {"id":843, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":221, "classname":"org.jhotdraw.draw.OutputFormat", "methodid":2396, "methodname":"org.jhotdraw.draw.OutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Writes a Drawing into an output stream.\r\n *\r\n * @param out\r\n * \t\tThe output stream.\r\n * @param drawing\r\n * \t\tThe drawing.\r\n */\r\npublic void write(OutputStream out, Drawing drawing) throws IOException;"},
 {"id":844, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":221, "classname":"org.jhotdraw.draw.OutputFormat", "methodid":2391, "methodname":"org.jhotdraw.draw.OutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)", "isreturn":0, "sourcecode":"/**\r\n * Creates a Transferable for the specified list of Figures.\r\n *\r\n * @param drawing\r\n * \t\tThe drawing.\r\n * @param figures\r\n * \t\tA list of figures of the drawing.\r\n * @param scaleFactor\r\n * \t\tThe factor to be used, when the Transferable creates\r\n * \t\tan image with a fixed size from the figures.\r\n * @return The Transferable.\r\n */\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException;"},
 {"id":845, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":222, "classname":"org.jhotdraw.draw.PerpendicularBar", "methodid":2399, "methodname":"org.jhotdraw.draw.PerpendicularBar.getDecoratorPath(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Calculates the path of the decorator...a simple line\r\n * perpendicular to the figure.\r\n */\r\nprotected GeneralPath getDecoratorPath(Figure f) {\r\n    GeneralPath path = new GeneralPath();\r\n    double halfHeight = (height) / 2;\r\n    path.moveTo(((float) (+halfHeight)), 0);\r\n    path.lineTo(((float) (-halfHeight)), 0);\r\n    return path;\r\n}"},
 {"id":846, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":222, "classname":"org.jhotdraw.draw.PerpendicularBar", "methodid":2400, "methodname":"org.jhotdraw.draw.PerpendicularBar.getDecoratorPathRadius(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Calculates the radius of the decorator path.\r\n */\r\nprotected double getDecoratorPathRadius(Figure f) {\r\n    return 0.5;\r\n}"},
 {"id":847, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":222, "classname":"org.jhotdraw.draw.PerpendicularBar", "methodid":2401, "methodname":"org.jhotdraw.draw.PerpendicularBar.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) {\r\n    height = in.getAttribute(\"height\", 10);\r\n}"},
 {"id":848, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":222, "classname":"org.jhotdraw.draw.PerpendicularBar", "methodid":2402, "methodname":"org.jhotdraw.draw.PerpendicularBar.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) {\r\n    out.addAttribute(\"height\", height);\r\n}"},
 {"id":849, "parametername":"ImageHolderFigure prototype", "parametertype":"org.jhotdraw.draw.ImageHolderFigure", "parameterclass":199, "classid":223, "classname":"org.jhotdraw.draw.PictImageInputFormat", "methodid":2403, "methodname":"org.jhotdraw.draw.PictImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new image output format for Portable Network Graphics PNG.\r\n */\r\npublic PictImageInputFormat(ImageHolderFigure prototype) {\r\n    this(prototype, \"PICT\", \"PICT (pct)\", \"pct\", BufferedImage.TYPE_INT_ARGB);\r\n}"},
 {"id":850, "parametername":"ImageHolderFigure prototype", "parametertype":"org.jhotdraw.draw.ImageHolderFigure", "parameterclass":199, "classid":223, "classname":"org.jhotdraw.draw.PictImageInputFormat", "methodid":2404, "methodname":"org.jhotdraw.draw.PictImageInputFormat.-init-(org.jhotdraw.draw.ImageHolderFigure,java.lang.String,java.lang.String,java.lang.String,int)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * \t\tThe format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * \t\tThe format description to be used for the file filter.\r\n * @param fileExtension\r\n * \t\tThe file extension to be used for file filter.\r\n * @param bufferedImageType\r\n * \t\tThe BufferedImage type used to produce the image.\r\n * \t\tThe value of this parameter must match with the format name.\r\n */\r\nprivate PictImageInputFormat(ImageHolderFigure prototype, String formatName, String description, String fileExtension, int bufferedImageType) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.imageType = bufferedImageType;\r\n}"},
 {"id":851, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":223, "classname":"org.jhotdraw.draw.PictImageInputFormat", "methodid":2412, "methodname":"org.jhotdraw.draw.PictImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}"},
 {"id":852, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":223, "classname":"org.jhotdraw.draw.PictImageInputFormat", "methodid":2413, "methodname":"org.jhotdraw.draw.PictImageInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n        if (img == null) {\r\n            throw new IOException(\"Couldnt read pict image\");\r\n        }\r\n        ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n        figure.setBufferedImage(Images.toBufferedImage(img));\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n        if (replace) {\r\n            drawing.removeAllChildren();\r\n        }\r\n        drawing.basicAdd(figure);\r\n    } finally {\r\n        in.close();\r\n    }\r\n}"},
 {"id":853, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":223, "classname":"org.jhotdraw.draw.PictImageInputFormat", "methodid":2414, "methodname":"org.jhotdraw.draw.PictImageInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    try {\r\n        Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n        if (img == null) {\r\n            throw new IOException(\"Couldnt read pict image\");\r\n        }\r\n        ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n        figure.setBufferedImage(Images.toBufferedImage(img));\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n        if (replace) {\r\n            drawing.removeAllChildren();\r\n        }\r\n        drawing.basicAdd(figure);\r\n    } finally {\r\n        in.close();\r\n    }\r\n}"},
 {"id":854, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":223, "classname":"org.jhotdraw.draw.PictImageInputFormat", "methodid":2411, "methodname":"org.jhotdraw.draw.PictImageInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    Object data = t.getTransferData(PictImageInputFormat.PICT_FLAVOR);\r\n    if (data instanceof InputStream) {\r\n        InputStream in = null;\r\n        try {\r\n            in = ((InputStream) (data));\r\n            Image img = PictImageInputFormat.getImageFromPictStream(in);\r\n            if (img == null) {\r\n                throw new IOException(\"Couldnt read pict image\");\r\n            }\r\n            ImageHolderFigure figure = ((ImageHolderFigure) (prototype.clone()));\r\n            figure.setBufferedImage(Images.toBufferedImage(img));\r\n            figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(figure.getBufferedImage().getWidth(), figure.getBufferedImage().getHeight()));\r\n            if (replace) {\r\n                drawing.removeAllChildren();\r\n            }\r\n            drawing.add(figure);\r\n        } finally {\r\n            in.close();\r\n        }\r\n    }\r\n}"},
 {"id":855, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2436, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.indexOf(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}"},
 {"id":856, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2416, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.basicAdd(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void basicAdd(int index, Figure figure) {\r\n    children.add(index, figure);\r\n    quadTree.add(figure, figure.getDrawingArea());\r\n    figure.addFigureListener(figureHandler);\r\n    needsSorting = true;\r\n}"},
 {"id":857, "parametername":"Figure ignore", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2428, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p)))\r\n                        return f;\r\n\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}"},
 {"id":858, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2428, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p)))\r\n                        return f;\r\n\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}"},
 {"id":859, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2426, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":860, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2426, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":861, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2418, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.bringToFront(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void bringToFront(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}"},
 {"id":862, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2437, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.sendToBack(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void sendToBack(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(0, figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}"},
 {"id":863, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2419, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.contains(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}"},
 {"id":864, "parametername":"Dimension2DDouble newValue", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":225, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure", "methodid":2438, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = newValue;\r\n    firePropertyChange(\"canvasSize\", oldValue, newValue);\r\n}"},
 {"id":865, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":224, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler", "methodid":2441, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.areaInvalidated(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void areaInvalidated(FigureEvent e) {\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}"},
 {"id":866, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":224, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler", "methodid":2442, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    quadTree.remove(e.getFigure());\r\n    quadTree.add(e.getFigure(), e.getFigure().getDrawingArea());\r\n    needsSorting = true;\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}"},
 {"id":867, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":224, "classname":"org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler", "methodid":2443, "methodname":"org.jhotdraw.draw.QuadTreeCompositeFigure$FigureHandler.figureRequestRemove(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureRequestRemove(FigureEvent e) {\r\n    remove(e.getFigure());\r\n}"},
 {"id":868, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2469, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.indexOf(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic int indexOf(Figure figure) {\r\n    return children.indexOf(figure);\r\n}"},
 {"id":869, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2446, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.basicAdd(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic void basicAdd(int index, Figure figure) {\r\n    super.basicAdd(index, figure);\r\n    quadTree.add(figure, figure.getDrawingArea());\r\n    needsSorting = true;\r\n}"},
 {"id":870, "parametername":"Figure ignore", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2461, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p))) {\r\n                        return f;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}"},
 {"id":871, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2461, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.findFigureExcept(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public Figure findFigureExcept(Point2D.Double p, Figure ignore) {\r\n    Collection<Figure> c = quadTree.findContains(p);\r\n    switch (c.size()) {\r\n        case 0 :\r\n            {\r\n                return null;\r\n            }\r\n        case 1 :\r\n            {\r\n                Figure f = c.iterator().next();\r\n                return (f == ignore) || (!(f.contains(p))) ? null : f;\r\n            }\r\n        default :\r\n            {\r\n                for (Figure f : getFiguresFrontToBack()) {\r\n                    if ((f != ignore) && (f.contains(p))) {\r\n                        return f;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n    }\r\n}"},
 {"id":872, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2459, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":873, "parametername":"org.jhotdraw.draw.Figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2459, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.findFigureBehind(java.awt.geom.Point2D$Double,org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public Figure findFigureBehind(Point2D.Double p, Figure figure) {\r\n    boolean isBehind = false;\r\n    for (Figure f : getFiguresFrontToBack()) {\r\n        if (isBehind) {\r\n            if ((f.isVisible()) && (f.contains(p))) {\r\n                return f;\r\n            }\r\n        } else {\r\n            isBehind = figure == f;\r\n        }\r\n    }\r\n    return null;\r\n}"},
 {"id":874, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2448, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.bringToFront(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic void bringToFront(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}"},
 {"id":875, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2470, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.sendToBack(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic void sendToBack(Figure figure) {\r\n    if (children.remove(figure)) {\r\n        children.add(0, figure);\r\n        needsSorting = true;\r\n        fireAreaInvalidated(figure.getDrawingArea());\r\n    }\r\n}"},
 {"id":876, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2450, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.contains(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic boolean contains(Figure f) {\r\n    return children.contains(f);\r\n}"},
 {"id":877, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2471, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\nprotected void setAttributeOnChildren(AttributeKey key, Object newValue) {\r\n    // empty\r\n}"},
 {"id":878, "parametername":"Dimension2DDouble newValue", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":227, "classname":"org.jhotdraw.draw.QuadTreeDrawing", "methodid":2472, "methodname":"org.jhotdraw.draw.QuadTreeDrawing.setCanvasSize(org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"public void setCanvasSize(Dimension2DDouble newValue) {\r\n    Dimension2DDouble oldValue = canvasSize;\r\n    canvasSize = (newValue == null) ? null : ((Dimension2DDouble) (newValue.clone()));\r\n    firePropertyChange(\"canvasSize\", oldValue, newValue);\r\n}"},
 {"id":879, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":226, "classname":"org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler", "methodid":2475, "methodname":"org.jhotdraw.draw.QuadTreeDrawing$QuadTreeEventHandler.figureChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void figureChanged(FigureEvent e) {\r\n    quadTree.remove(e.getFigure());\r\n    quadTree.add(e.getFigure(), e.getFigure().getDrawingArea());\r\n    needsSorting = true;\r\n    invalidate();\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}"},
 {"id":880, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":229, "classname":"org.jhotdraw.draw.RelativeDecoratorLocator", "methodid":2493, "methodname":"org.jhotdraw.draw.RelativeDecoratorLocator.locate(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner) {\r\n    Rectangle2D.Double r;\r\n    if ((owner instanceof DecoratedFigure) && ((((DecoratedFigure) (owner)).getDecorator()) != null)) {\r\n        r = ((DecoratedFigure) (owner)).getDecorator().getBounds();\r\n    } else {\r\n        r = owner.getBounds();\r\n    }\r\n    if (isQuadratic) {\r\n        double side = Math.max(r.width, r.height);\r\n        r.x -= (side - (r.width)) / 2;\r\n        r.y -= (side - (r.height)) / 2;\r\n        r.width = r.height = side;\r\n    }\r\n    return new Point2D.Double(((r.x) + ((r.width) * (relativeX))), ((r.y) + ((r.height) * (relativeY))));\r\n}"},
 {"id":881, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":230, "classname":"org.jhotdraw.draw.RelativeLocator", "methodid":2510, "methodname":"org.jhotdraw.draw.RelativeLocator.locate(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public Point2D.Double locate(Figure owner) {\r\n    Rectangle2D.Double bounds = owner.getBounds();\r\n    if ((owner instanceof DecoratedFigure) && ((((DecoratedFigure) (owner)).getDecorator()) != null)) {\r\n        Insets2D.Double insets = AttributeKeys.DECORATOR_INSETS.get(owner);\r\n        if (insets != null) {\r\n            insets.addTo(bounds);\r\n        }\r\n    }\r\n    Point2D.Double location;\r\n    if (isTransform) {\r\n        location = new Point2D.Double(((bounds.x) + ((bounds.width) * (relativeX))), ((bounds.y) + ((bounds.height) * (relativeY))));\r\n        if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n            AttributeKeys.TRANSFORM.get(owner).transform(location, location);\r\n        }\r\n    } else {\r\n        if ((AttributeKeys.TRANSFORM.get(owner)) != null) {\r\n            Rectangle2D r = AttributeKeys.TRANSFORM.get(owner).createTransformedShape(bounds).getBounds2D();\r\n            bounds.x = r.getX();\r\n            bounds.y = r.getY();\r\n            bounds.width = r.getWidth();\r\n            bounds.height = r.getHeight();\r\n        }\r\n        location = new Point2D.Double(((bounds.x) + ((bounds.width) * (relativeX))), ((bounds.y) + ((bounds.height) * (relativeY))));\r\n    }\r\n    return location;\r\n}"},
 {"id":882, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":230, "classname":"org.jhotdraw.draw.RelativeLocator", "methodid":2526, "methodname":"org.jhotdraw.draw.RelativeLocator.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) {\r\n    out.addAttribute(\"relativeX\", relativeX, 0.5);\r\n    out.addAttribute(\"relativeY\", relativeY, 0.5);\r\n}"},
 {"id":883, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":230, "classname":"org.jhotdraw.draw.RelativeLocator", "methodid":2517, "methodname":"org.jhotdraw.draw.RelativeLocator.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) {\r\n    relativeX = in.getAttribute(\"relativeX\", 0.5);\r\n    relativeY = in.getAttribute(\"relativeY\", 0.5);\r\n}"},
 {"id":884, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":235, "classname":"org.jhotdraw.draw.ResizeHandleKit$ResizeHandle", "methodid":2557, "methodname":"org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"ResizeHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}"},
 {"id":885, "parametername":"Locator loc", "parametertype":"org.jhotdraw.draw.Locator", "parameterclass":214, "classid":235, "classname":"org.jhotdraw.draw.ResizeHandleKit$ResizeHandle", "methodid":2557, "methodname":"org.jhotdraw.draw.ResizeHandleKit$ResizeHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"ResizeHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}"},
 {"id":886, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":232, "classname":"org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle", "methodid":2545, "methodname":"org.jhotdraw.draw.ResizeHandleKit$NorthEastHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"NorthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northEast(true));\r\n}"},
 {"id":887, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":231, "classname":"org.jhotdraw.draw.ResizeHandleKit$EastHandle", "methodid":2541, "methodname":"org.jhotdraw.draw.ResizeHandleKit$EastHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"EastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.east(true));\r\n}"},
 {"id":888, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":233, "classname":"org.jhotdraw.draw.ResizeHandleKit$NorthHandle", "methodid":2549, "methodname":"org.jhotdraw.draw.ResizeHandleKit$NorthHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"NorthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.north(true));\r\n}"},
 {"id":889, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":234, "classname":"org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle", "methodid":2553, "methodname":"org.jhotdraw.draw.ResizeHandleKit$NorthWestHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"NorthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northWest(true));\r\n}"},
 {"id":890, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":236, "classname":"org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle", "methodid":2565, "methodname":"org.jhotdraw.draw.ResizeHandleKit$SouthEastHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"SouthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southEast(true));\r\n}"},
 {"id":891, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":237, "classname":"org.jhotdraw.draw.ResizeHandleKit$SouthHandle", "methodid":2569, "methodname":"org.jhotdraw.draw.ResizeHandleKit$SouthHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"SouthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.south(true));\r\n}"},
 {"id":892, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":238, "classname":"org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle", "methodid":2573, "methodname":"org.jhotdraw.draw.ResizeHandleKit$SouthWestHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"SouthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southWest(true));\r\n}"},
 {"id":893, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":239, "classname":"org.jhotdraw.draw.ResizeHandleKit$WestHandle", "methodid":2577, "methodname":"org.jhotdraw.draw.ResizeHandleKit$WestHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"WestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.west(true));\r\n}"},
 {"id":894, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2530, "methodname":"org.jhotdraw.draw.ResizeHandleKit.addCornerResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addCornerResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(ResizeHandleKit.southEast(f));\r\n    handles.add(ResizeHandleKit.southWest(f));\r\n    handles.add(ResizeHandleKit.northEast(f));\r\n    handles.add(ResizeHandleKit.northWest(f));\r\n}"},
 {"id":895, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2531, "methodname":"org.jhotdraw.draw.ResizeHandleKit.addEdgeResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addEdgeResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(ResizeHandleKit.south(f));\r\n    handles.add(ResizeHandleKit.north(f));\r\n    handles.add(ResizeHandleKit.east(f));\r\n    handles.add(ResizeHandleKit.west(f));\r\n}"},
 {"id":896, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2532, "methodname":"org.jhotdraw.draw.ResizeHandleKit.addResizeHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addResizeHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f));\r\n    ResizeHandleKit.addCornerResizeHandles(f, handles);\r\n    ResizeHandleKit.addEdgeResizeHandles(f, handles);\r\n}"},
 {"id":897, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2537, "methodname":"org.jhotdraw.draw.ResizeHandleKit.south(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle south(Figure owner) {\r\n    return new ResizeHandleKit.SouthHandle(owner);\r\n}"},
 {"id":898, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2537, "methodname":"org.jhotdraw.draw.ResizeHandleKit.south(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle south(Figure owner) {\r\n    return new ResizeHandleKit.SouthHandle(owner);\r\n}"},
 {"id":899, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2538, "methodname":"org.jhotdraw.draw.ResizeHandleKit.southEast(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle southEast(Figure owner) {\r\n    return new ResizeHandleKit.SouthEastHandle(owner);\r\n}"},
 {"id":900, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2538, "methodname":"org.jhotdraw.draw.ResizeHandleKit.southEast(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle southEast(Figure owner) {\r\n    return new ResizeHandleKit.SouthEastHandle(owner);\r\n}"},
 {"id":901, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2539, "methodname":"org.jhotdraw.draw.ResizeHandleKit.southWest(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle southWest(Figure owner) {\r\n    return new ResizeHandleKit.SouthWestHandle(owner);\r\n}"},
 {"id":902, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2539, "methodname":"org.jhotdraw.draw.ResizeHandleKit.southWest(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle southWest(Figure owner) {\r\n    return new ResizeHandleKit.SouthWestHandle(owner);\r\n}"},
 {"id":903, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2534, "methodname":"org.jhotdraw.draw.ResizeHandleKit.north(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle north(Figure owner) {\r\n    return new ResizeHandleKit.NorthHandle(owner);\r\n}"},
 {"id":904, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2534, "methodname":"org.jhotdraw.draw.ResizeHandleKit.north(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle north(Figure owner) {\r\n    return new ResizeHandleKit.NorthHandle(owner);\r\n}"},
 {"id":905, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2535, "methodname":"org.jhotdraw.draw.ResizeHandleKit.northEast(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle northEast(Figure owner) {\r\n    return new ResizeHandleKit.NorthEastHandle(owner);\r\n}"},
 {"id":906, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2535, "methodname":"org.jhotdraw.draw.ResizeHandleKit.northEast(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle northEast(Figure owner) {\r\n    return new ResizeHandleKit.NorthEastHandle(owner);\r\n}"},
 {"id":907, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2536, "methodname":"org.jhotdraw.draw.ResizeHandleKit.northWest(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle northWest(Figure owner) {\r\n    return new ResizeHandleKit.NorthWestHandle(owner);\r\n}"},
 {"id":908, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2536, "methodname":"org.jhotdraw.draw.ResizeHandleKit.northWest(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle northWest(Figure owner) {\r\n    return new ResizeHandleKit.NorthWestHandle(owner);\r\n}"},
 {"id":909, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2533, "methodname":"org.jhotdraw.draw.ResizeHandleKit.east(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle east(Figure owner) {\r\n    return new ResizeHandleKit.EastHandle(owner);\r\n}"},
 {"id":910, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2533, "methodname":"org.jhotdraw.draw.ResizeHandleKit.east(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle east(Figure owner) {\r\n    return new ResizeHandleKit.EastHandle(owner);\r\n}"},
 {"id":911, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2540, "methodname":"org.jhotdraw.draw.ResizeHandleKit.west(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle west(Figure owner) {\r\n    return new ResizeHandleKit.WestHandle(owner);\r\n}"},
 {"id":912, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":240, "classname":"org.jhotdraw.draw.ResizeHandleKit", "methodid":2540, "methodname":"org.jhotdraw.draw.ResizeHandleKit.west(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle west(Figure owner) {\r\n    return new ResizeHandleKit.WestHandle(owner);\r\n}"},
 {"id":913, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":241, "classname":"org.jhotdraw.draw.RestoreDataEdit", "methodid":2581, "methodname":"org.jhotdraw.draw.RestoreDataEdit.-init-(org.jhotdraw.draw.Figure,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic RestoreDataEdit(Figure figure, Object oldRestoreData) {\r\n    this.figure = figure;\r\n    this.oldRestoreData = oldRestoreData;\r\n    this.newRestoreData = figure.getTransformRestoreData();\r\n}"},
 {"id":914, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":242, "classname":"org.jhotdraw.draw.RotateHandle", "methodid":2587, "methodname":"org.jhotdraw.draw.RotateHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic RotateHandle(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":915, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":244, "classname":"org.jhotdraw.draw.RoundRectangleFigure", "methodid":2599, "methodname":"org.jhotdraw.draw.RoundRectangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}"},
 {"id":916, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":244, "classname":"org.jhotdraw.draw.RoundRectangleFigure", "methodid":2599, "methodname":"org.jhotdraw.draw.RoundRectangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}"},
 {"id":917, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":244, "classname":"org.jhotdraw.draw.RoundRectangleFigure", "methodid":2598, "methodname":"org.jhotdraw.draw.RoundRectangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}"},
 {"id":918, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":244, "classname":"org.jhotdraw.draw.RoundRectangleFigure", "methodid":2598, "methodname":"org.jhotdraw.draw.RoundRectangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopRoundRectangleConnector(this);\r\n}"},
 {"id":919, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":244, "classname":"org.jhotdraw.draw.RoundRectangleFigure", "methodid":2605, "methodname":"org.jhotdraw.draw.RoundRectangleFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"// EVENT HANDLING\r\n// PERSISTENCE\r\n@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    roundrect.arcwidth = in.getAttribute(\"arcWidth\", RoundRectangleFigure.DEFAULT_ARC);\r\n    roundrect.archeight = in.getAttribute(\"arcHeight\", RoundRectangleFigure.DEFAULT_ARC);\r\n}"},
 {"id":920, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":244, "classname":"org.jhotdraw.draw.RoundRectangleFigure", "methodid":2610, "methodname":"org.jhotdraw.draw.RoundRectangleFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.addAttribute(\"arcWidth\", roundrect.arcwidth);\r\n    out.addAttribute(\"arcHeight\", roundrect.archeight);\r\n}"},
 {"id":921, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":245, "classname":"org.jhotdraw.draw.RoundRectangleRadiusHandle", "methodid":2611, "methodname":"org.jhotdraw.draw.RoundRectangleRadiusHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic RoundRectangleRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":922, "parametername":"RoundRectangleFigure owner", "parametertype":"org.jhotdraw.draw.RoundRectangleFigure", "parameterclass":244, "classid":246, "classname":"org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit", "methodid":2620, "methodname":"org.jhotdraw.draw.RoundRectangleRadiusUndoableEdit.-init-(org.jhotdraw.draw.RoundRectangleFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"public RoundRectangleRadiusUndoableEdit(RoundRectangleFigure owner, Point2D.Double oldArc, Point2D.Double newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}"},
 {"id":923, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2627, "methodname":"org.jhotdraw.draw.SelectionTool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    tracker.activate(editor);\r\n}"},
 {"id":924, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2629, "methodname":"org.jhotdraw.draw.SelectionTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void deactivate(DrawingEditor editor) {\r\n    super.deactivate(editor);\r\n    tracker.deactivate(editor);\r\n}"},
 {"id":925, "parametername":"Tool newTracker", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2649, "methodname":"org.jhotdraw.draw.SelectionTool.setTracker(org.jhotdraw.draw.Tool)", "isreturn":0, "sourcecode":"protected void setTracker(Tool newTracker) {\r\n    if ((tracker) != null) {\r\n        tracker.deactivate(getEditor());\r\n        tracker.removeToolListener(this);\r\n    }\r\n    tracker = newTracker;\r\n    if ((tracker) != null) {\r\n        tracker.activate(getEditor());\r\n        tracker.addToolListener(this);\r\n    }\r\n}"},
 {"id":926, "parametername":"Handle handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2632, "methodname":"org.jhotdraw.draw.SelectionTool.getHandleTracker(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"/**\r\n * Method to get a {@code HandleTracker} which handles user interaction\r\n * for the specified handle.\r\n */\r\nprotected HandleTracker getHandleTracker(Handle handle) {\r\n    if ((handleTracker) == null) {\r\n        handleTracker = new DefaultHandleTracker();\r\n    }\r\n    handleTracker.setHandles(handle, getView().getCompatibleHandles(handle));\r\n    return handleTracker;\r\n}"},
 {"id":927, "parametername":"org.jhotdraw.draw.HandleTracker", "parametertype":"org.jhotdraw.draw.HandleTracker", "parameterclass":196, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2632, "methodname":"org.jhotdraw.draw.SelectionTool.getHandleTracker(org.jhotdraw.draw.Handle)", "isreturn":1, "sourcecode":"/**\r\n * Method to get a {@code HandleTracker} which handles user interaction\r\n * for the specified handle.\r\n */\r\nprotected HandleTracker getHandleTracker(Handle handle) {\r\n    if ((handleTracker) == null) {\r\n        handleTracker = new DefaultHandleTracker();\r\n    }\r\n    handleTracker.setHandles(handle, getView().getCompatibleHandles(handle));\r\n    return handleTracker;\r\n}"},
 {"id":928, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2631, "methodname":"org.jhotdraw.draw.SelectionTool.getDragTracker(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Method to get a {@code DragTracker} which handles user interaction\r\n * for dragging the specified figure.\r\n */\r\nprotected DragTracker getDragTracker(Figure f) {\r\n    if ((dragTracker) == null) {\r\n        dragTracker = new DefaultDragTracker();\r\n    }\r\n    dragTracker.setDraggedFigure(f);\r\n    return dragTracker;\r\n}"},
 {"id":929, "parametername":"org.jhotdraw.draw.DragTracker", "parametertype":"org.jhotdraw.draw.DragTracker", "parameterclass":167, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2631, "methodname":"org.jhotdraw.draw.SelectionTool.getDragTracker(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"/**\r\n * Method to get a {@code DragTracker} which handles user interaction\r\n * for dragging the specified figure.\r\n */\r\nprotected DragTracker getDragTracker(Figure f) {\r\n    if ((dragTracker) == null) {\r\n        dragTracker = new DefaultDragTracker();\r\n    }\r\n    dragTracker.setDraggedFigure(f);\r\n    return dragTracker;\r\n}"},
 {"id":930, "parametername":"HandleTracker newValue", "parametertype":"org.jhotdraw.draw.HandleTracker", "parameterclass":196, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2646, "methodname":"org.jhotdraw.draw.SelectionTool.setHandleTracker(org.jhotdraw.draw.HandleTracker)", "isreturn":0, "sourcecode":"/**\r\n * Method to set a {@code HandleTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultHandleTracker}.\r\n */\r\npublic void setHandleTracker(HandleTracker newValue) {\r\n    handleTracker = newValue;\r\n}"},
 {"id":931, "parametername":"SelectAreaTracker newValue", "parametertype":"org.jhotdraw.draw.SelectAreaTracker", "parameterclass":247, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2647, "methodname":"org.jhotdraw.draw.SelectionTool.setSelectAreaTracker(org.jhotdraw.draw.SelectAreaTracker)", "isreturn":0, "sourcecode":"/**\r\n * Method to set a {@code SelectAreaTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultSelectAreaTracker}.\r\n */\r\npublic void setSelectAreaTracker(SelectAreaTracker newValue) {\r\n    selectAreaTracker = newValue;\r\n}"},
 {"id":932, "parametername":"DragTracker newValue", "parametertype":"org.jhotdraw.draw.DragTracker", "parameterclass":167, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2645, "methodname":"org.jhotdraw.draw.SelectionTool.setDragTracker(org.jhotdraw.draw.DragTracker)", "isreturn":0, "sourcecode":"/**\r\n * Method to set a {@code DragTracker}. If you specify null, the\r\n * {@code SelectionTool} uses the {@code DefaultDragTracker}.\r\n */\r\npublic void setDragTracker(DragTracker newValue) {\r\n    dragTracker = newValue;\r\n}"},
 {"id":933, "parametername":"ToolEvent event", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2652, "methodname":"org.jhotdraw.draw.SelectionTool.toolStarted(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"public void toolStarted(ToolEvent event) {\r\n}"},
 {"id":934, "parametername":"ToolEvent event", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2651, "methodname":"org.jhotdraw.draw.SelectionTool.toolDone(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"public void toolDone(ToolEvent event) {\r\n    // Empty\r\n    Tool newTracker = getSelectAreaTracker();\r\n    if (newTracker != null) {\r\n        if ((tracker) != null) {\r\n            tracker.deactivate(getEditor());\r\n            tracker.removeToolListener(this);\r\n        }\r\n        tracker = newTracker;\r\n        tracker.activate(getEditor());\r\n        tracker.addToolListener(this);\r\n    }\r\n    fireToolDone();\r\n}"},
 {"id":935, "parametername":"ToolEvent e", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":248, "classname":"org.jhotdraw.draw.SelectionTool", "methodid":2628, "methodname":"org.jhotdraw.draw.SelectionTool.areaInvalidated(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(ToolEvent e) {\r\n    fireAreaInvalidated(e.getInvalidatedArea());\r\n}"},
 {"id":936, "parametername":"Drawing prototype", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":249, "classname":"org.jhotdraw.draw.SerializationInputOutputFormat", "methodid":2654, "methodname":"org.jhotdraw.draw.SerializationInputOutputFormat.-init-(java.lang.String,java.lang.String,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance using the specified parameters.\r\n */\r\npublic SerializationInputOutputFormat(String description, String fileExtension, Drawing prototype) {\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.mimeType = DataFlavor.javaSerializedObjectMimeType;\r\n    this.prototype = prototype;\r\n    this.dataFlavor = new DataFlavor(prototype.getClass(), description);\r\n}"},
 {"id":937, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":249, "classname":"org.jhotdraw.draw.SerializationInputOutputFormat", "methodid":2663, "methodname":"org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}"},
 {"id":938, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":249, "classname":"org.jhotdraw.draw.SerializationInputOutputFormat", "methodid":2664, "methodname":"org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}"},
 {"id":939, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":249, "classname":"org.jhotdraw.draw.SerializationInputOutputFormat", "methodid":2665, "methodname":"org.jhotdraw.draw.SerializationInputOutputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    try {\r\n        ObjectInputStream oin = new ObjectInputStream(in);\r\n        Drawing d = ((Drawing) (oin.readObject()));\r\n        if (replace) {\r\n            for (Map.Entry<AttributeKey, Object> e : d.getAttributes().entrySet()) {\r\n                e.getKey().basicSet(drawing, e.getValue());\r\n            }\r\n        }\r\n        for (Figure f : d.getChildren()) {\r\n            drawing.add(f);\r\n        }\r\n    } catch (ClassNotFoundException ex) {\r\n        IOException ioe = new IOException(\"Couldnt read drawing.\");\r\n        ioe.initCause(ex);\r\n        throw ioe;\r\n    }\r\n}"},
 {"id":940, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":249, "classname":"org.jhotdraw.draw.SerializationInputOutputFormat", "methodid":2662, "methodname":"org.jhotdraw.draw.SerializationInputOutputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    try {\r\n        Drawing d = ((Drawing) (t.getTransferData(dataFlavor)));\r\n        if (replace) {\r\n            for (Map.Entry<AttributeKey, Object> e : d.getAttributes().entrySet()) {\r\n                e.getKey().basicSet(drawing, e.getValue());\r\n            }\r\n        }\r\n        for (Figure f : d.getChildren()) {\r\n            drawing.add(f);\r\n        }\r\n    } catch (Throwable th) {\r\n        th.printStackTrace();\r\n    }\r\n}"},
 {"id":941, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":249, "classname":"org.jhotdraw.draw.SerializationInputOutputFormat", "methodid":2666, "methodname":"org.jhotdraw.draw.SerializationInputOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}"},
 {"id":942, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":249, "classname":"org.jhotdraw.draw.SerializationInputOutputFormat", "methodid":2667, "methodname":"org.jhotdraw.draw.SerializationInputOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    ObjectOutputStream oout = new ObjectOutputStream(out);\r\n    oout.writeObject(drawing);\r\n    oout.flush();\r\n}"},
 {"id":943, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":249, "classname":"org.jhotdraw.draw.SerializationInputOutputFormat", "methodid":2656, "methodname":"org.jhotdraw.draw.SerializationInputOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    final Drawing d = ((Drawing) (prototype.clone()));\r\n    HashMap<Figure, Figure> originalToDuplicateMap = new HashMap<Figure, Figure>(figures.size());\r\n    final ArrayList<Figure> duplicates = new ArrayList<Figure>(figures.size());\r\n    for (Figure f : figures) {\r\n        Figure df = ((Figure) (f.clone()));\r\n        d.add(df);\r\n        duplicates.add(df);\r\n        originalToDuplicateMap.put(f, df);\r\n    }\r\n    for (Figure f : duplicates) {\r\n        f.remap(originalToDuplicateMap, true);\r\n    }\r\n    return new AbstractTransferable(dataFlavor) {\r\n        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {\r\n            if (isDataFlavorSupported(flavor)) {\r\n                return d;\r\n            } else {\r\n                throw new UnsupportedFlavorException(flavor);\r\n            }\r\n        }\r\n    };\r\n}"},
 {"id":944, "parametername":"AbstractFigure owner", "parametertype":"org.jhotdraw.draw.AbstractFigure", "parameterclass":100, "classid":250, "classname":"org.jhotdraw.draw.SetBoundsEdit", "methodid":2668, "methodname":"org.jhotdraw.draw.SetBoundsEdit.-init-(org.jhotdraw.draw.AbstractFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SetBoundsEdit(AbstractFigure owner, Point2D.Double oldAnchor, Point2D.Double oldLead, Point2D.Double newAnchor, Point2D.Double newLead) {\r\n    this.owner = owner;\r\n    this.oldAnchor = oldAnchor;\r\n    this.oldLead = oldLead;\r\n    this.newAnchor = newAnchor;\r\n    this.newLead = newLead;\r\n}"},
 {"id":945, "parametername":"BezierPath path", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":251, "classname":"org.jhotdraw.draw.SlantedLiner", "methodid":2677, "methodname":"org.jhotdraw.draw.SlantedLiner.createHandles(org.jhotdraw.geom.BezierPath)", "isreturn":0, "sourcecode":"public Collection<Handle> createHandles(BezierPath path) {\r\n    return null;\r\n}"},
 {"id":946, "parametername":"ConnectionFigure figure", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":251, "classname":"org.jhotdraw.draw.SlantedLiner", "methodid":2678, "methodname":"org.jhotdraw.draw.SlantedLiner.lineout(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public void lineout(ConnectionFigure figure) {\r\n    BezierPath path = ((LineConnectionFigure) (figure)).getBezierPath();\r\n    Connector start = figure.getStartConnector();\r\n    Connector end = figure.getEndConnector();\r\n    if (((start == null) || (end == null)) || (path == null)) {\r\n        return;\r\n    }\r\n    // Special treatment if the connection connects the same figure\r\n    if ((figure.getStartFigure()) == (figure.getEndFigure())) {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 5) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 5) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            soutcode = Geom.outcode(sb, eb);\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            eoutcode = Geom.outcode(sb, eb);\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        switch (soutcode) {\r\n            case Geom.OUT_TOP :\r\n                eoutcode = Geom.OUT_LEFT;\r\n                break;\r\n            case Geom.OUT_RIGHT :\r\n                eoutcode = Geom.OUT_TOP;\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n                eoutcode = Geom.OUT_RIGHT;\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                eoutcode = Geom.OUT_BOTTOM;\r\n                break;\r\n            default :\r\n                eoutcode = Geom.OUT_TOP;\r\n                soutcode = Geom.OUT_RIGHT;\r\n                break;\r\n        }\r\n        path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (slantSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (slantSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(3).moveTo(((ep.x) + (slantSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(3).moveTo(((ep.x) - (slantSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) + (slantSize)));\r\n                } else {\r\n                    path.get(3).moveTo(ep.x, ((ep.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        switch (soutcode) {\r\n            case Geom.OUT_RIGHT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_TOP :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n            case Geom.OUT_LEFT :\r\n                path.get(2).moveTo(path.get(1).x[0], path.get(3).y[0]);\r\n                break;\r\n            case Geom.OUT_BOTTOM :\r\n            default :\r\n                path.get(2).moveTo(path.get(1).y[0], path.get(3).x[0]);\r\n                break;\r\n        }\r\n        // Regular treatment if the connection connects to two different figures\r\n    } else {\r\n        // Ensure path has exactly four nodes\r\n        while ((path.size()) < 4) {\r\n            path.add(1, new BezierPath.Node(0, 0));\r\n        } \r\n        while ((path.size()) > 4) {\r\n            path.remove(1);\r\n        } \r\n        Point2D.Double sp = start.findStart(figure);\r\n        Point2D.Double ep = end.findEnd(figure);\r\n        Rectangle2D.Double sb = start.getBounds();\r\n        Rectangle2D.Double eb = end.getBounds();\r\n        int soutcode = sb.outcode(sp);\r\n        if (soutcode == 0) {\r\n            if ((sp.x) <= (sb.x)) {\r\n                soutcode = Geom.OUT_LEFT;\r\n            } else\r\n                if ((sp.y) <= (sb.y)) {\r\n                    soutcode = Geom.OUT_TOP;\r\n                } else\r\n                    if ((sp.x) >= ((sb.x) + (sb.width))) {\r\n                        soutcode = Geom.OUT_RIGHT;\r\n                    } else\r\n                        if ((sp.y) >= ((sb.y) + (sb.height))) {\r\n                            soutcode = Geom.OUT_BOTTOM;\r\n                        } else {\r\n                            soutcode = Geom.outcode(sb, eb);\r\n                        }\r\n\r\n\r\n\r\n        }\r\n        int eoutcode = eb.outcode(ep);\r\n        if (eoutcode == 0) {\r\n            if ((ep.x) <= (eb.x)) {\r\n                eoutcode = Geom.OUT_LEFT;\r\n            } else\r\n                if ((ep.y) <= (eb.y)) {\r\n                    eoutcode = Geom.OUT_TOP;\r\n                } else\r\n                    if ((ep.x) >= ((eb.x) + (eb.width))) {\r\n                        eoutcode = Geom.OUT_RIGHT;\r\n                    } else\r\n                        if ((ep.y) >= ((eb.y) + (eb.height))) {\r\n                            eoutcode = Geom.OUT_BOTTOM;\r\n                        } else {\r\n                            eoutcode = Geom.outcode(sb, eb);\r\n                        }\r\n\r\n\r\n\r\n        }\r\n        path.get(0).moveTo(sp);\r\n        path.get(((path.size()) - 1)).moveTo(ep);\r\n        if ((soutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(1).moveTo(((sp.x) + (slantSize)), sp.y);\r\n        } else\r\n            if ((soutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(1).moveTo(((sp.x) - (slantSize)), sp.y);\r\n            } else\r\n                if ((soutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) + (slantSize)));\r\n                } else {\r\n                    path.get(1).moveTo(sp.x, ((sp.y) - (slantSize)));\r\n                }\r\n\r\n\r\n        if ((eoutcode & (Geom.OUT_RIGHT)) != 0) {\r\n            path.get(2).moveTo(((ep.x) + (slantSize)), ep.y);\r\n        } else\r\n            if ((eoutcode & (Geom.OUT_LEFT)) != 0) {\r\n                path.get(2).moveTo(((ep.x) - (slantSize)), ep.y);\r\n            } else\r\n                if ((eoutcode & (Geom.OUT_BOTTOM)) != 0) {\r\n                    path.get(2).moveTo(ep.x, ((ep.y) + (slantSize)));\r\n                } else {\r\n                    path.get(2).moveTo(ep.x, ((ep.y) - (slantSize)));\r\n                }\r\n\r\n\r\n    }\r\n    // Ensure all path nodes are straight\r\n    for (BezierPath.Node node : path) {\r\n        node.setMask(BezierPath.C0_MASK);\r\n    }\r\n    path.invalidatePath();\r\n}"},
 {"id":947, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":251, "classname":"org.jhotdraw.draw.SlantedLiner", "methodid":2679, "methodname":"org.jhotdraw.draw.SlantedLiner.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) {\r\n    slantSize = in.getAttribute(\"slant\", 20.0);\r\n}"},
 {"id":948, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":251, "classname":"org.jhotdraw.draw.SlantedLiner", "methodid":2680, "methodname":"org.jhotdraw.draw.SlantedLiner.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) {\r\n    out.addAttribute(\"slant\", slantSize);\r\n}"},
 {"id":949, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":252, "classname":"org.jhotdraw.draw.StickyRectangleConnector", "methodid":2682, "methodname":"org.jhotdraw.draw.StickyRectangleConnector.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public StickyRectangleConnector(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":950, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":252, "classname":"org.jhotdraw.draw.StickyRectangleConnector", "methodid":2683, "methodname":"org.jhotdraw.draw.StickyRectangleConnector.-init-(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"public StickyRectangleConnector(Figure owner, Point2D.Double p) {\r\n    super(owner);\r\n    this.angle = ((float) (Geom.pointToAngle(owner.getBounds(), p)));\r\n}"},
 {"id":951, "parametername":"Figure target", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":252, "classname":"org.jhotdraw.draw.StickyRectangleConnector", "methodid":2684, "methodname":"org.jhotdraw.draw.StickyRectangleConnector.chop(org.jhotdraw.draw.Figure,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"@Override\r\nprotected Point2D.Double chop(Figure target, Point2D.Double from) {\r\n    return Geom.angleToPoint(target.getBounds(), angle);\r\n}"},
 {"id":952, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":252, "classname":"org.jhotdraw.draw.StickyRectangleConnector", "methodid":2689, "methodname":"org.jhotdraw.draw.StickyRectangleConnector.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    super.read(in);\r\n    angle = ((float) (in.getAttribute(\"angle\", 0.0)));\r\n}"},
 {"id":953, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":252, "classname":"org.jhotdraw.draw.StickyRectangleConnector", "methodid":2692, "methodname":"org.jhotdraw.draw.StickyRectangleConnector.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    super.write(out);\r\n    out.addAttribute(\"angle\", angle);\r\n}"},
 {"id":954, "parametername":"TextHolderFigure prototype", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":253, "classname":"org.jhotdraw.draw.TextAreaCreationTool", "methodid":2693, "methodname":"org.jhotdraw.draw.TextAreaCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TextAreaCreationTool(TextHolderFigure prototype) {\r\n    super(prototype);\r\n}"},
 {"id":955, "parametername":"TextHolderFigure prototype", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":253, "classname":"org.jhotdraw.draw.TextAreaCreationTool", "methodid":2694, "methodname":"org.jhotdraw.draw.TextAreaCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure,java.util.Map)", "isreturn":0, "sourcecode":"public TextAreaCreationTool(TextHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}"},
 {"id":956, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":253, "classname":"org.jhotdraw.draw.TextAreaCreationTool", "methodid":2699, "methodname":"org.jhotdraw.draw.TextAreaCreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}"},
 {"id":957, "parametername":"Figure createdFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":253, "classname":"org.jhotdraw.draw.TextAreaCreationTool", "methodid":2698, "methodname":"org.jhotdraw.draw.TextAreaCreationTool.creationFinished(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * This method allows subclasses to do perform additonal user interactions\r\n * after the new figure has been created.\r\n * The implementation of this class just invokes fireToolDone.\r\n */\r\n@Override\r\nprotected void creationFinished(Figure createdFigure) {\r\n    getView().clearSelection();\r\n    getView().addToSelection(createdFigure);\r\n    beginEdit(((TextHolderFigure) (createdFigure)));\r\n}"},
 {"id":958, "parametername":"TextHolderFigure textHolder", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":253, "classname":"org.jhotdraw.draw.TextAreaCreationTool", "methodid":2697, "methodname":"org.jhotdraw.draw.TextAreaCreationTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textArea) == null) {\r\n        textArea = new FloatingTextArea();\r\n        // textArea.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textArea.createOverlay(getView(), textHolder);\r\n    textArea.setBounds(getFieldBounds(textHolder), textHolder.getText());\r\n    textArea.requestFocus();\r\n    typingTarget = textHolder;\r\n}"},
 {"id":959, "parametername":"TextHolderFigure figure", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":253, "classname":"org.jhotdraw.draw.TextAreaCreationTool", "methodid":2702, "methodname":"org.jhotdraw.draw.TextAreaCreationTool.getFieldBounds(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"private Rectangle2D.Double getFieldBounds(TextHolderFigure figure) {\r\n    Rectangle2D.Double r = figure.getDrawingArea();\r\n    Insets2D.Double insets = figure.getInsets();\r\n    insets.subtractTo(r);\r\n    // FIXME - Find a way to determine the parameters for grow.\r\n    // r.grow(1,2);\r\n    // r.width += 16;\r\n    r.x -= 1;\r\n    r.y -= 2;\r\n    r.width += 18;\r\n    r.height += 4;\r\n    return r;\r\n}"},
 {"id":960, "parametername":"TextHolderFigure typingTarget", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":254, "classname":"org.jhotdraw.draw.TextAreaEditingTool", "methodid":2705, "methodname":"org.jhotdraw.draw.TextAreaEditingTool.-init-(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TextAreaEditingTool(TextHolderFigure typingTarget) {\r\n    this.typingTarget = typingTarget;\r\n}"},
 {"id":961, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":254, "classname":"org.jhotdraw.draw.TextAreaEditingTool", "methodid":2709, "methodname":"org.jhotdraw.draw.TextAreaEditingTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}"},
 {"id":962, "parametername":"TextHolderFigure textHolder", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":254, "classname":"org.jhotdraw.draw.TextAreaEditingTool", "methodid":2708, "methodname":"org.jhotdraw.draw.TextAreaEditingTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textArea) == null) {\r\n        textArea = new FloatingTextArea();\r\n        // textArea.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textArea.createOverlay(getView(), textHolder);\r\n    textArea.setBounds(getFieldBounds(textHolder), textHolder.getText());\r\n    textArea.requestFocus();\r\n    typingTarget = textHolder;\r\n}"},
 {"id":963, "parametername":"TextHolderFigure figure", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":254, "classname":"org.jhotdraw.draw.TextAreaEditingTool", "methodid":2712, "methodname":"org.jhotdraw.draw.TextAreaEditingTool.getFieldBounds(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"private Rectangle2D.Double getFieldBounds(TextHolderFigure figure) {\r\n    Rectangle2D.Double r = figure.getDrawingArea();\r\n    Insets2D.Double insets = figure.getInsets();\r\n    insets.subtractTo(r);\r\n    // FIXME - Find a way to determine the parameters for grow.\r\n    // r.grow(1,2);\r\n    // r.width += 16;\r\n    r.x -= 1;\r\n    r.y -= 2;\r\n    r.width += 18;\r\n    r.height += 4;\r\n    return r;\r\n}"},
 {"id":964, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":255, "classname":"org.jhotdraw.draw.TextAreaFigure", "methodid":2742, "methodname":"org.jhotdraw.draw.TextAreaFigure.readBounds(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"protected void readBounds(DOMInput in) throws IOException {\r\n    bounds.x = in.getAttribute(\"x\", 0.0);\r\n    bounds.y = in.getAttribute(\"y\", 0.0);\r\n    bounds.width = in.getAttribute(\"w\", 0.0);\r\n    bounds.height = in.getAttribute(\"h\", 0.0);\r\n}"},
 {"id":965, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":255, "classname":"org.jhotdraw.draw.TextAreaFigure", "methodid":2750, "methodname":"org.jhotdraw.draw.TextAreaFigure.writeBounds(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"protected void writeBounds(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"x\", bounds.x);\r\n    out.addAttribute(\"y\", bounds.y);\r\n    out.addAttribute(\"w\", bounds.width);\r\n    out.addAttribute(\"h\", bounds.height);\r\n}"},
 {"id":966, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":255, "classname":"org.jhotdraw.draw.TextAreaFigure", "methodid":2741, "methodname":"org.jhotdraw.draw.TextAreaFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    readBounds(in);\r\n    readAttributes(in);\r\n}"},
 {"id":967, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":255, "classname":"org.jhotdraw.draw.TextAreaFigure", "methodid":2749, "methodname":"org.jhotdraw.draw.TextAreaFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    writeBounds(out);\r\n    writeAttributes(out);\r\n}"},
 {"id":968, "parametername":"TextHolderFigure prototype", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":256, "classname":"org.jhotdraw.draw.TextCreationTool", "methodid":2751, "methodname":"org.jhotdraw.draw.TextCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TextCreationTool(TextHolderFigure prototype) {\r\n    super(prototype);\r\n}"},
 {"id":969, "parametername":"TextHolderFigure prototype", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":256, "classname":"org.jhotdraw.draw.TextCreationTool", "methodid":2752, "methodname":"org.jhotdraw.draw.TextCreationTool.-init-(org.jhotdraw.draw.TextHolderFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TextCreationTool(TextHolderFigure prototype, Map<AttributeKey, Object> attributes) {\r\n    super(prototype, attributes);\r\n}"},
 {"id":970, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":256, "classname":"org.jhotdraw.draw.TextCreationTool", "methodid":2757, "methodname":"org.jhotdraw.draw.TextCreationTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}"},
 {"id":971, "parametername":"TextHolderFigure textHolder", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":256, "classname":"org.jhotdraw.draw.TextCreationTool", "methodid":2755, "methodname":"org.jhotdraw.draw.TextCreationTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textField) == null) {\r\n        textField = new FloatingTextField();\r\n        textField.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textField.createOverlay(getView(), textHolder);\r\n    textField.requestFocus();\r\n    typingTarget = textHolder;\r\n}"},
 {"id":972, "parametername":"Figure createdFigure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":256, "classname":"org.jhotdraw.draw.TextCreationTool", "methodid":2756, "methodname":"org.jhotdraw.draw.TextCreationTool.creationFinished(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\nprotected void creationFinished(Figure createdFigure) {\r\n    beginEdit(((TextHolderFigure) (createdFigure)));\r\n    updateCursor(getView(), new Point(0, 0));\r\n}"},
 {"id":973, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":256, "classname":"org.jhotdraw.draw.TextCreationTool", "methodid":2764, "methodname":"org.jhotdraw.draw.TextCreationTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)", "isreturn":0, "sourcecode":"@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor((isEditing() ? Cursor.DEFAULT_CURSOR : Cursor.CROSSHAIR_CURSOR)));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}"},
 {"id":974, "parametername":"TextHolderFigure typingTarget", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":257, "classname":"org.jhotdraw.draw.TextEditingTool", "methodid":2765, "methodname":"org.jhotdraw.draw.TextEditingTool.-init-(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TextEditingTool(TextHolderFigure typingTarget) {\r\n    this.typingTarget = typingTarget;\r\n}"},
 {"id":975, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":257, "classname":"org.jhotdraw.draw.TextEditingTool", "methodid":2769, "methodname":"org.jhotdraw.draw.TextEditingTool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void deactivate(DrawingEditor editor) {\r\n    endEdit();\r\n    super.deactivate(editor);\r\n}"},
 {"id":976, "parametername":"TextHolderFigure textHolder", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":257, "classname":"org.jhotdraw.draw.TextEditingTool", "methodid":2768, "methodname":"org.jhotdraw.draw.TextEditingTool.beginEdit(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"protected void beginEdit(TextHolderFigure textHolder) {\r\n    if ((textField) == null) {\r\n        textField = new FloatingTextField();\r\n        textField.addActionListener(this);\r\n    }\r\n    if ((textHolder != (typingTarget)) && ((typingTarget) != null)) {\r\n        endEdit();\r\n    }\r\n    textField.createOverlay(getView(), textHolder);\r\n    textField.requestFocus();\r\n    typingTarget = textHolder;\r\n}"},
 {"id":977, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":257, "classname":"org.jhotdraw.draw.TextEditingTool", "methodid":2776, "methodname":"org.jhotdraw.draw.TextEditingTool.updateCursor(org.jhotdraw.draw.DrawingView,java.awt.Point)", "isreturn":0, "sourcecode":"@Override\r\npublic void updateCursor(DrawingView view, Point p) {\r\n    if (view.isEnabled()) {\r\n        view.setCursor(Cursor.getPredefinedCursor((isEditing() ? Cursor.DEFAULT_CURSOR : Cursor.CROSSHAIR_CURSOR)));\r\n    } else {\r\n        view.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\r\n    }\r\n}"},
 {"id":978, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":258, "classname":"org.jhotdraw.draw.TextFigure", "methodid":2804, "methodname":"org.jhotdraw.draw.TextFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    setBounds(new Point2D.Double(in.getAttribute(\"x\", 0.0), in.getAttribute(\"y\", 0.0)), new Point2D.Double(0, 0));\r\n    readAttributes(in);\r\n    readDecorator(in);\r\n    invalidate();\r\n}"},
 {"id":979, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":258, "classname":"org.jhotdraw.draw.TextFigure", "methodid":2812, "methodname":"org.jhotdraw.draw.TextFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double b = getBounds();\r\n    out.addAttribute(\"x\", b.x);\r\n    out.addAttribute(\"y\", b.y);\r\n    writeAttributes(out);\r\n    writeDecorator(out);\r\n}"},
 {"id":980, "parametername":"TextHolderFigure prototype", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":260, "classname":"org.jhotdraw.draw.TextInputFormat", "methodid":2827, "methodname":"org.jhotdraw.draw.TextInputFormat.-init-(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new image output format for text, for a figure that can not.\r\n * hold multiple lines of text.\r\n */\r\npublic TextInputFormat(TextHolderFigure prototype) {\r\n    this(prototype, \"Text\", \"Text\", \"txt\", false);\r\n}"},
 {"id":981, "parametername":"TextHolderFigure prototype", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":260, "classname":"org.jhotdraw.draw.TextInputFormat", "methodid":2828, "methodname":"org.jhotdraw.draw.TextInputFormat.-init-(org.jhotdraw.draw.TextHolderFigure,java.lang.String,java.lang.String,java.lang.String,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new image output format for the specified image format.\r\n *\r\n * @param formatName\r\n * \t\tThe format name for the javax.imageio.ImageIO object.\r\n * @param description\r\n * \t\tThe format description to be used for the file filter.\r\n * @param fileExtension\r\n * \t\tThe file extension to be used for file filter.\r\n * @param isMultiline\r\n * \t\tSet this to true, if the TextHolderFigure can hold\r\n * \t\tmultiple lines of text. If this is true, multiple lines of text are\r\n * \t\tadded to the same figure. If this is false, a new Figure is created for\r\n * \t\teach line of text.\r\n */\r\npublic TextInputFormat(TextHolderFigure prototype, String formatName, String description, String fileExtension, boolean isMultiline) {\r\n    this.prototype = prototype;\r\n    this.formatName = formatName;\r\n    this.description = description;\r\n    this.fileExtension = fileExtension;\r\n    this.isMultiline = isMultiline;\r\n}"},
 {"id":982, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":260, "classname":"org.jhotdraw.draw.TextInputFormat", "methodid":2835, "methodname":"org.jhotdraw.draw.TextInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}"},
 {"id":983, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":260, "classname":"org.jhotdraw.draw.TextInputFormat", "methodid":2836, "methodname":"org.jhotdraw.draw.TextInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    read(new FileInputStream(file), drawing, replace);\r\n}"},
 {"id":984, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":260, "classname":"org.jhotdraw.draw.TextInputFormat", "methodid":2837, "methodname":"org.jhotdraw.draw.TextInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.basicAddAll(0, createTextHolderFigures(in));\r\n}"},
 {"id":985, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":260, "classname":"org.jhotdraw.draw.TextInputFormat", "methodid":2834, "methodname":"org.jhotdraw.draw.TextInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    String text = ((String) (t.getTransferData(DataFlavor.stringFlavor)));\r\n    LinkedList<Figure> list = new LinkedList<Figure>();\r\n    if (isMultiline) {\r\n        TextHolderFigure figure = ((TextHolderFigure) (prototype.clone()));\r\n        figure.setText(text);\r\n        Dimension2DDouble s = figure.getPreferredSize();\r\n        figure.willChange();\r\n        figure.setBounds(new Point2D.Double(0, 0), new Point2D.Double(s.width, s.height));\r\n        figure.changed();\r\n        list.add(figure);\r\n    } else {\r\n        double y = 0;\r\n        for (String line : text.split(\"\n\")) {\r\n            TextHolderFigure figure = ((TextHolderFigure) (prototype.clone()));\r\n            figure.setText(line);\r\n            Dimension2DDouble s = figure.getPreferredSize();\r\n            y += s.height;\r\n            figure.willChange();\r\n            figure.setBounds(new Point2D.Double(0, (0 + y)), new Point2D.Double(s.width, ((s.height) + y)));\r\n            figure.changed();\r\n            list.add(figure);\r\n        }\r\n    }\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(list);\r\n}"},
 {"id":986, "parametername":"TextHolderFigure owner", "parametertype":"org.jhotdraw.draw.TextHolderFigure", "parameterclass":259, "classid":261, "classname":"org.jhotdraw.draw.TextOverflowHandle", "methodid":2838, "methodname":"org.jhotdraw.draw.TextOverflowHandle.-init-(org.jhotdraw.draw.TextHolderFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TextOverflowHandle(TextHolderFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":987, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":262, "classname":"org.jhotdraw.draw.Tool", "methodid":2847, "methodname":"org.jhotdraw.draw.Tool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Activates the tool for the given editor. This method is called\r\n * whenever the user switches to this tool.\r\n */\r\npublic void activate(DrawingEditor editor);"},
 {"id":988, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":262, "classname":"org.jhotdraw.draw.Tool", "methodid":2849, "methodname":"org.jhotdraw.draw.Tool.deactivate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Deactivates the tool. This method is called whenever the user\r\n * switches to another tool.\r\n */\r\npublic void deactivate(DrawingEditor editor);"},
 {"id":989, "parametername":"ToolListener l", "parametertype":"org.jhotdraw.draw.ToolListener", "parameterclass":264, "classid":262, "classname":"org.jhotdraw.draw.Tool", "methodid":2848, "methodname":"org.jhotdraw.draw.Tool.addToolListener(org.jhotdraw.draw.ToolListener)", "isreturn":0, "sourcecode":"/**\r\n * Adds a listener for this tool.\r\n */\r\nvoid addToolListener(ToolListener l);"},
 {"id":990, "parametername":"ToolListener l", "parametertype":"org.jhotdraw.draw.ToolListener", "parameterclass":264, "classid":262, "classname":"org.jhotdraw.draw.Tool", "methodid":2857, "methodname":"org.jhotdraw.draw.Tool.removeToolListener(org.jhotdraw.draw.ToolListener)", "isreturn":0, "sourcecode":"/**\r\n * Removes a listener for this tool.\r\n */\r\nvoid removeToolListener(ToolListener l);"},
 {"id":991, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":262, "classname":"org.jhotdraw.draw.Tool", "methodid":2856, "methodname":"org.jhotdraw.draw.Tool.getToolTipText(org.jhotdraw.draw.DrawingView,java.awt.event.MouseEvent)", "isreturn":0, "sourcecode":"/**\r\n * Returns the tooltip text for a mouse event on a drawing view.\r\n *\r\n * @param view\r\n * \t\tA drawing view.\r\n * @param evt\r\n * \t\tA mouse event.\r\n * @return A tooltip text or null.\r\n */\r\npublic String getToolTipText(DrawingView view, MouseEvent evt);"},
 {"id":992, "parametername":"Tool src", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":263, "classname":"org.jhotdraw.draw.ToolEvent", "methodid":2859, "methodname":"org.jhotdraw.draw.ToolEvent.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingView,java.awt.Rectangle)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ToolEvent(Tool src, DrawingView view, Rectangle invalidatedArea) {\r\n    super(src);\r\n    this.view = view;\r\n    this.invalidatedArea = invalidatedArea;\r\n}"},
 {"id":993, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":263, "classname":"org.jhotdraw.draw.ToolEvent", "methodid":2859, "methodname":"org.jhotdraw.draw.ToolEvent.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingView,java.awt.Rectangle)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ToolEvent(Tool src, DrawingView view, Rectangle invalidatedArea) {\r\n    super(src);\r\n    this.view = view;\r\n    this.invalidatedArea = invalidatedArea;\r\n}"},
 {"id":994, "parametername":"ToolEvent event", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":264, "classname":"org.jhotdraw.draw.ToolListener", "methodid":2865, "methodname":"org.jhotdraw.draw.ToolListener.toolStarted(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"/**\r\n * Informs the listener that a tool has starteds interacting with a\r\n * specific drawing view.\r\n */\r\nvoid toolStarted(ToolEvent event);"},
 {"id":995, "parametername":"ToolEvent event", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":264, "classname":"org.jhotdraw.draw.ToolListener", "methodid":2864, "methodname":"org.jhotdraw.draw.ToolListener.toolDone(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"/**\r\n * Informs the listener that a tool has done its interaction.\r\n * This method can be used to switch back to the default tool.\r\n */\r\nvoid toolDone(ToolEvent event);"},
 {"id":996, "parametername":"ToolEvent e", "parametertype":"org.jhotdraw.draw.ToolEvent", "parameterclass":263, "classid":264, "classname":"org.jhotdraw.draw.ToolListener", "methodid":2863, "methodname":"org.jhotdraw.draw.ToolListener.areaInvalidated(org.jhotdraw.draw.ToolEvent)", "isreturn":0, "sourcecode":"/**\r\n * Sent when an area of the drawing view needs to be repainted.\r\n */\r\npublic void areaInvalidated(ToolEvent e);"},
 {"id":997, "parametername":"Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":265, "classname":"org.jhotdraw.draw.TransformEdit", "methodid":2866, "methodname":"org.jhotdraw.draw.TransformEdit.-init-(org.jhotdraw.draw.Figure,java.awt.geom.AffineTransform)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TransformEdit(Figure figure, AffineTransform tx) {\r\n    figures = new LinkedList<Figure>();\r\n    ((LinkedList<Figure>) (figures)).add(figure);\r\n    this.tx = ((AffineTransform) (tx.clone()));\r\n}"},
 {"id":998, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":273, "classname":"org.jhotdraw.draw.TransformHandleKit$TransformHandle", "methodid":2919, "methodname":"org.jhotdraw.draw.TransformHandleKit$TransformHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"TransformHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}"},
 {"id":999, "parametername":"Locator loc", "parametertype":"org.jhotdraw.draw.Locator", "parameterclass":214, "classid":273, "classname":"org.jhotdraw.draw.TransformHandleKit$TransformHandle", "methodid":2919, "methodname":"org.jhotdraw.draw.TransformHandleKit$TransformHandle.-init-(org.jhotdraw.draw.Figure,org.jhotdraw.draw.Locator)", "isreturn":0, "sourcecode":"TransformHandle(Figure owner, Locator loc) {\r\n    super(owner, loc);\r\n}"},
 {"id":1000, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":267, "classname":"org.jhotdraw.draw.TransformHandleKit$NorthEastHandle", "methodid":2895, "methodname":"org.jhotdraw.draw.TransformHandleKit$NorthEastHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"NorthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northEast());\r\n}"},
 {"id":1001, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":266, "classname":"org.jhotdraw.draw.TransformHandleKit$EastHandle", "methodid":2891, "methodname":"org.jhotdraw.draw.TransformHandleKit$EastHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"EastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.east());\r\n}"},
 {"id":1002, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":268, "classname":"org.jhotdraw.draw.TransformHandleKit$NorthHandle", "methodid":2899, "methodname":"org.jhotdraw.draw.TransformHandleKit$NorthHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"NorthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.north());\r\n}"},
 {"id":1003, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":269, "classname":"org.jhotdraw.draw.TransformHandleKit$NorthWestHandle", "methodid":2903, "methodname":"org.jhotdraw.draw.TransformHandleKit$NorthWestHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"NorthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.northWest());\r\n}"},
 {"id":1004, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":270, "classname":"org.jhotdraw.draw.TransformHandleKit$SouthEastHandle", "methodid":2907, "methodname":"org.jhotdraw.draw.TransformHandleKit$SouthEastHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"SouthEastHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southEast());\r\n}"},
 {"id":1005, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":271, "classname":"org.jhotdraw.draw.TransformHandleKit$SouthHandle", "methodid":2911, "methodname":"org.jhotdraw.draw.TransformHandleKit$SouthHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"SouthHandle(Figure owner) {\r\n    super(owner, RelativeLocator.south());\r\n}"},
 {"id":1006, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":272, "classname":"org.jhotdraw.draw.TransformHandleKit$SouthWestHandle", "methodid":2915, "methodname":"org.jhotdraw.draw.TransformHandleKit$SouthWestHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"SouthWestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.southWest());\r\n}"},
 {"id":1007, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":274, "classname":"org.jhotdraw.draw.TransformHandleKit$WestHandle", "methodid":2929, "methodname":"org.jhotdraw.draw.TransformHandleKit$WestHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"WestHandle(Figure owner) {\r\n    super(owner, RelativeLocator.west());\r\n}"},
 {"id":1008, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2877, "methodname":"org.jhotdraw.draw.TransformHandleKit.addCornerTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Creates handles for each corner of a\r\n * figure and adds them to the provided collection.\r\n */\r\npublic static void addCornerTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(TransformHandleKit.southEast(f));\r\n    handles.add(TransformHandleKit.southWest(f));\r\n    handles.add(TransformHandleKit.northEast(f));\r\n    handles.add(TransformHandleKit.northWest(f));\r\n}"},
 {"id":1009, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2878, "methodname":"org.jhotdraw.draw.TransformHandleKit.addEdgeTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Fills the given Vector with handles at each\r\n * the north, south, east, and west of the figure.\r\n */\r\npublic static void addEdgeTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(TransformHandleKit.south(f));\r\n    handles.add(TransformHandleKit.north(f));\r\n    handles.add(TransformHandleKit.east(f));\r\n    handles.add(TransformHandleKit.west(f));\r\n}"},
 {"id":1010, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2881, "methodname":"org.jhotdraw.draw.TransformHandleKit.addScaleMoveTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Adds handles for scaling and moving a Figure.\r\n */\r\npublic static void addScaleMoveTransformHandles(Figure f, Collection<Handle> handles) {\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n}"},
 {"id":1011, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2882, "methodname":"org.jhotdraw.draw.TransformHandleKit.addTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, true, false));\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n    handles.add(new RotateHandle(f));\r\n}"},
 {"id":1012, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2880, "methodname":"org.jhotdraw.draw.TransformHandleKit.addGroupTransformHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addGroupTransformHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_DISABLED));\r\n    TransformHandleKit.addCornerTransformHandles(f, handles);\r\n    TransformHandleKit.addEdgeTransformHandles(f, handles);\r\n    handles.add(new RotateHandle(f));\r\n}"},
 {"id":1013, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2879, "methodname":"org.jhotdraw.draw.TransformHandleKit.addGroupHoverHandles(org.jhotdraw.draw.Figure,java.util.Collection)", "isreturn":0, "sourcecode":"/**\r\n * Adds handles for scaling, moving, rotating and shearing a Figure.\r\n */\r\npublic static void addGroupHoverHandles(Figure f, Collection<Handle> handles) {\r\n    handles.add(new BoundsOutlineHandle(f, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_HOVER, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_HOVER, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_HOVER, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_HOVER, HandleAttributeKeys.GROUP_BOUNDS_STROKE_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_1_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_STROKE_2_DISABLED, HandleAttributeKeys.GROUP_BOUNDS_COLOR_2_DISABLED));\r\n}"},
 {"id":1014, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2887, "methodname":"org.jhotdraw.draw.TransformHandleKit.south(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle south(Figure owner) {\r\n    return new TransformHandleKit.SouthHandle(owner);\r\n}"},
 {"id":1015, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2887, "methodname":"org.jhotdraw.draw.TransformHandleKit.south(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle south(Figure owner) {\r\n    return new TransformHandleKit.SouthHandle(owner);\r\n}"},
 {"id":1016, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2888, "methodname":"org.jhotdraw.draw.TransformHandleKit.southEast(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle southEast(Figure owner) {\r\n    return new TransformHandleKit.SouthEastHandle(owner);\r\n}"},
 {"id":1017, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2888, "methodname":"org.jhotdraw.draw.TransformHandleKit.southEast(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle southEast(Figure owner) {\r\n    return new TransformHandleKit.SouthEastHandle(owner);\r\n}"},
 {"id":1018, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2889, "methodname":"org.jhotdraw.draw.TransformHandleKit.southWest(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle southWest(Figure owner) {\r\n    return new TransformHandleKit.SouthWestHandle(owner);\r\n}"},
 {"id":1019, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2889, "methodname":"org.jhotdraw.draw.TransformHandleKit.southWest(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle southWest(Figure owner) {\r\n    return new TransformHandleKit.SouthWestHandle(owner);\r\n}"},
 {"id":1020, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2884, "methodname":"org.jhotdraw.draw.TransformHandleKit.north(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle north(Figure owner) {\r\n    return new TransformHandleKit.NorthHandle(owner);\r\n}"},
 {"id":1021, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2884, "methodname":"org.jhotdraw.draw.TransformHandleKit.north(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle north(Figure owner) {\r\n    return new TransformHandleKit.NorthHandle(owner);\r\n}"},
 {"id":1022, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2885, "methodname":"org.jhotdraw.draw.TransformHandleKit.northEast(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle northEast(Figure owner) {\r\n    return new TransformHandleKit.NorthEastHandle(owner);\r\n}"},
 {"id":1023, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2885, "methodname":"org.jhotdraw.draw.TransformHandleKit.northEast(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle northEast(Figure owner) {\r\n    return new TransformHandleKit.NorthEastHandle(owner);\r\n}"},
 {"id":1024, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2886, "methodname":"org.jhotdraw.draw.TransformHandleKit.northWest(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle northWest(Figure owner) {\r\n    return new TransformHandleKit.NorthWestHandle(owner);\r\n}"},
 {"id":1025, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2886, "methodname":"org.jhotdraw.draw.TransformHandleKit.northWest(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle northWest(Figure owner) {\r\n    return new TransformHandleKit.NorthWestHandle(owner);\r\n}"},
 {"id":1026, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2883, "methodname":"org.jhotdraw.draw.TransformHandleKit.east(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle east(Figure owner) {\r\n    return new TransformHandleKit.EastHandle(owner);\r\n}"},
 {"id":1027, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2883, "methodname":"org.jhotdraw.draw.TransformHandleKit.east(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle east(Figure owner) {\r\n    return new TransformHandleKit.EastHandle(owner);\r\n}"},
 {"id":1028, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2890, "methodname":"org.jhotdraw.draw.TransformHandleKit.west(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Handle west(Figure owner) {\r\n    return new TransformHandleKit.WestHandle(owner);\r\n}"},
 {"id":1029, "parametername":"org.jhotdraw.draw.Handle", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":275, "classname":"org.jhotdraw.draw.TransformHandleKit", "methodid":2890, "methodname":"org.jhotdraw.draw.TransformHandleKit.west(org.jhotdraw.draw.Figure)", "isreturn":1, "sourcecode":"public static Handle west(Figure owner) {\r\n    return new TransformHandleKit.WestHandle(owner);\r\n}"},
 {"id":1030, "parametername":"AttributeKeys.Orientation direction", "parametertype":"org.jhotdraw.draw.AttributeKeys$Orientation", "parameterclass":111, "classid":277, "classname":"org.jhotdraw.draw.TriangleFigure", "methodid":2937, "methodname":"org.jhotdraw.draw.TriangleFigure.-init-(org.jhotdraw.draw.AttributeKeys$Orientation)", "isreturn":0, "sourcecode":"public TriangleFigure(AttributeKeys.Orientation direction) {\r\n    this(0, 0, 0, 0, direction);\r\n}"},
 {"id":1031, "parametername":"AttributeKeys.Orientation direction", "parametertype":"org.jhotdraw.draw.AttributeKeys$Orientation", "parameterclass":111, "classid":277, "classname":"org.jhotdraw.draw.TriangleFigure", "methodid":2939, "methodname":"org.jhotdraw.draw.TriangleFigure.-init-(double,double,double,double,org.jhotdraw.draw.AttributeKeys$Orientation)", "isreturn":0, "sourcecode":"public TriangleFigure(double x, double y, double width, double height, AttributeKeys.Orientation direction) {\r\n    rectangle = new Rectangle2D.Double(x, y, width, height);\r\n    /* setFillColor(Color.white);\n    setStrokeColor(Color.black);\n     */\r\n    AttributeKeys.ORIENTATION.basicSet(this, direction);\r\n}"},
 {"id":1032, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":277, "classname":"org.jhotdraw.draw.TriangleFigure", "methodid":2947, "methodname":"org.jhotdraw.draw.TriangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopTriangleConnector(this);\r\n}"},
 {"id":1033, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":277, "classname":"org.jhotdraw.draw.TriangleFigure", "methodid":2947, "methodname":"org.jhotdraw.draw.TriangleFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"// DRAWING\r\n// SHAPE AND BOUNDS\r\n// ATTRIBUTES\r\n// EDITING\r\n// CONNECTING\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return new ChopTriangleConnector(this);\r\n}"},
 {"id":1034, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":277, "classname":"org.jhotdraw.draw.TriangleFigure", "methodid":2946, "methodname":"org.jhotdraw.draw.TriangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopTriangleConnector(this);\r\n}"},
 {"id":1035, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":277, "classname":"org.jhotdraw.draw.TriangleFigure", "methodid":2946, "methodname":"org.jhotdraw.draw.TriangleFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return new ChopTriangleConnector(this);\r\n}"},
 {"id":1036, "parametername":"TriangleFigure owner", "parametertype":"org.jhotdraw.draw.TriangleFigure", "parameterclass":277, "classid":278, "classname":"org.jhotdraw.draw.TriangleRotationHandler", "methodid":2955, "methodname":"org.jhotdraw.draw.TriangleRotationHandler.-init-(org.jhotdraw.draw.TriangleFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TriangleRotationHandler(TriangleFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":1037, "parametername":"Handle h", "parametertype":"org.jhotdraw.draw.Handle", "parameterclass":191, "classid":278, "classname":"org.jhotdraw.draw.TriangleRotationHandler", "methodid":2959, "methodname":"org.jhotdraw.draw.TriangleRotationHandler.isCombinableWith(org.jhotdraw.draw.Handle)", "isreturn":0, "sourcecode":"public boolean isCombinableWith(Handle h) {\r\n    return false;\r\n}"},
 {"id":1038, "parametername":"CompositeFigure layoutable", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":279, "classname":"org.jhotdraw.draw.VerticalLayouter", "methodid":2964, "methodname":"org.jhotdraw.draw.VerticalLayouter.calculateLayout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"public Rectangle2D.Double calculateLayout(CompositeFigure layoutable, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(layoutable);\r\n    if (layoutInsets == null) {\r\n        layoutInsets = new Insets2D.Double(0, 0, 0, 0);\r\n    }\r\n    Rectangle2D.Double layoutBounds = new Rectangle2D.Double(anchor.x, anchor.y, 0, 0);\r\n    for (Figure child : layoutable.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Dimension2DDouble preferredSize = child.getPreferredSize();\r\n            Insets2D.Double ins = getInsets(child);\r\n            layoutBounds.width = Math.max(layoutBounds.width, (((preferredSize.width) + (ins.left)) + (ins.right)));\r\n            layoutBounds.height += ((preferredSize.height) + (ins.top)) + (ins.bottom);\r\n        }\r\n    }\r\n    layoutBounds.width += (layoutInsets.left) + (layoutInsets.right);\r\n    layoutBounds.height += (layoutInsets.top) + (layoutInsets.bottom);\r\n    return layoutBounds;\r\n}"},
 {"id":1039, "parametername":"CompositeFigure layoutable", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":279, "classname":"org.jhotdraw.draw.VerticalLayouter", "methodid":2965, "methodname":"org.jhotdraw.draw.VerticalLayouter.layout(org.jhotdraw.draw.CompositeFigure,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double)", "isreturn":0, "sourcecode":"public Rectangle2D.Double layout(CompositeFigure layoutable, Point2D.Double anchor, Point2D.Double lead) {\r\n    Insets2D.Double layoutInsets = AttributeKeys.LAYOUT_INSETS.get(layoutable);\r\n    AttributeKeys.Alignment compositeAlignment = AttributeKeys.COMPOSITE_ALIGNMENT.get(layoutable);\r\n    if (layoutInsets == null) {\r\n        layoutInsets = new Insets2D.Double();\r\n    }\r\n    Rectangle2D.Double layoutBounds = calculateLayout(layoutable, anchor, lead);\r\n    double y = (layoutBounds.y) + (layoutInsets.top);\r\n    for (Figure child : layoutable.getChildren()) {\r\n        if (child.isVisible()) {\r\n            Insets2D.Double insets = getInsets(child);\r\n            double height = child.getPreferredSize().height;\r\n            double width = child.getPreferredSize().width;\r\n            switch (compositeAlignment) {\r\n                case LEADING :\r\n                    child.setBounds(new Point2D.Double((((layoutBounds.x) + (layoutInsets.left)) + (insets.left)), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (+(layoutInsets.left))) + (insets.left)) + width), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case TRAILING :\r\n                    child.setBounds(new Point2D.Double((((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)) - width), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case CENTER :\r\n                    child.setBounds(new Point2D.Double(((layoutBounds.x) + (((layoutBounds.width) - width) / 2.0)), (y + (insets.top))), new Point2D.Double(((layoutBounds.x) + (((layoutBounds.width) + width) / 2.0)), ((y + (insets.top)) + height)));\r\n                    break;\r\n                case BLOCK :\r\n                default :\r\n                    child.setBounds(new Point2D.Double((((layoutBounds.x) + (layoutInsets.left)) + (insets.left)), (y + (insets.top))), new Point2D.Double(((((layoutBounds.x) + (layoutBounds.width)) - (layoutInsets.right)) - (insets.right)), ((y + (insets.top)) + height)));\r\n                    break;\r\n            }\r\n            y += (height + (insets.top)) + (insets.bottom);\r\n        }\r\n    }\r\n    return layoutBounds;\r\n}"},
 {"id":1040, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":280, "classname":"org.jhotdraw.draw.action.AbstractDrawingEditorAction", "methodid":2967, "methodname":"org.jhotdraw.draw.action.AbstractDrawingEditorAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AbstractDrawingEditorAction(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n        updateEnabledState();\r\n    }\r\n}"},
 {"id":1041, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":280, "classname":"org.jhotdraw.draw.action.AbstractDrawingEditorAction", "methodid":2972, "methodname":"org.jhotdraw.draw.action.AbstractDrawingEditorAction.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.removePropertyChangeListener(propertyChangeHandler);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n        updateEnabledState();\r\n    }\r\n}"},
 {"id":1042, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":281, "classname":"org.jhotdraw.draw.action.AbstractDrawingViewAction", "methodid":2976, "methodname":"org.jhotdraw.draw.action.AbstractDrawingViewAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a view action which acts on the current view of the editor.\r\n */\r\npublic AbstractDrawingViewAction(DrawingEditor editor) {\r\n    setEditor(editor);\r\n}"},
 {"id":1043, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":281, "classname":"org.jhotdraw.draw.action.AbstractDrawingViewAction", "methodid":2977, "methodname":"org.jhotdraw.draw.action.AbstractDrawingViewAction.-init-(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Creates a view action which acts on the specified view.\r\n */\r\npublic AbstractDrawingViewAction(DrawingView view) {\r\n    this.view = view;\r\n}"},
 {"id":1044, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":281, "classname":"org.jhotdraw.draw.action.AbstractDrawingViewAction", "methodid":2982, "methodname":"org.jhotdraw.draw.action.AbstractDrawingViewAction.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"protected void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.removePropertyChangeListener(propertyChangeHandler);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.addPropertyChangeListener(propertyChangeHandler);\r\n    }\r\n}"},
 {"id":1045, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":283, "classname":"org.jhotdraw.draw.action.AbstractSelectedAction", "methodid":2986, "methodname":"org.jhotdraw.draw.action.AbstractSelectedAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates an action which acts on the selected figures on the current view\r\n * of the specified editor.\r\n */\r\npublic AbstractSelectedAction(DrawingEditor editor) {\r\n    setEditor(editor);\r\n    updateEnabledState();\r\n}"},
 {"id":1046, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":282, "classname":"org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler", "methodid":2996, "methodname":"org.jhotdraw.draw.action.AbstractSelectedAction$EventHandler.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt) {\r\n    updateEnabledState();\r\n}"},
 {"id":1047, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":283, "classname":"org.jhotdraw.draw.action.AbstractSelectedAction", "methodid":2992, "methodname":"org.jhotdraw.draw.action.AbstractSelectedAction.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor editor) {\r\n    if ((this.editor) != null) {\r\n        this.editor.removePropertyChangeListener(eventHandler);\r\n        if ((this.editor.getActiveView()) != null) {\r\n            this.editor.getActiveView().removeFigureSelectionListener(eventHandler);\r\n        }\r\n    }\r\n    this.editor = editor;\r\n    if ((this.editor) != null) {\r\n        this.editor.addPropertyChangeListener(eventHandler);\r\n        if ((this.editor.getActiveView()) != null) {\r\n            this.editor.getActiveView().addFigureSelectionListener(eventHandler);\r\n        }\r\n    }\r\n    updateEnabledState();\r\n}"},
 {"id":1048, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":290, "classname":"org.jhotdraw.draw.action.AlignAction", "methodid":2997, "methodname":"org.jhotdraw.draw.action.AlignAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AlignAction(DrawingEditor editor) {\r\n    super(editor);\r\n}"},
 {"id":1049, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":286, "classname":"org.jhotdraw.draw.action.AlignAction$North", "methodid":3009, "methodname":"org.jhotdraw.draw.action.AlignAction$North.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public North(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}"},
 {"id":1050, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":286, "classname":"org.jhotdraw.draw.action.AlignAction$North", "methodid":3010, "methodname":"org.jhotdraw.draw.action.AlignAction$North.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public North(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}"},
 {"id":1051, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":286, "classname":"org.jhotdraw.draw.action.AlignAction$North", "methodid":3010, "methodname":"org.jhotdraw.draw.action.AlignAction$North.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public North(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignNorth\");\r\n}"},
 {"id":1052, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":284, "classname":"org.jhotdraw.draw.action.AlignAction$East", "methodid":3003, "methodname":"org.jhotdraw.draw.action.AlignAction$East.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public East(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignEast\");\r\n}"},
 {"id":1053, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":284, "classname":"org.jhotdraw.draw.action.AlignAction$East", "methodid":3004, "methodname":"org.jhotdraw.draw.action.AlignAction$East.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public East(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignEast\");\r\n}"},
 {"id":1054, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":284, "classname":"org.jhotdraw.draw.action.AlignAction$East", "methodid":3004, "methodname":"org.jhotdraw.draw.action.AlignAction$East.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public East(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignEast\");\r\n}"},
 {"id":1055, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":289, "classname":"org.jhotdraw.draw.action.AlignAction$West", "methodid":3018, "methodname":"org.jhotdraw.draw.action.AlignAction$West.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public West(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignWest\");\r\n}"},
 {"id":1056, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":289, "classname":"org.jhotdraw.draw.action.AlignAction$West", "methodid":3019, "methodname":"org.jhotdraw.draw.action.AlignAction$West.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public West(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignWest\");\r\n}"},
 {"id":1057, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":289, "classname":"org.jhotdraw.draw.action.AlignAction$West", "methodid":3019, "methodname":"org.jhotdraw.draw.action.AlignAction$West.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public West(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignWest\");\r\n}"},
 {"id":1058, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":287, "classname":"org.jhotdraw.draw.action.AlignAction$South", "methodid":3012, "methodname":"org.jhotdraw.draw.action.AlignAction$South.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public South(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignSouth\");\r\n}"},
 {"id":1059, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":287, "classname":"org.jhotdraw.draw.action.AlignAction$South", "methodid":3013, "methodname":"org.jhotdraw.draw.action.AlignAction$South.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public South(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignSouth\");\r\n}"},
 {"id":1060, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":287, "classname":"org.jhotdraw.draw.action.AlignAction$South", "methodid":3013, "methodname":"org.jhotdraw.draw.action.AlignAction$South.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public South(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignSouth\");\r\n}"},
 {"id":1061, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":288, "classname":"org.jhotdraw.draw.action.AlignAction$Vertical", "methodid":3015, "methodname":"org.jhotdraw.draw.action.AlignAction$Vertical.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public Vertical(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignVertical\");\r\n}"},
 {"id":1062, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":288, "classname":"org.jhotdraw.draw.action.AlignAction$Vertical", "methodid":3016, "methodname":"org.jhotdraw.draw.action.AlignAction$Vertical.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public Vertical(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignVertical\");\r\n}"},
 {"id":1063, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":288, "classname":"org.jhotdraw.draw.action.AlignAction$Vertical", "methodid":3016, "methodname":"org.jhotdraw.draw.action.AlignAction$Vertical.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public Vertical(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignVertical\");\r\n}"},
 {"id":1064, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":285, "classname":"org.jhotdraw.draw.action.AlignAction$Horizontal", "methodid":3006, "methodname":"org.jhotdraw.draw.action.AlignAction$Horizontal.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public Horizontal(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignHorizontal\");\r\n}"},
 {"id":1065, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":285, "classname":"org.jhotdraw.draw.action.AlignAction$Horizontal", "methodid":3007, "methodname":"org.jhotdraw.draw.action.AlignAction$Horizontal.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public Horizontal(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignHorizontal\");\r\n}"},
 {"id":1066, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":285, "classname":"org.jhotdraw.draw.action.AlignAction$Horizontal", "methodid":3007, "methodname":"org.jhotdraw.draw.action.AlignAction$Horizontal.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public Horizontal(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.alignHorizontal\");\r\n}"},
 {"id":1067, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":291, "classname":"org.jhotdraw.draw.action.ApplyAttributesAction", "methodid":3021, "methodname":"org.jhotdraw.draw.action.ApplyAttributesAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ApplyAttributesAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.applyAttributes\");\r\n    setEnabled(true);\r\n}"},
 {"id":1068, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":291, "classname":"org.jhotdraw.draw.action.ApplyAttributesAction", "methodid":3024, "methodname":"org.jhotdraw.draw.action.ApplyAttributesAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt) {\r\n    setEnabled(((getView().getSelectionCount()) == 1));\r\n}"},
 {"id":1069, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3026, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}"},
 {"id":1070, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3026, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}"},
 {"id":1071, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3027, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}"},
 {"id":1072, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3027, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}"},
 {"id":1073, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3028, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}"},
 {"id":1074, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3028, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}"},
 {"id":1075, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3029, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}"},
 {"id":1076, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3029, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}"},
 {"id":1077, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3030, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)", "isreturn":0, "sourcecode":"public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    putValue(Actions.UNDO_PRESENTATION_NAME_KEY, key.getPresentationName());\r\n    setEnabled(true);\r\n}"},
 {"id":1078, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3030, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)", "isreturn":0, "sourcecode":"public AttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    putValue(Actions.UNDO_PRESENTATION_NAME_KEY, key.getPresentationName());\r\n    setEnabled(true);\r\n}"},
 {"id":1079, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":292, "classname":"org.jhotdraw.draw.action.AttributeAction", "methodid":3031, "methodname":"org.jhotdraw.draw.action.AttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,java.util.Map,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public AttributeAction(DrawingEditor editor, Map<AttributeKey, Object> attributes, String name, Icon icon) {\r\n    super(editor);\r\n    this.attributes = (attributes == null) ? new HashMap<AttributeKey, Object>() : attributes;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    updateEnabledState();\r\n}"},
 {"id":1080, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":293, "classname":"org.jhotdraw.draw.action.AttributeToggler", "methodid":3036, "methodname":"org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2) {\r\n    this(editor, key, value1, value2, null);\r\n}"},
 {"id":1081, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":293, "classname":"org.jhotdraw.draw.action.AttributeToggler", "methodid":3036, "methodname":"org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2) {\r\n    this(editor, key, value1, value2, null);\r\n}"},
 {"id":1082, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":293, "classname":"org.jhotdraw.draw.action.AttributeToggler", "methodid":3037, "methodname":"org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object,javax.swing.Action)", "isreturn":0, "sourcecode":"public AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2, Action compatibleTextAction) {\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.value1 = value1;\r\n    this.value2 = value2;\r\n    this.compatibleTextAction = compatibleTextAction;\r\n}"},
 {"id":1083, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":293, "classname":"org.jhotdraw.draw.action.AttributeToggler", "methodid":3037, "methodname":"org.jhotdraw.draw.action.AttributeToggler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.Object,javax.swing.Action)", "isreturn":0, "sourcecode":"public AttributeToggler(DrawingEditor editor, AttributeKey<T> key, T value1, T value2, Action compatibleTextAction) {\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.value1 = value1;\r\n    this.value2 = value2;\r\n    this.compatibleTextAction = compatibleTextAction;\r\n}"},
 {"id":1084, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":294, "classname":"org.jhotdraw.draw.action.BringToFrontAction", "methodid":3042, "methodname":"org.jhotdraw.draw.action.BringToFrontAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic BringToFrontAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, BringToFrontAction.ID);\r\n}"},
 {"id":1085, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":294, "classname":"org.jhotdraw.draw.action.BringToFrontAction", "methodid":3045, "methodname":"org.jhotdraw.draw.action.BringToFrontAction.bringToFront(org.jhotdraw.draw.DrawingView,java.util.Collection)", "isreturn":0, "sourcecode":"public static void bringToFront(DrawingView view, Collection<Figure> figures) {\r\n    Drawing drawing = view.getDrawing();\r\n    Iterator i = drawing.sort(figures).iterator();\r\n    while (i.hasNext()) {\r\n        Figure figure = ((Figure) (i.next()));\r\n        drawing.bringToFront(figure);\r\n    } \r\n}"},
 {"id":1086, "parametername":"Tool t", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":295, "classname":"org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener", "methodid":3102, "methodname":"org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}"},
 {"id":1087, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":295, "classname":"org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener", "methodid":3102, "methodname":"org.jhotdraw.draw.action.ButtonFactory$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}"},
 {"id":1088, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3062, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingActions(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static Collection<Action> createDrawingActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}"},
 {"id":1089, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3079, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionActions(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor));\r\n    a.add(new UngroupAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}"},
 {"id":1090, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3055, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor) {\r\n    return ButtonFactory.addSelectionToolTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}"},
 {"id":1091, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3056, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)", "isreturn":0, "sourcecode":"public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    Tool selectionTool = new DelegationSelectionTool(drawingActions, selectionActions);\r\n    return ButtonFactory.addSelectionToolTo(tb, editor, selectionTool);\r\n}"},
 {"id":1092, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3057, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool)", "isreturn":0, "sourcecode":"public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor, Tool selectionTool) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JToggleButton t;\r\n    Tool tool;\r\n    HashMap<String, Object> attributes;\r\n    ButtonGroup group;\r\n    if ((tb.getClientProperty(\"toolButtonGroup\")) instanceof ButtonGroup) {\r\n        group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    } else {\r\n        group = new ButtonGroup();\r\n        tb.putClientProperty(\"toolButtonGroup\", group);\r\n    }\r\n    // Selection tool\r\n    editor.setTool(selectionTool);\r\n    t = new JToggleButton();\r\n    final JToggleButton defaultToolButton = t;\r\n    ToolListener toolHandler;\r\n    if ((tb.getClientProperty(\"toolHandler\")) instanceof ToolListener) {\r\n        toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    } else {\r\n        toolHandler = new ToolListener() {\r\n            public void toolStarted(ToolEvent event) {\r\n            }\r\n\r\n            public void toolDone(ToolEvent event) {\r\n                defaultToolButton.setSelected(true);\r\n            }\r\n\r\n            public void areaInvalidated(ToolEvent e) {\r\n            }\r\n        };\r\n        tb.putClientProperty(\"toolHandler\", toolHandler);\r\n    }\r\n    labels.configureToolBarButton(t, \"selectionTool\");\r\n    t.setSelected(true);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(selectionTool, editor));\r\n    t.setFocusable(false);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}"},
 {"id":1093, "parametername":"Tool selectionTool", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3057, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addSelectionToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool)", "isreturn":0, "sourcecode":"public static JToggleButton addSelectionToolTo(JToolBar tb, final DrawingEditor editor, Tool selectionTool) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JToggleButton t;\r\n    Tool tool;\r\n    HashMap<String, Object> attributes;\r\n    ButtonGroup group;\r\n    if ((tb.getClientProperty(\"toolButtonGroup\")) instanceof ButtonGroup) {\r\n        group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    } else {\r\n        group = new ButtonGroup();\r\n        tb.putClientProperty(\"toolButtonGroup\", group);\r\n    }\r\n    // Selection tool\r\n    editor.setTool(selectionTool);\r\n    t = new JToggleButton();\r\n    final JToggleButton defaultToolButton = t;\r\n    ToolListener toolHandler;\r\n    if ((tb.getClientProperty(\"toolHandler\")) instanceof ToolListener) {\r\n        toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    } else {\r\n        toolHandler = new ToolListener() {\r\n            public void toolStarted(ToolEvent event) {\r\n            }\r\n\r\n            public void toolDone(ToolEvent event) {\r\n                defaultToolButton.setSelected(true);\r\n            }\r\n\r\n            public void areaInvalidated(ToolEvent e) {\r\n            }\r\n        };\r\n        tb.putClientProperty(\"toolHandler\", toolHandler);\r\n    }\r\n    labels.configureToolBarButton(t, \"selectionTool\");\r\n    t.setSelected(true);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(selectionTool, editor));\r\n    t.setFocusable(false);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}"},
 {"id":1094, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3059, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Method addSelectionToolTo must have been invoked prior to this on the\r\n * JToolBar.\r\n */\r\npublic static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor, Tool tool, String labelKey, ResourceBundleUtil labels) {\r\n    ButtonGroup group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    ToolListener toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    JToggleButton t = new JToggleButton();\r\n    labels.configureToolBarButton(t, labelKey);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(tool, editor));\r\n    t.setFocusable(false);\r\n    tool.addToolListener(toolHandler);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}"},
 {"id":1095, "parametername":"Tool tool", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3059, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Method addSelectionToolTo must have been invoked prior to this on the\r\n * JToolBar.\r\n */\r\npublic static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor, Tool tool, String labelKey, ResourceBundleUtil labels) {\r\n    ButtonGroup group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    ToolListener toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    JToggleButton t = new JToggleButton();\r\n    labels.configureToolBarButton(t, labelKey);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(tool, editor));\r\n    t.setFocusable(false);\r\n    tool.addToolListener(toolHandler);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}"},
 {"id":1096, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3059, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addToolTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.Tool,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Method addSelectionToolTo must have been invoked prior to this on the\r\n * JToolBar.\r\n */\r\npublic static JToggleButton addToolTo(JToolBar tb, DrawingEditor editor, Tool tool, String labelKey, ResourceBundleUtil labels) {\r\n    ButtonGroup group = ((ButtonGroup) (tb.getClientProperty(\"toolButtonGroup\")));\r\n    ToolListener toolHandler = ((ToolListener) (tb.getClientProperty(\"toolHandler\")));\r\n    JToggleButton t = new JToggleButton();\r\n    labels.configureToolBarButton(t, labelKey);\r\n    t.addItemListener(new ButtonFactory.ToolButtonListener(tool, editor));\r\n    t.setFocusable(false);\r\n    tool.addToolListener(toolHandler);\r\n    group.add(t);\r\n    tb.add(t);\r\n    return t;\r\n}"},
 {"id":1097, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3060, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addZoomButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static void addZoomButtonsTo(JToolBar bar, final DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createZoomButton(editor));\r\n}"},
 {"id":1098, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3099, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static AbstractButton createZoomButton(final DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JPopupButton zoomPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(zoomPopupButton, \"view.zoomFactor\");\r\n    zoomPopupButton.setFocusable(false);\r\n    if ((editor.getDrawingViews().size()) == 0) {\r\n        zoomPopupButton.setText(\"100 %\");\r\n    } else {\r\n        zoomPopupButton.setText((((int) ((editor.getDrawingViews().iterator().next().getScaleFactor()) * 100)) + \" %\"));\r\n    }\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == (DrawingEditor.ACTIVE_VIEW_PROPERTY)) {\r\n                if ((evt.getNewValue()) == null) {\r\n                    zoomPopupButton.setText(\"100 %\");\r\n                } else {\r\n                    zoomPopupButton.setText((((int) ((editor.getActiveView().getScaleFactor()) * 100)) + \" %\"));\r\n                }\r\n            }\r\n        }\r\n    });\r\n    double[] factors = new double[]{ 16, 8, 5, 4, 3, 2, 1.5, 1.25, 1, 0.75, 0.5, 0.25, 0.1 };\r\n    for (int i = 0; i < (factors.length); i++) {\r\n        zoomPopupButton.add(new ZoomEditorAction(editor, factors[i], zoomPopupButton) {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                super.actionPerformed(e);\r\n                zoomPopupButton.setText((((int) ((editor.getActiveView().getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        });\r\n    }\r\n    // zoomPopupButton.setPreferredSize(new Dimension(16,16));\r\n    zoomPopupButton.setFocusable(false);\r\n    return zoomPopupButton;\r\n}"},
 {"id":1099, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3100, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public static AbstractButton createZoomButton(DrawingView view) {\r\n    return ButtonFactory.createZoomButton(view, new double[]{ 5, 4, 3, 2, 1.5, 1.25, 1, 0.75, 0.5, 0.25, 0.1 });\r\n}"},
 {"id":1100, "parametername":"final DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3101, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createZoomButton(org.jhotdraw.draw.DrawingView,double[])", "isreturn":0, "sourcecode":"public static AbstractButton createZoomButton(final DrawingView view, double[] factors) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JPopupButton zoomPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(zoomPopupButton, \"view.zoomFactor\");\r\n    zoomPopupButton.setFocusable(false);\r\n    zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == \"scaleFactor\") {\r\n                zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        }\r\n    });\r\n    for (int i = 0; i < (factors.length); i++) {\r\n        zoomPopupButton.add(new ZoomAction(view, factors[i], zoomPopupButton) {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                super.actionPerformed(e);\r\n                zoomPopupButton.setText((((int) ((view.getScaleFactor()) * 100)) + \" %\"));\r\n            }\r\n        });\r\n    }\r\n    // zoomPopupButton.setPreferredSize(new Dimension(16,16));\r\n    zoomPopupButton.setFocusable(false);\r\n    return zoomPopupButton;\r\n}"},
 {"id":1101, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3051, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addAttributesButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\npublic static void addAttributesButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JButton b;\r\n    b = bar.add(new PickAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    b = bar.add(new ApplyAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    bar.addSeparator();\r\n    ButtonFactory.addColorButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addStrokeButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addFontButtonsTo(bar, editor);\r\n}"},
 {"id":1102, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3052, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static void addColorButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ButtonFactory.addColorButtonsTo(bar, editor, ButtonFactory.DEFAULT_COLORS, ButtonFactory.DEFAULT_COLORS_COLUMN_COUNT);\r\n}"},
 {"id":1103, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3053, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.List,int)", "isreturn":0, "sourcecode":"public static void addColorButtonsTo(JToolBar bar, DrawingEditor editor, List<ColorIcon> colors, int columnCount) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.STROKE_COLOR, colors, columnCount, \"attribute.strokeColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.FILL_COLOR, colors, columnCount, \"attribute.fillColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.TEXT_COLOR, colors, columnCount, \"attribute.textColor\", labels, new HashMap<org.jhotdraw.draw.AttributeKey, Object>()));\r\n}"},
 {"id":1104, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3066, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1105, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3066, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1106, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3066, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1107, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3066, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1108, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3067, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1109, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3067, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1110, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3067, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1111, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3067, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createEditorColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1112, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3068, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}"},
 {"id":1113, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3068, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}"},
 {"id":1114, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3068, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}"},
 {"id":1115, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3068, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createEditorColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Microsoft Office:\r\n * <ul>\r\n * <li>When the user clicks on the action region, the default color of the\r\n * DrawingEditor is applied to the selected figures.</li>\r\n * <li>When the user opens the popup menu, a color palette is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the current default color of the\r\n * DrawingEditor.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createEditorColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setAction(new DefaultAttributeAction(editor, attributeKey, defaultAttributes), new Rectangle(0, 0, 22, 22));\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\"), swatches.get(0).getIconWidth(), swatches.get(0).getIconHeight()))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new EditorColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new EditorColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            popupButton.repaint();\r\n        }\r\n    });\r\n    return popupButton;\r\n}"},
 {"id":1116, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3080, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1117, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3080, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1118, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3080, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1119, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3080, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1120, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3081, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1121, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3081, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1122, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3081, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1123, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3081, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A rectangle on the color button displays the current default color of\r\n * the DrawingEditor. The rectangle has the dimensions 1, 17, 20, 4 (x, y,\r\n * width, height).</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createSelectionColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1124, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3082, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}"},
 {"id":1125, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3082, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}"},
 {"id":1126, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3082, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}"},
 {"id":1127, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3082, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createSelectionColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button works like the color button in Adobe Fireworks:\r\n * <ul>\r\n * <li>When the user clicks at the button a popup menu with a color palette\r\n * is displayed.\r\n * Choosing a color from the palette changes the default color of the\r\n * editor and also changes the color of the selected figures.</li>\r\n * <li>A shape on the color button displays the color of the selected\r\n * figures. If no figures are selected, the default color of the\r\n * DrawingEditor is displayed.</li>\r\n * </ul>\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createSelectionColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        AttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new AttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new SelectionColorChooserAction(editor, attributeKey, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"), chooserIcon, defaultAttributes)));\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    Icon icon = new SelectionColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    new SelectionComponentRepainter(editor, popupButton);\r\n    return popupButton;\r\n}"},
 {"id":1128, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3063, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1129, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3063, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1130, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3063, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1131, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3063, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, null);\r\n}"},
 {"id":1132, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3064, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1133, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3064, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1134, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3064, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1135, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3064, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes) {\r\n    return ButtonFactory.createDrawingColorButton(editor, attributeKey, swatches, columnCount, labelKey, labels, defaultAttributes, new Rectangle(1, 17, 20, 4));\r\n}"},
 {"id":1136, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3065, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}"},
 {"id":1137, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3065, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":1, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}"},
 {"id":1138, "parametername":"AttributeKey<Color> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3065, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}"},
 {"id":1139, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3065, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createDrawingColorButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.List,int,java.lang.String,org.jhotdraw.util.ResourceBundleUtil,java.util.Map,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a color button, with an action region and a popup menu. The\r\n * button acts on attributes of the Drawing object in the current DrawingView\r\n * of the DrawingEditor.\r\n *\r\n * @param editor\r\n * \t\tThe DrawingEditor.\r\n * @param attributeKey\r\n * \t\tThe AttributeKey of the color.\r\n * @param swatches\r\n * \t\tA list with labeled colors containing the color palette\r\n * \t\tof the popup menu. The actual labels are retrieved from the supplied\r\n * \t\tresource bundle. This is usually a LinkedHashMap, so that the colors have\r\n * \t\ta predictable order.\r\n * @param columnCount\r\n * \t\tThe number of columns of the color palette.\r\n * @param labelKey\r\n * \t\tThe resource bundle key used for retrieving the icon and\r\n * \t\tthe tooltip of the button.\r\n * @param labels\r\n * \t\tThe resource bundle.\r\n * @param defaultAttributes\r\n * \t\tA set of attributes which are also applied to\r\n * \t\tthe selected figures, when a color is selected. This can be used, to\r\n * \t\tset attributes that otherwise prevent the color from being shown. For\r\n * \t\texample, when the color attribute is set, we want the gradient attribute\r\n * \t\tof the Figure to be cleared.\r\n * @param colorShape\r\n * \t\tThis shape is superimposed on the icon of the button.\r\n * \t\tThe shape is drawn with the default color of the DrawingEditor.\r\n */\r\npublic static JPopupButton createDrawingColorButton(DrawingEditor editor, AttributeKey<Color> attributeKey, List<ColorIcon> swatches, int columnCount, String labelKey, ResourceBundleUtil labels, Map<AttributeKey, Object> defaultAttributes, Shape colorShape) {\r\n    final JPopupButton popupButton = new JPopupButton();\r\n    if (defaultAttributes == null) {\r\n        defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    }\r\n    popupButton.setColumnCount(columnCount, false);\r\n    boolean hasNullColor = false;\r\n    for (ColorIcon swatch : swatches) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, swatch.getColor());\r\n        if ((swatch.getColor()) == null) {\r\n            hasNullColor = true;\r\n        }\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(labelKey), swatch)));\r\n        a.putValue(Action.SHORT_DESCRIPTION, swatch.getName());\r\n    }\r\n    // No color\r\n    if (!hasNullColor) {\r\n        DrawingAttributeAction a;\r\n        HashMap<AttributeKey, Object> attributes = new HashMap<AttributeKey, Object>(defaultAttributes);\r\n        attributes.put(attributeKey, null);\r\n        popupButton.add((a = new DrawingAttributeAction(editor, attributes, labels.getToolTipTextProperty(\"attribute.color.noColor\"), new ColorIcon(null, labels.getToolTipTextProperty(\"attribute.color.noColor\")))));\r\n        a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.noColor\"));\r\n    }\r\n    // Color chooser\r\n    ImageIcon chooserIcon = new ImageIcon(ButtonFactory.class.getResource(\"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png\"));\r\n    Action a;\r\n    popupButton.add((a = new DrawingColorChooserAction(editor, attributeKey, \"color\", chooserIcon, defaultAttributes)));\r\n    labels.configureToolBarButton(popupButton, labelKey);\r\n    a.putValue(Action.SHORT_DESCRIPTION, labels.getToolTipTextProperty(\"attribute.color.colorChooser\"));\r\n    Icon icon = new DrawingColorIcon(editor, attributeKey, labels.getIconProperty(labelKey, ButtonFactory.class).getImage(), colorShape);\r\n    popupButton.setIcon(icon);\r\n    popupButton.setDisabledIcon(icon);\r\n    popupButton.setFocusable(false);\r\n    if (editor != null) {\r\n        editor.addPropertyChangeListener(new SelectionComponentRepainter(editor, popupButton));\r\n    }\r\n    return popupButton;\r\n}"},
 {"id":1140, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3058, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addStrokeButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static void addStrokeButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createStrokeDecorationButton(editor));\r\n    bar.add(ButtonFactory.createStrokeWidthButton(editor));\r\n    bar.add(ButtonFactory.createStrokeDashesButton(editor));\r\n    bar.add(ButtonFactory.createStrokeTypeButton(editor));\r\n    bar.add(ButtonFactory.createStrokePlacementButton(editor));\r\n    bar.add(ButtonFactory.createStrokeCapButton(editor));\r\n    bar.add(ButtonFactory.createStrokeJoinButton(editor));\r\n}"},
 {"id":1141, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3094, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1142, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3094, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1143, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3097, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, labels);\r\n}"},
 {"id":1144, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3097, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, labels);\r\n}"},
 {"id":1145, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3097, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, labels);\r\n}"},
 {"id":1146, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3095, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[])", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1147, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3095, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[])", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths) {\r\n    return ButtonFactory.createStrokeWidthButton(editor, new double[]{ 0.5, 1.0, 2.0, 3.0, 5.0, 9.0, 13.0 }, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1148, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3096, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[],org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths, ResourceBundleUtil labels) {\r\n    JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth.text\");\r\n    strokeWidthPopupButton.setFocusable(false);\r\n    NumberFormat formatter = NumberFormat.getInstance();\r\n    if (formatter instanceof DecimalFormat) {\r\n        ((DecimalFormat) (formatter)).setMaximumFractionDigits(1);\r\n        ((DecimalFormat) (formatter)).setMinimumFractionDigits(0);\r\n    }\r\n    for (int i = 0; i < (widths.length); i++) {\r\n        String label = Double.toString(widths[i]);\r\n        Icon icon = new StrokeIcon(new BasicStroke(((float) (widths[i])), BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));\r\n        AttributeAction a = new AttributeAction(editor, AttributeKeys.STROKE_WIDTH, new Double(widths[i]), label, icon);\r\n        a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.strokeWidth.text\"));\r\n        AbstractButton btn = strokeWidthPopupButton.add(a);\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeWidthPopupButton;\r\n}"},
 {"id":1149, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3096, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[],org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths, ResourceBundleUtil labels) {\r\n    JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth.text\");\r\n    strokeWidthPopupButton.setFocusable(false);\r\n    NumberFormat formatter = NumberFormat.getInstance();\r\n    if (formatter instanceof DecimalFormat) {\r\n        ((DecimalFormat) (formatter)).setMaximumFractionDigits(1);\r\n        ((DecimalFormat) (formatter)).setMinimumFractionDigits(0);\r\n    }\r\n    for (int i = 0; i < (widths.length); i++) {\r\n        String label = Double.toString(widths[i]);\r\n        Icon icon = new StrokeIcon(new BasicStroke(((float) (widths[i])), BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));\r\n        AttributeAction a = new AttributeAction(editor, AttributeKeys.STROKE_WIDTH, new Double(widths[i]), label, icon);\r\n        a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.strokeWidth.text\"));\r\n        AbstractButton btn = strokeWidthPopupButton.add(a);\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeWidthPopupButton;\r\n}"},
 {"id":1150, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3096, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeWidthButton(org.jhotdraw.draw.DrawingEditor,double[],org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeWidthButton(DrawingEditor editor, double[] widths, ResourceBundleUtil labels) {\r\n    JPopupButton strokeWidthPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeWidthPopupButton, \"attribute.strokeWidth.text\");\r\n    strokeWidthPopupButton.setFocusable(false);\r\n    NumberFormat formatter = NumberFormat.getInstance();\r\n    if (formatter instanceof DecimalFormat) {\r\n        ((DecimalFormat) (formatter)).setMaximumFractionDigits(1);\r\n        ((DecimalFormat) (formatter)).setMinimumFractionDigits(0);\r\n    }\r\n    for (int i = 0; i < (widths.length); i++) {\r\n        String label = Double.toString(widths[i]);\r\n        Icon icon = new StrokeIcon(new BasicStroke(((float) (widths[i])), BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));\r\n        AttributeAction a = new AttributeAction(editor, AttributeKeys.STROKE_WIDTH, new Double(widths[i]), label, icon);\r\n        a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.strokeWidth.text\"));\r\n        AbstractButton btn = strokeWidthPopupButton.add(a);\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeWidthPopupButton;\r\n}"},
 {"id":1151, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3089, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDecorationButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeDecorationButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeDecorationPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDecorationPopupButton, \"attribute.strokeDecoration\");\r\n    strokeDecorationPopupButton.setFocusable(false);\r\n    strokeDecorationPopupButton.setColumnCount(2, false);\r\n    LineDecoration[] decorations = new LineDecoration[]{ // Arrow\r\n    new ArrowTip(0.35, 12, 11.3), // Arrow\r\n    new ArrowTip(0.35, 13, 7), // Generalization triangle\r\n    new ArrowTip(((Math.PI) / 5), 12, 9.8, true, true, false), // Dependency arrow\r\n    new ArrowTip(((Math.PI) / 6), 12, 0, false, true, false), // Link arrow\r\n    new ArrowTip(((Math.PI) / 11), 13, 0, false, true, true), // Aggregation diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, false, true, false), // Composition diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, true, true, true), null };\r\n    for (int i = 0; i < (decorations.length); i++) {\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.START_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], true)));\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.END_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], false)));\r\n    }\r\n    return strokeDecorationPopupButton;\r\n}"},
 {"id":1152, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3089, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDecorationButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeDecorationButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeDecorationPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDecorationPopupButton, \"attribute.strokeDecoration\");\r\n    strokeDecorationPopupButton.setFocusable(false);\r\n    strokeDecorationPopupButton.setColumnCount(2, false);\r\n    LineDecoration[] decorations = new LineDecoration[]{ // Arrow\r\n    new ArrowTip(0.35, 12, 11.3), // Arrow\r\n    new ArrowTip(0.35, 13, 7), // Generalization triangle\r\n    new ArrowTip(((Math.PI) / 5), 12, 9.8, true, true, false), // Dependency arrow\r\n    new ArrowTip(((Math.PI) / 6), 12, 0, false, true, false), // Link arrow\r\n    new ArrowTip(((Math.PI) / 11), 13, 0, false, true, true), // Aggregation diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, false, true, false), // Composition diamond\r\n    new ArrowTip(((Math.PI) / 6), 10, 18, true, true, true), null };\r\n    for (int i = 0; i < (decorations.length); i++) {\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.START_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], true)));\r\n        strokeDecorationPopupButton.add(new AttributeAction(editor, AttributeKeys.END_DECORATION, decorations[i], null, new LineDecorationIcon(decorations[i], false)));\r\n    }\r\n    return strokeDecorationPopupButton;\r\n}"},
 {"id":1153, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3085, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1154, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3085, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1155, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3088, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, new double[][]{ null, new double[]{ 4.0, 4.0 }, new double[]{ 2.0, 2.0 }, new double[]{ 4.0, 2.0 }, new double[]{ 2.0, 4.0 }, new double[]{ 8.0, 2.0 }, new double[]{ 6.0, 2.0, 2.0, 2.0 } }, labels);\r\n}"},
 {"id":1156, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3088, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, new double[][]{ null, new double[]{ 4.0, 4.0 }, new double[]{ 2.0, 2.0 }, new double[]{ 4.0, 2.0 }, new double[]{ 2.0, 4.0 }, new double[]{ 8.0, 2.0 }, new double[]{ 6.0, 2.0, 2.0, 2.0 } }, labels);\r\n}"},
 {"id":1157, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3088, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, new double[][]{ null, new double[]{ 4.0, 4.0 }, new double[]{ 2.0, 2.0 }, new double[]{ 4.0, 2.0 }, new double[]{ 2.0, 4.0 }, new double[]{ 8.0, 2.0 }, new double[]{ 6.0, 2.0, 2.0, 2.0 } }, labels);\r\n}"},
 {"id":1158, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3086, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][])", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, dashes, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1159, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3086, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][])", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes) {\r\n    return ButtonFactory.createStrokeDashesButton(editor, dashes, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1160, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3087, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][],org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes, ResourceBundleUtil labels) {\r\n    JPopupButton strokeDashesPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDashesPopupButton, \"attribute.strokeDashes\");\r\n    strokeDashesPopupButton.setFocusable(false);\r\n    // strokeDashesPopupButton.setColumnCount(2, false);\r\n    for (int i = 0; i < (dashes.length); i++) {\r\n        float[] fdashes;\r\n        if ((dashes[i]) == null) {\r\n            fdashes = null;\r\n        } else {\r\n            fdashes = new float[dashes[i].length];\r\n            for (int j = 0; j < (dashes[i].length); j++) {\r\n                fdashes[j] = ((float) (dashes[i][j]));\r\n            }\r\n        }\r\n        Icon icon = new StrokeIcon(new BasicStroke(2.0F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10.0F, fdashes, 0));\r\n        AbstractButton btn = strokeDashesPopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_DASHES, dashes[i], null, icon));\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeDashesPopupButton;\r\n}"},
 {"id":1161, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3087, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][],org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes, ResourceBundleUtil labels) {\r\n    JPopupButton strokeDashesPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDashesPopupButton, \"attribute.strokeDashes\");\r\n    strokeDashesPopupButton.setFocusable(false);\r\n    // strokeDashesPopupButton.setColumnCount(2, false);\r\n    for (int i = 0; i < (dashes.length); i++) {\r\n        float[] fdashes;\r\n        if ((dashes[i]) == null) {\r\n            fdashes = null;\r\n        } else {\r\n            fdashes = new float[dashes[i].length];\r\n            for (int j = 0; j < (dashes[i].length); j++) {\r\n                fdashes[j] = ((float) (dashes[i][j]));\r\n            }\r\n        }\r\n        Icon icon = new StrokeIcon(new BasicStroke(2.0F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10.0F, fdashes, 0));\r\n        AbstractButton btn = strokeDashesPopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_DASHES, dashes[i], null, icon));\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeDashesPopupButton;\r\n}"},
 {"id":1162, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3087, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeDashesButton(org.jhotdraw.draw.DrawingEditor,double[][],org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeDashesButton(DrawingEditor editor, double[][] dashes, ResourceBundleUtil labels) {\r\n    JPopupButton strokeDashesPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeDashesPopupButton, \"attribute.strokeDashes\");\r\n    strokeDashesPopupButton.setFocusable(false);\r\n    // strokeDashesPopupButton.setColumnCount(2, false);\r\n    for (int i = 0; i < (dashes.length); i++) {\r\n        float[] fdashes;\r\n        if ((dashes[i]) == null) {\r\n            fdashes = null;\r\n        } else {\r\n            fdashes = new float[dashes[i].length];\r\n            for (int j = 0; j < (dashes[i].length); j++) {\r\n                fdashes[j] = ((float) (dashes[i][j]));\r\n            }\r\n        }\r\n        Icon icon = new StrokeIcon(new BasicStroke(2.0F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 10.0F, fdashes, 0));\r\n        AbstractButton btn = strokeDashesPopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_DASHES, dashes[i], null, icon));\r\n        btn.setDisabledIcon(icon);\r\n    }\r\n    return strokeDashesPopupButton;\r\n}"},
 {"id":1163, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3093, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeTypeButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeTypeButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeTypePopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeTypePopupButton, \"attribute.strokeType\");\r\n    strokeTypePopupButton.setFocusable(false);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.BASIC, labels.getString(\"attribute.strokeType.basic\"), new StrokeIcon(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL))));\r\n    HashMap<AttributeKey, Object> attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 2.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(2, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 3.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(3, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 4.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(4, 1))));\r\n    return strokeTypePopupButton;\r\n}"},
 {"id":1164, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3093, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeTypeButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeTypeButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokeTypePopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokeTypePopupButton, \"attribute.strokeType\");\r\n    strokeTypePopupButton.setFocusable(false);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.BASIC, labels.getString(\"attribute.strokeType.basic\"), new StrokeIcon(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL))));\r\n    HashMap<AttributeKey, Object> attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 2.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(2, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 3.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(3, 1))));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_TYPE, AttributeKeys.StrokeType.DOUBLE);\r\n    attr.put(AttributeKeys.STROKE_INNER_WIDTH_FACTOR, 4.0);\r\n    strokeTypePopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeType.double\"), new StrokeIcon(new DoubleStroke(4, 1))));\r\n    return strokeTypePopupButton;\r\n}"},
 {"id":1165, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3092, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokePlacementButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokePlacementButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokePlacementPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokePlacementPopupButton, \"attribute.strokePlacement\");\r\n    strokePlacementPopupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.center\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.inside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideUnfilled\"), null));\r\n    return strokePlacementPopupButton;\r\n}"},
 {"id":1166, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3092, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokePlacementButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokePlacementButton(DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JPopupButton strokePlacementPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(strokePlacementPopupButton, \"attribute.strokePlacement\");\r\n    strokePlacementPopupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.center\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.inside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.CENTER);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outside\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.FULL);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideFilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.CENTER);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.centerUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.INSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.insideUnfilled\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_PLACEMENT, AttributeKeys.StrokePlacement.OUTSIDE);\r\n    attr.put(AttributeKeys.FILL_UNDER_STROKE, AttributeKeys.Underfill.NONE);\r\n    strokePlacementPopupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokePlacement.outsideUnfilled\"), null));\r\n    return strokePlacementPopupButton;\r\n}"},
 {"id":1167, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3054, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addFontButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static void addFontButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createFontButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleBoldButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleItalicButton(editor));\r\n    bar.add(ButtonFactory.createFontStyleUnderlineButton(editor));\r\n}"},
 {"id":1168, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3069, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1169, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3069, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":1, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1170, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3071, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createFontButton(editor, AttributeKeys.FONT_FACE, labels);\r\n}"},
 {"id":1171, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3071, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createFontButton(editor, AttributeKeys.FONT_FACE, labels);\r\n}"},
 {"id":1172, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3071, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    return ButtonFactory.createFontButton(editor, AttributeKeys.FONT_FACE, labels);\r\n}"},
 {"id":1173, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3070, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}"},
 {"id":1174, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3070, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}"},
 {"id":1175, "parametername":"AttributeKey<Font> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3070, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}"},
 {"id":1176, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3070, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createFontButton(DrawingEditor editor, AttributeKey<Font> key, ResourceBundleUtil labels) {\r\n    JPopupButton fontPopupButton;\r\n    fontPopupButton = new JPopupButton();\r\n    labels.configureToolBarButton(fontPopupButton, \"attribute.font\");\r\n    fontPopupButton.setFocusable(false);\r\n    JPopupMenu popupMenu = new JPopupMenu();\r\n    JFontChooser fontChooser = new JFontChooser();\r\n    new FontChooserHandler(editor, key, fontChooser, popupMenu);\r\n    popupMenu.add(fontChooser);\r\n    fontPopupButton.setPopupMenu(popupMenu);\r\n    fontPopupButton.setFocusable(false);\r\n    return fontPopupButton;\r\n}"},
 {"id":1177, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3072, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JButton createFontStyleBoldButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleBoldButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1178, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3073, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JButton createFontStyleBoldButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.bold\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_BOLD, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.bold.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}"},
 {"id":1179, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3073, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleBoldButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JButton createFontStyleBoldButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.bold\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_BOLD, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.bold.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}"},
 {"id":1180, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3074, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JButton createFontStyleItalicButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleItalicButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1181, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3075, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JButton createFontStyleItalicButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.italic\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_ITALIC, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.italic.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}"},
 {"id":1182, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3075, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleItalicButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JButton createFontStyleItalicButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.italic\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_ITALIC, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.italic.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}"},
 {"id":1183, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3076, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JButton createFontStyleUnderlineButton(DrawingEditor editor) {\r\n    return ButtonFactory.createFontStyleUnderlineButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1184, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3077, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JButton createFontStyleUnderlineButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.underline\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_UNDERLINE, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.underline.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}"},
 {"id":1185, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3077, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createFontStyleUnderlineButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JButton createFontStyleUnderlineButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JButton btn;\r\n    btn = new JButton();\r\n    labels.configureToolBarButton(btn, \"attribute.fontStyle.underline\");\r\n    btn.setFocusable(false);\r\n    AbstractAction a = new AttributeToggler<Boolean>(editor, AttributeKeys.FONT_UNDERLINE, Boolean.TRUE, Boolean.FALSE, new StyledEditorKit.BoldAction());\r\n    a.putValue(Actions.UNDO_PRESENTATION_NAME_KEY, labels.getString(\"attribute.fontStyle.underline.text\"));\r\n    btn.addActionListener(a);\r\n    return btn;\r\n}"},
 {"id":1186, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3050, "methodname":"org.jhotdraw.draw.action.ButtonFactory.addAlignmentButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\npublic static void addAlignmentButtonsTo(JToolBar bar, final DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    bar.add(new AlignAction.West(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.East(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.Horizontal(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.North(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.South(editor)).setFocusable(false);\r\n    bar.add(new AlignAction.Vertical(editor)).setFocusable(false);\r\n    bar.addSeparator();\r\n    bar.add(new MoveAction.West(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.East(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.North(editor)).setFocusable(false);\r\n    bar.add(new MoveAction.South(editor)).setFocusable(false);\r\n    bar.addSeparator();\r\n    bar.add(new BringToFrontAction(editor)).setFocusable(false);\r\n    bar.add(new SendToBackAction(editor)).setFocusable(false);\r\n}"},
 {"id":1187, "parametername":"final DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3098, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createToggleGridButton(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Creates a button which toggles between two GridConstrainer for\r\n * a DrawingView.\r\n */\r\npublic static AbstractButton createToggleGridButton(final DrawingView view) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    final JToggleButton toggleButton;\r\n    toggleButton = new JToggleButton();\r\n    labels.configureToolBarButton(toggleButton, \"view.toggleGrid\");\r\n    toggleButton.setFocusable(false);\r\n    toggleButton.addItemListener(new ItemListener() {\r\n        public void itemStateChanged(ItemEvent event) {\r\n            view.setConstrainerVisible(toggleButton.isSelected());\r\n            // view.getComponent().repaint();\r\n        }\r\n    });\r\n    view.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            // String constants are interned\r\n            if ((evt.getPropertyName()) == (DrawingView.CONSTRAINER_VISIBLE_PROPERTY)) {\r\n                toggleButton.setSelected(view.isConstrainerVisible());\r\n            }\r\n        }\r\n    });\r\n    return toggleButton;\r\n}"},
 {"id":1188, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3083, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeCapButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeCapButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1189, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3083, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeCapButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeCapButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1190, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3084, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeCapButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeCap\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_BUTT);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.butt\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_SQUARE);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.square\"), null));\r\n    return popupButton;\r\n}"},
 {"id":1191, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3084, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeCapButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeCap\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_BUTT);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.butt\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_SQUARE);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.square\"), null));\r\n    return popupButton;\r\n}"},
 {"id":1192, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3084, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeCapButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeCapButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeCap\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_BUTT);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.butt\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_CAP, BasicStroke.CAP_SQUARE);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeCap.square\"), null));\r\n    return popupButton;\r\n}"},
 {"id":1193, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3090, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeJoinButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeJoinButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1194, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3090, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeJoinButton(DrawingEditor editor) {\r\n    return ButtonFactory.createStrokeJoinButton(editor, ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\"));\r\n}"},
 {"id":1195, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3091, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeJoinButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeJoin\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_BEVEL);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.bevel\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_MITER);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.miter\"), null));\r\n    return popupButton;\r\n}"},
 {"id":1196, "parametername":"org.jhotdraw.gui.JPopupButton", "parametertype":"org.jhotdraw.gui.JPopupButton", "parameterclass":386, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3091, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":1, "sourcecode":"public static JPopupButton createStrokeJoinButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeJoin\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_BEVEL);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.bevel\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_MITER);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.miter\"), null));\r\n    return popupButton;\r\n}"},
 {"id":1197, "parametername":"ResourceBundleUtil labels", "parametertype":"org.jhotdraw.util.ResourceBundleUtil", "parameterclass":645, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3091, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createStrokeJoinButton(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.util.ResourceBundleUtil)", "isreturn":0, "sourcecode":"public static JPopupButton createStrokeJoinButton(DrawingEditor editor, ResourceBundleUtil labels) {\r\n    JPopupButton popupButton = new JPopupButton();\r\n    labels.configureToolBarButton(popupButton, \"attribute.strokeJoin\");\r\n    popupButton.setFocusable(false);\r\n    HashMap<AttributeKey, Object> attr;\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_BEVEL);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.bevel\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_ROUND);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.round\"), null));\r\n    attr = new HashMap<AttributeKey, Object>();\r\n    attr.put(AttributeKeys.STROKE_JOIN, BasicStroke.JOIN_MITER);\r\n    popupButton.add(new AttributeAction(editor, attr, labels.getString(\"attribute.strokeJoin.miter\"), null));\r\n    return popupButton;\r\n}"},
 {"id":1198, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3078, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createPickAttributesButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static JButton createPickAttributesButton(DrawingEditor editor) {\r\n    JButton btn;\r\n    btn = new JButton(new PickAttributesAction(editor));\r\n    if ((btn.getIcon()) != null) {\r\n        btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n    }\r\n    btn.setHorizontalTextPosition(JButton.CENTER);\r\n    btn.setVerticalTextPosition(JButton.BOTTOM);\r\n    btn.setText(null);\r\n    btn.setFocusable(false);\r\n    return btn;\r\n}"},
 {"id":1199, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":296, "classname":"org.jhotdraw.draw.action.ButtonFactory", "methodid":3061, "methodname":"org.jhotdraw.draw.action.ButtonFactory.createApplyAttributesButton(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a button that applies the default attributes of the editor to\r\n * the current selection.\r\n */\r\npublic static JButton createApplyAttributesButton(DrawingEditor editor) {\r\n    JButton btn;\r\n    btn = new JButton(new ApplyAttributesAction(editor));\r\n    if ((btn.getIcon()) != null) {\r\n        btn.putClientProperty(\"hideActionText\", Boolean.TRUE);\r\n    }\r\n    btn.setHorizontalTextPosition(JButton.CENTER);\r\n    btn.setVerticalTextPosition(JButton.BOTTOM);\r\n    btn.setText(null);\r\n    btn.setFocusable(false);\r\n    return btn;\r\n}"},
 {"id":1200, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3116, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key) {\r\n    this(editor, key, null, null);\r\n}"},
 {"id":1201, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3116, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key) {\r\n    this(editor, key, null, null);\r\n}"},
 {"id":1202, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3117, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.Map)", "isreturn":0, "sourcecode":"public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Map<AttributeKey, Object> fixedAttributes) {\r\n    this(editor, new AttributeKey[]{ key }, null, null, fixedAttributes);\r\n}"},
 {"id":1203, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3117, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.util.Map)", "isreturn":0, "sourcecode":"public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Map<AttributeKey, Object> fixedAttributes) {\r\n    this(editor, new AttributeKey[]{ key }, null, null, fixedAttributes);\r\n}"},
 {"id":1204, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3118, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[])", "isreturn":0, "sourcecode":"public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys) {\r\n    this(editor, keys, null, null);\r\n}"},
 {"id":1205, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3119, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}"},
 {"id":1206, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3119, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}"},
 {"id":1207, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3120, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name) {\r\n    this(editor, key, name, null);\r\n}"},
 {"id":1208, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3120, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name) {\r\n    this(editor, key, name, null);\r\n}"},
 {"id":1209, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3121, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name, Icon icon) {\r\n    this(editor, new AttributeKey[]{ key }, name, icon);\r\n}"},
 {"id":1210, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3121, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public DefaultAttributeAction(DrawingEditor editor, AttributeKey key, String name, Icon icon) {\r\n    this(editor, new AttributeKey[]{ key }, name, icon);\r\n}"},
 {"id":1211, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3122, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[],java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys, String name, Icon icon) {\r\n    this(editor, keys, name, icon, new HashMap<AttributeKey, Object>());\r\n}"},
 {"id":1212, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3123, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey[],java.lang.String,javax.swing.Icon,java.util.Map)", "isreturn":0, "sourcecode":"public DefaultAttributeAction(DrawingEditor editor, AttributeKey[] keys, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor);\r\n    this.keys = keys;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n    editor.addPropertyChangeListener(new PropertyChangeListener() {\r\n        public void propertyChange(PropertyChangeEvent evt) {\r\n            if (evt.getPropertyName().equals(DefaultAttributeAction.this.keys[0])) {\r\n                putValue((\"attribute_\" + (DefaultAttributeAction.this.keys[0])), evt.getNewValue());\r\n            }\r\n        }\r\n    });\r\n    this.fixedAttributes = fixedAttributes;\r\n}"},
 {"id":1213, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":299, "classname":"org.jhotdraw.draw.action.DefaultAttributeAction", "methodid":3127, "methodname":"org.jhotdraw.draw.action.DefaultAttributeAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt) {\r\n    // setEnabled(getView().getSelectionCount() > 0);\r\n}"},
 {"id":1214, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3128, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}"},
 {"id":1215, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3128, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value) {\r\n    this(editor, key, value, null, null);\r\n}"},
 {"id":1216, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3129, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}"},
 {"id":1217, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3129, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, Icon icon) {\r\n    this(editor, key, value, null, icon);\r\n}"},
 {"id":1218, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3130, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}"},
 {"id":1219, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3130, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name) {\r\n    this(editor, key, value, name, null);\r\n}"},
 {"id":1220, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3131, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}"},
 {"id":1221, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3131, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon) {\r\n    this(editor, key, value, name, icon, null);\r\n}"},
 {"id":1222, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3132, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)", "isreturn":0, "sourcecode":"public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}"},
 {"id":1223, "parametername":"AttributeKey key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3132, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.lang.String,javax.swing.Icon,javax.swing.Action)", "isreturn":0, "sourcecode":"public DrawingAttributeAction(DrawingEditor editor, AttributeKey key, Object value, String name, Icon icon, Action compatibleTextAction) {\r\n    super(editor);\r\n    this.attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(key, value);\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}"},
 {"id":1224, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":300, "classname":"org.jhotdraw.draw.action.DrawingAttributeAction", "methodid":3133, "methodname":"org.jhotdraw.draw.action.DrawingAttributeAction.-init-(org.jhotdraw.draw.DrawingEditor,java.util.Map,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public DrawingAttributeAction(DrawingEditor editor, Map<AttributeKey, Object> attributes, String name, Icon icon) {\r\n    super(editor);\r\n    this.attributes = attributes;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    updateEnabledState();\r\n}"},
 {"id":1225, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3136, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}"},
 {"id":1226, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3136, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}"},
 {"id":1227, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3137, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}"},
 {"id":1228, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3137, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}"},
 {"id":1229, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3138, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}"},
 {"id":1230, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3138, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic DrawingColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}"},
 {"id":1231, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3139, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}"},
 {"id":1232, "parametername":"final AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3139, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}"},
 {"id":1233, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3140, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)", "isreturn":0, "sourcecode":"public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}"},
 {"id":1234, "parametername":"final AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":301, "classname":"org.jhotdraw.draw.action.DrawingColorChooserAction", "methodid":3140, "methodname":"org.jhotdraw.draw.action.DrawingColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)", "isreturn":0, "sourcecode":"public DrawingColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}"},
 {"id":1235, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":302, "classname":"org.jhotdraw.draw.action.DrawingColorIcon", "methodid":3144, "methodname":"org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param key\r\n * \t\tThe key of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param colorShape\r\n * \t\tThe shape to be drawn with the color of the default\r\n * \t\tattribute.\r\n */\r\npublic DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1236, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":302, "classname":"org.jhotdraw.draw.action.DrawingColorIcon", "methodid":3144, "methodname":"org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param key\r\n * \t\tThe key of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param colorShape\r\n * \t\tThe shape to be drawn with the color of the default\r\n * \t\tattribute.\r\n */\r\npublic DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1237, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":302, "classname":"org.jhotdraw.draw.action.DrawingColorIcon", "methodid":3145, "methodname":"org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)", "isreturn":0, "sourcecode":"public DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1238, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":302, "classname":"org.jhotdraw.draw.action.DrawingColorIcon", "methodid":3145, "methodname":"org.jhotdraw.draw.action.DrawingColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)", "isreturn":0, "sourcecode":"public DrawingColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1239, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3166, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.setTarget(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Sets the target of the proxy.\r\n */\r\npublic void setTarget(DrawingEditor newValue) {\r\n    if ((target) != null) {\r\n        target.removePropertyChangeListener(forwarder);\r\n    }\r\n    this.target = newValue;\r\n    if ((target) != null) {\r\n        target.addPropertyChangeListener(forwarder);\r\n    }\r\n}"},
 {"id":1240, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3148, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.add(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void add(DrawingView view) {\r\n    target.add(view);\r\n}"},
 {"id":1241, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3160, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.remove(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void remove(DrawingView view) {\r\n    target.remove(view);\r\n}"},
 {"id":1242, "parametername":"DrawingView newValue", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3161, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.setActiveView(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void setActiveView(DrawingView newValue) {\r\n    target.setActiveView(newValue);\r\n}"},
 {"id":1243, "parametername":"Tool t", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3167, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.setTool(org.jhotdraw.draw.Tool)", "isreturn":0, "sourcecode":"public void setTool(Tool t) {\r\n    target.setTool(t);\r\n}"},
 {"id":1244, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3163, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.setDefaultAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"public <T> void setDefaultAttribute(AttributeKey<T> key, T value) {\r\n    target.setDefaultAttribute(key, value);\r\n}"},
 {"id":1245, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3152, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.getDefaultAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public <T> T getDefaultAttribute(AttributeKey<T> key) {\r\n    return target.getDefaultAttribute(key);\r\n}"},
 {"id":1246, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3149, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.applyDefaultAttributesTo(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void applyDefaultAttributesTo(Figure f) {\r\n    target.applyDefaultAttributesTo(f);\r\n}"},
 {"id":1247, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3165, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.setHandleAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"public <T> void setHandleAttribute(AttributeKey<T> key, T value) {\r\n    target.setHandleAttribute(key, value);\r\n}"},
 {"id":1248, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":304, "classname":"org.jhotdraw.draw.action.DrawingEditorProxy", "methodid":3156, "methodname":"org.jhotdraw.draw.action.DrawingEditorProxy.getHandleAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public <T> T getHandleAttribute(AttributeKey<T> key) {\r\n    return target.getHandleAttribute(key);\r\n}"},
 {"id":1249, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":305, "classname":"org.jhotdraw.draw.action.EditCanvasAction", "methodid":3170, "methodname":"org.jhotdraw.draw.action.EditCanvasAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditCanvasAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditCanvasAction.ID);\r\n}"},
 {"id":1250, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":305, "classname":"org.jhotdraw.draw.action.EditCanvasAction", "methodid":3170, "methodname":"org.jhotdraw.draw.action.EditCanvasAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditCanvasAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditCanvasAction.ID);\r\n}"},
 {"id":1251, "parametername":"Drawing newValue", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":306, "classname":"org.jhotdraw.draw.action.EditCanvasPanel", "methodid":3181, "methodname":"org.jhotdraw.draw.action.EditCanvasPanel.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Sets the GridConstrainer to be edited by this panel.\r\n *\r\n * @param newValue\r\n * \t\tThe GridConstrainer.\r\n */\r\npublic void setDrawing(Drawing newValue) {\r\n    drawing = newValue;\r\n    // XXX - This does not work, we must pass the drawing editor here!\r\n    opacitySliderHandler.setDrawing(drawing);\r\n    opacityFieldHandler.setDrawing(drawing);\r\n    updatePanel();\r\n}"},
 {"id":1252, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":307, "classname":"org.jhotdraw.draw.action.EditGridAction", "methodid":3184, "methodname":"org.jhotdraw.draw.action.EditGridAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditGridAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditGridAction.ID);\r\n}"},
 {"id":1253, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":307, "classname":"org.jhotdraw.draw.action.EditGridAction", "methodid":3184, "methodname":"org.jhotdraw.draw.action.EditGridAction.-init-(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditGridAction(Application app, DrawingEditor editor) {\r\n    super(editor);\r\n    this.app = app;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, EditGridAction.ID);\r\n}"},
 {"id":1254, "parametername":"GridConstrainer newValue", "parametertype":"org.jhotdraw.draw.GridConstrainer", "parameterclass":189, "classid":308, "classname":"org.jhotdraw.draw.action.EditGridPanel", "methodid":3192, "methodname":"org.jhotdraw.draw.action.EditGridPanel.setConstrainer(org.jhotdraw.draw.GridConstrainer)", "isreturn":0, "sourcecode":"/**\r\n * Sets the GridConstrainer to be edited by this panel.\r\n *\r\n * @param newValue\r\n * \t\tThe GridConstrainer.\r\n */\r\npublic void setConstrainer(GridConstrainer newValue) {\r\n    constrainer = newValue;\r\n    widthField.setValue(constrainer.getWidth());\r\n    heightField.setValue(constrainer.getHeight());\r\n    thetaField.setValue((((constrainer.getTheta()) * 180.0) / (Math.PI)));\r\n}"},
 {"id":1255, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3193, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}"},
 {"id":1256, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3193, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}"},
 {"id":1257, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3194, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}"},
 {"id":1258, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3194, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}"},
 {"id":1259, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3195, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}"},
 {"id":1260, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3195, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic EditorColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}"},
 {"id":1261, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3196, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}"},
 {"id":1262, "parametername":"final AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3196, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}"},
 {"id":1263, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3197, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)", "isreturn":0, "sourcecode":"public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, fixedAttributes, name, icon);\r\n    this.key = key;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}"},
 {"id":1264, "parametername":"final AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3197, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)", "isreturn":0, "sourcecode":"public EditorColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, fixedAttributes, name, icon);\r\n    this.key = key;\r\n    putValue(AbstractAction.NAME, name);\r\n    putValue(AbstractAction.SMALL_ICON, icon);\r\n    setEnabled(true);\r\n}"},
 {"id":1265, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":309, "classname":"org.jhotdraw.draw.action.EditorColorChooserAction", "methodid":3200, "methodname":"org.jhotdraw.draw.action.EditorColorChooserAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt) {\r\n    // setEnabled(getView().getSelectionCount() > 0);\r\n}"},
 {"id":1266, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":310, "classname":"org.jhotdraw.draw.action.EditorColorIcon", "methodid":3201, "methodname":"org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param key\r\n * \t\tThe key of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param colorShape\r\n * \t\tThe shape to be drawn with the color of the default\r\n * \t\tattribute.\r\n */\r\npublic EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1267, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":310, "classname":"org.jhotdraw.draw.action.EditorColorIcon", "methodid":3201, "methodname":"org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param key\r\n * \t\tThe key of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param colorShape\r\n * \t\tThe shape to be drawn with the color of the default\r\n * \t\tattribute.\r\n */\r\npublic EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1268, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":310, "classname":"org.jhotdraw.draw.action.EditorColorIcon", "methodid":3202, "methodname":"org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)", "isreturn":0, "sourcecode":"public EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1269, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":310, "classname":"org.jhotdraw.draw.action.EditorColorIcon", "methodid":3202, "methodname":"org.jhotdraw.draw.action.EditorColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)", "isreturn":0, "sourcecode":"public EditorColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1270, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":311, "classname":"org.jhotdraw.draw.action.FontChooserHandler", "methodid":3204, "methodname":"org.jhotdraw.draw.action.FontChooserHandler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.JFontChooser,javax.swing.JPopupMenu)", "isreturn":0, "sourcecode":"// protected Map<AttributeKey, Object> attributes;\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic FontChooserHandler(DrawingEditor editor, AttributeKey<Font> key, JFontChooser fontChooser, JPopupMenu popupMenu) {\r\n    super(editor);\r\n    this.key = key;\r\n    this.fontChooser = fontChooser;\r\n    this.popupMenu = popupMenu;\r\n    fontChooser.addActionListener(this);\r\n    fontChooser.addPropertyChangeListener(this);\r\n    updateEnabledState();\r\n}"},
 {"id":1271, "parametername":"AttributeKey<Font> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":311, "classname":"org.jhotdraw.draw.action.FontChooserHandler", "methodid":3204, "methodname":"org.jhotdraw.draw.action.FontChooserHandler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.JFontChooser,javax.swing.JPopupMenu)", "isreturn":0, "sourcecode":"// protected Map<AttributeKey, Object> attributes;\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic FontChooserHandler(DrawingEditor editor, AttributeKey<Font> key, JFontChooser fontChooser, JPopupMenu popupMenu) {\r\n    super(editor);\r\n    this.key = key;\r\n    this.fontChooser = fontChooser;\r\n    this.popupMenu = popupMenu;\r\n    fontChooser.addActionListener(this);\r\n    fontChooser.addPropertyChangeListener(this);\r\n    updateEnabledState();\r\n}"},
 {"id":1272, "parametername":"JFontChooser fontChooser", "parametertype":"org.jhotdraw.gui.JFontChooser", "parameterclass":379, "classid":311, "classname":"org.jhotdraw.draw.action.FontChooserHandler", "methodid":3204, "methodname":"org.jhotdraw.draw.action.FontChooserHandler.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.JFontChooser,javax.swing.JPopupMenu)", "isreturn":0, "sourcecode":"// protected Map<AttributeKey, Object> attributes;\r\n/**\r\n * Creates a new instance.\r\n */\r\npublic FontChooserHandler(DrawingEditor editor, AttributeKey<Font> key, JFontChooser fontChooser, JPopupMenu popupMenu) {\r\n    super(editor);\r\n    this.key = key;\r\n    this.fontChooser = fontChooser;\r\n    this.popupMenu = popupMenu;\r\n    fontChooser.addActionListener(this);\r\n    fontChooser.addPropertyChangeListener(this);\r\n    updateEnabledState();\r\n}"},
 {"id":1273, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3223, "methodname":"org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic GroupAction(DrawingEditor editor) {\r\n    this(editor, new GroupFigure(), true);\r\n}"},
 {"id":1274, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3224, "methodname":"org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"public GroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    this(editor, prototype, true);\r\n}"},
 {"id":1275, "parametername":"CompositeFigure prototype", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3224, "methodname":"org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"public GroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    this(editor, prototype, true);\r\n}"},
 {"id":1276, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3225, "methodname":"org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure,boolean)", "isreturn":0, "sourcecode":"public GroupAction(DrawingEditor editor, CompositeFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isGroupingAction = isGroupingAction;\r\n    labels.configureAction(this, GroupAction.ID);\r\n    updateEnabledState();\r\n}"},
 {"id":1277, "parametername":"CompositeFigure prototype", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3225, "methodname":"org.jhotdraw.draw.action.GroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure,boolean)", "isreturn":0, "sourcecode":"public GroupAction(DrawingEditor editor, CompositeFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isGroupingAction = isGroupingAction;\r\n    labels.configureAction(this, GroupAction.ID);\r\n    updateEnabledState();\r\n}"},
 {"id":1278, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3231, "methodname":"org.jhotdraw.draw.action.GroupAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"public Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    // XXX - This code is redundant with UngroupAction\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().basicAddAll(view.getDrawing().indexOf(group), figures);\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(figures);\r\n    return figures;\r\n}"},
 {"id":1279, "parametername":"CompositeFigure group", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3231, "methodname":"org.jhotdraw.draw.action.GroupAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"public Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    // XXX - This code is redundant with UngroupAction\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().basicAddAll(view.getDrawing().indexOf(group), figures);\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(figures);\r\n    return figures;\r\n}"},
 {"id":1280, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3230, "methodname":"org.jhotdraw.draw.action.GroupAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)", "isreturn":0, "sourcecode":"public void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    int index = view.getDrawing().indexOf(sorted.iterator().next());\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(index, group);\r\n    group.willChange();\r\n    for (Figure f : sorted) {\r\n        group.basicAdd(f);\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}"},
 {"id":1281, "parametername":"CompositeFigure group", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":314, "classname":"org.jhotdraw.draw.action.GroupAction", "methodid":3230, "methodname":"org.jhotdraw.draw.action.GroupAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)", "isreturn":0, "sourcecode":"public void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    int index = view.getDrawing().indexOf(sorted.iterator().next());\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(index, group);\r\n    group.willChange();\r\n    for (Figure f : sorted) {\r\n        group.basicAdd(f);\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}"},
 {"id":1282, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":316, "classname":"org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction", "methodid":3239, "methodname":"org.jhotdraw.draw.action.IncreaseHandleDetailLevelAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic IncreaseHandleDetailLevelAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, IncreaseHandleDetailLevelAction.ID);\r\n    // putValue(AbstractAction.NAME, labels.getString(\"editSelectSame\"));\r\n    // putValue(AbstractAction.MNEMONIC_KEY, labels.getString(\"editSelectSameMnem\"));\r\n}"},
 {"id":1283, "parametername":"LineDecoration decoration", "parametertype":"org.jhotdraw.draw.LineDecoration", "parameterclass":210, "classid":317, "classname":"org.jhotdraw.draw.action.LineDecorationIcon", "methodid":3242, "methodname":"org.jhotdraw.draw.action.LineDecorationIcon.-init-(org.jhotdraw.draw.LineDecoration,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic LineDecorationIcon(LineDecoration decoration, boolean isStartDecoration) {\r\n    lineFigure = new LineFigure();\r\n    lineFigure.setBounds(new Point2D.Double(2, 8), new Point2D.Double(23, 8));\r\n    if (isStartDecoration) {\r\n        AttributeKeys.START_DECORATION.basicSet(lineFigure, decoration);\r\n    } else {\r\n        AttributeKeys.END_DECORATION.basicSet(lineFigure, decoration);\r\n    }\r\n    AttributeKeys.STROKE_COLOR.basicSet(lineFigure, Color.black);\r\n}"},
 {"id":1284, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":322, "classname":"org.jhotdraw.draw.action.MoveAction", "methodid":3246, "methodname":"org.jhotdraw.draw.action.MoveAction.-init-(org.jhotdraw.draw.DrawingEditor,int,int)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic MoveAction(DrawingEditor editor, int dx, int dy) {\r\n    super(editor);\r\n    this.dx = dx;\r\n    this.dy = dy;\r\n}"},
 {"id":1285, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":318, "classname":"org.jhotdraw.draw.action.MoveAction$East", "methodid":3249, "methodname":"org.jhotdraw.draw.action.MoveAction$East.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public East(DrawingEditor editor) {\r\n    super(editor, 1, 0);\r\n    labels.configureAction(this, MoveAction.East.ID);\r\n}"},
 {"id":1286, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":321, "classname":"org.jhotdraw.draw.action.MoveAction$West", "methodid":3252, "methodname":"org.jhotdraw.draw.action.MoveAction$West.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public West(DrawingEditor editor) {\r\n    super(editor, (-1), 0);\r\n    labels.configureAction(this, MoveAction.West.ID);\r\n}"},
 {"id":1287, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":319, "classname":"org.jhotdraw.draw.action.MoveAction$North", "methodid":3250, "methodname":"org.jhotdraw.draw.action.MoveAction$North.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public North(DrawingEditor editor) {\r\n    super(editor, 0, (-1));\r\n    labels.configureAction(this, MoveAction.North.ID);\r\n}"},
 {"id":1288, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":320, "classname":"org.jhotdraw.draw.action.MoveAction$South", "methodid":3251, "methodname":"org.jhotdraw.draw.action.MoveAction$South.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public South(DrawingEditor editor) {\r\n    super(editor, 0, 1);\r\n    labels.configureAction(this, MoveAction.South.ID);\r\n}"},
 {"id":1289, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":327, "classname":"org.jhotdraw.draw.action.MoveConstrainedAction", "methodid":3253, "methodname":"org.jhotdraw.draw.action.MoveConstrainedAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.TranslationDirection)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic MoveConstrainedAction(DrawingEditor editor, TranslationDirection dir) {\r\n    super(editor);\r\n    this.dir = dir;\r\n}"},
 {"id":1290, "parametername":"TranslationDirection dir", "parametertype":"org.jhotdraw.draw.TranslationDirection", "parameterclass":276, "classid":327, "classname":"org.jhotdraw.draw.action.MoveConstrainedAction", "methodid":3253, "methodname":"org.jhotdraw.draw.action.MoveConstrainedAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.TranslationDirection)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic MoveConstrainedAction(DrawingEditor editor, TranslationDirection dir) {\r\n    super(editor);\r\n    this.dir = dir;\r\n}"},
 {"id":1291, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":323, "classname":"org.jhotdraw.draw.action.MoveConstrainedAction$East", "methodid":3256, "methodname":"org.jhotdraw.draw.action.MoveConstrainedAction$East.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public East(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.EAST);\r\n    labels.configureAction(this, MoveConstrainedAction.East.ID);\r\n}"},
 {"id":1292, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":326, "classname":"org.jhotdraw.draw.action.MoveConstrainedAction$West", "methodid":3259, "methodname":"org.jhotdraw.draw.action.MoveConstrainedAction$West.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public West(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.WEST);\r\n    labels.configureAction(this, MoveConstrainedAction.West.ID);\r\n}"},
 {"id":1293, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":324, "classname":"org.jhotdraw.draw.action.MoveConstrainedAction$North", "methodid":3257, "methodname":"org.jhotdraw.draw.action.MoveConstrainedAction$North.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public North(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.NORTH);\r\n    labels.configureAction(this, MoveConstrainedAction.North.ID);\r\n}"},
 {"id":1294, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":325, "classname":"org.jhotdraw.draw.action.MoveConstrainedAction$South", "methodid":3258, "methodname":"org.jhotdraw.draw.action.MoveConstrainedAction$South.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public South(DrawingEditor editor) {\r\n    super(editor, TranslationDirection.SOUTH);\r\n    labels.configureAction(this, MoveConstrainedAction.South.ID);\r\n}"},
 {"id":1295, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":329, "classname":"org.jhotdraw.draw.action.PickAttributesAction", "methodid":3264, "methodname":"org.jhotdraw.draw.action.PickAttributesAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PickAttributesAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, \"edit.pickAttributes\");\r\n    setEnabled(true);\r\n}"},
 {"id":1296, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":329, "classname":"org.jhotdraw.draw.action.PickAttributesAction", "methodid":3267, "methodname":"org.jhotdraw.draw.action.PickAttributesAction.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt) {\r\n    setEnabled(((getView().getSelectionCount()) == 1));\r\n}"},
 {"id":1297, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":330, "classname":"org.jhotdraw.draw.action.SelectSameAction", "methodid":3269, "methodname":"org.jhotdraw.draw.action.SelectSameAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SelectSameAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, SelectSameAction.ID);\r\n    // putValue(AbstractAction.NAME, labels.getString(\"editSelectSame\"));\r\n    // putValue(AbstractAction.MNEMONIC_KEY, labels.getString(\"editSelectSameMnem\"));\r\n}"},
 {"id":1298, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3272, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}"},
 {"id":1299, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3272, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key) {\r\n    this(editor, key, null, null);\r\n}"},
 {"id":1300, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3273, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}"},
 {"id":1301, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3273, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,javax.swing.Icon)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, Icon icon) {\r\n    this(editor, key, null, icon);\r\n}"},
 {"id":1302, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3274, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}"},
 {"id":1303, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3274, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SelectionColorChooserAction(DrawingEditor editor, AttributeKey<Color> key, String name) {\r\n    this(editor, key, name, null);\r\n}"},
 {"id":1304, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3275, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}"},
 {"id":1305, "parametername":"final AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3275, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon)", "isreturn":0, "sourcecode":"public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon) {\r\n    this(editor, key, name, icon, new HashMap<AttributeKey, Object>());\r\n}"},
 {"id":1306, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3276, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)", "isreturn":0, "sourcecode":"public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}"},
 {"id":1307, "parametername":"final AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":331, "classname":"org.jhotdraw.draw.action.SelectionColorChooserAction", "methodid":3276, "methodname":"org.jhotdraw.draw.action.SelectionColorChooserAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.lang.String,javax.swing.Icon,java.util.Map)", "isreturn":0, "sourcecode":"public SelectionColorChooserAction(DrawingEditor editor, final AttributeKey<Color> key, String name, Icon icon, Map<AttributeKey, Object> fixedAttributes) {\r\n    super(editor, key, name, icon, fixedAttributes);\r\n}"},
 {"id":1308, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":332, "classname":"org.jhotdraw.draw.action.SelectionColorIcon", "methodid":3278, "methodname":"org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param key\r\n * \t\tThe key of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param colorShape\r\n * \t\tThe shape to be drawn with the color of the default\r\n * \t\tattribute.\r\n */\r\npublic SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1309, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":332, "classname":"org.jhotdraw.draw.action.SelectionColorIcon", "methodid":3278, "methodname":"org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param key\r\n * \t\tThe key of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param colorShape\r\n * \t\tThe shape to be drawn with the color of the default\r\n * \t\tattribute.\r\n */\r\npublic SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, URL imageLocation, Shape colorShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1310, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":332, "classname":"org.jhotdraw.draw.action.SelectionColorIcon", "methodid":3279, "methodname":"org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)", "isreturn":0, "sourcecode":"public SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1311, "parametername":"AttributeKey<Color> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":332, "classname":"org.jhotdraw.draw.action.SelectionColorIcon", "methodid":3279, "methodname":"org.jhotdraw.draw.action.SelectionColorIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape)", "isreturn":0, "sourcecode":"public SelectionColorIcon(DrawingEditor editor, AttributeKey<Color> key, Image image, Shape colorShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.key = key;\r\n    this.colorShape = colorShape;\r\n}"},
 {"id":1312, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":333, "classname":"org.jhotdraw.draw.action.SelectionComponentRepainter", "methodid":3281, "methodname":"org.jhotdraw.draw.action.SelectionComponentRepainter.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)", "isreturn":0, "sourcecode":"public SelectionComponentRepainter(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if (editor != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.addPropertyChangeListener(this);\r\n            view.addFigureSelectionListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().addFigureListener(this);\r\n            }\r\n        }\r\n        editor.addPropertyChangeListener(this);\r\n    }\r\n}"},
 {"id":1313, "parametername":"FigureEvent evt", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":333, "classname":"org.jhotdraw.draw.action.SelectionComponentRepainter", "methodid":3282, "methodname":"org.jhotdraw.draw.action.SelectionComponentRepainter.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    component.repaint();\r\n}"},
 {"id":1314, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":333, "classname":"org.jhotdraw.draw.action.SelectionComponentRepainter", "methodid":3285, "methodname":"org.jhotdraw.draw.action.SelectionComponentRepainter.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt) {\r\n    component.repaint();\r\n}"},
 {"id":1315, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":334, "classname":"org.jhotdraw.draw.action.SendToBackAction", "methodid":3286, "methodname":"org.jhotdraw.draw.action.SendToBackAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SendToBackAction(DrawingEditor editor) {\r\n    super(editor);\r\n    labels.configureAction(this, SendToBackAction.ID);\r\n}"},
 {"id":1316, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":334, "classname":"org.jhotdraw.draw.action.SendToBackAction", "methodid":3289, "methodname":"org.jhotdraw.draw.action.SendToBackAction.sendToBack(org.jhotdraw.draw.DrawingView,java.util.Collection)", "isreturn":0, "sourcecode":"public static void sendToBack(DrawingView view, Collection figures) {\r\n    Iterator i = figures.iterator();\r\n    Drawing drawing = view.getDrawing();\r\n    while (i.hasNext()) {\r\n        Figure figure = ((Figure) (i.next()));\r\n        drawing.sendToBack(figure);\r\n    } \r\n}"},
 {"id":1317, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":336, "classname":"org.jhotdraw.draw.action.ToggleGridAction", "methodid":3294, "methodname":"org.jhotdraw.draw.action.ToggleGridAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleGridAction(DrawingEditor editor) {\r\n    super(editor);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    labels.configureAction(this, ToggleGridAction.ID);\r\n    updateViewState();\r\n}"},
 {"id":1318, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":337, "classname":"org.jhotdraw.draw.action.UngroupAction", "methodid":3297, "methodname":"org.jhotdraw.draw.action.UngroupAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic UngroupAction(DrawingEditor editor) {\r\n    super(editor, new GroupFigure(), false);\r\n    labels.configureAction(this, UngroupAction.ID);\r\n}"},
 {"id":1319, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":337, "classname":"org.jhotdraw.draw.action.UngroupAction", "methodid":3298, "methodname":"org.jhotdraw.draw.action.UngroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"public UngroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, UngroupAction.ID);\r\n}"},
 {"id":1320, "parametername":"CompositeFigure prototype", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":337, "classname":"org.jhotdraw.draw.action.UngroupAction", "methodid":3298, "methodname":"org.jhotdraw.draw.action.UngroupAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"public UngroupAction(DrawingEditor editor, CompositeFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, UngroupAction.ID);\r\n}"},
 {"id":1321, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":339, "classname":"org.jhotdraw.draw.action.ZoomAction", "methodid":3320, "methodname":"org.jhotdraw.draw.action.ZoomAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomAction(DrawingEditor editor, double scaleFactor, AbstractButton button) {\r\n    this(((DrawingView) (null)), scaleFactor, button);\r\n    setEditor(editor);\r\n}"},
 {"id":1322, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":339, "classname":"org.jhotdraw.draw.action.ZoomAction", "methodid":3321, "methodname":"org.jhotdraw.draw.action.ZoomAction.-init-(org.jhotdraw.draw.DrawingView,double,javax.swing.AbstractButton)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomAction(DrawingView view, double scaleFactor, AbstractButton button) {\r\n    super(view);\r\n    this.scaleFactor = scaleFactor;\r\n    this.button = button;\r\n    label = ((int) (scaleFactor * 100)) + \" %\";\r\n    putValue(Action.DEFAULT, label);\r\n    putValue(Action.NAME, label);\r\n}"},
 {"id":1323, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":340, "classname":"org.jhotdraw.draw.action.ZoomEditorAction", "methodid":3324, "methodname":"org.jhotdraw.draw.action.ZoomEditorAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomEditorAction(DrawingEditor editor, double scaleFactor, AbstractButton button) {\r\n    this(editor, scaleFactor, button, true);\r\n}"},
 {"id":1324, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":340, "classname":"org.jhotdraw.draw.action.ZoomEditorAction", "methodid":3325, "methodname":"org.jhotdraw.draw.action.ZoomEditorAction.-init-(org.jhotdraw.draw.DrawingEditor,double,javax.swing.AbstractButton,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ZoomEditorAction(DrawingEditor editor, double scaleFactor, AbstractButton button, boolean updateAllViews) {\r\n    super(editor);\r\n    this.scaleFactor = scaleFactor;\r\n    this.button = button;\r\n    this.updateAllViews = updateAllViews;\r\n    label = ((int) (scaleFactor * 100)) + \" %\";\r\n    putValue(Action.DEFAULT, label);\r\n    putValue(Action.NAME, label);\r\n}"},
 {"id":1325, "parametername":"BezierPath digitizedPoints", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":341, "classname":"org.jhotdraw.geom.Bezier", "methodid":3342, "methodname":"org.jhotdraw.geom.Bezier.fitBezierPath(org.jhotdraw.geom.BezierPath,double)", "isreturn":0, "sourcecode":"/**\r\n * Fits a bezier path to the specified list of digitized points.\r\n * <p>\r\n * This is a convenience method for calling fitCubicSegments(List<Point2D.Double>, double);\r\n *\r\n * @param digitizedPoints\r\n * \t\tdigited points.\r\n * @param error\r\n * \t\tthe maximal allowed error between the bezier path and the\r\n * \t\tdigitized points.\r\n */\r\npublic static BezierPath fitBezierPath(BezierPath digitizedPoints, double error) {\r\n    ArrayList<Point2D.Double> d = new ArrayList<Point2D.Double>(digitizedPoints.size());\r\n    for (BezierPath.Node n : digitizedPoints) {\r\n        d.add(new Point2D.Double(n.x[0], n.y[0]));\r\n    }\r\n    return Bezier.fitBezierPath(d, error);\r\n}"},
 {"id":1326, "parametername":"org.jhotdraw.geom.BezierPath", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":341, "classname":"org.jhotdraw.geom.Bezier", "methodid":3342, "methodname":"org.jhotdraw.geom.Bezier.fitBezierPath(org.jhotdraw.geom.BezierPath,double)", "isreturn":1, "sourcecode":"/**\r\n * Fits a bezier path to the specified list of digitized points.\r\n * <p>\r\n * This is a convenience method for calling fitCubicSegments(List<Point2D.Double>, double);\r\n *\r\n * @param digitizedPoints\r\n * \t\tdigited points.\r\n * @param error\r\n * \t\tthe maximal allowed error between the bezier path and the\r\n * \t\tdigitized points.\r\n */\r\npublic static BezierPath fitBezierPath(BezierPath digitizedPoints, double error) {\r\n    ArrayList<Point2D.Double> d = new ArrayList<Point2D.Double>(digitizedPoints.size());\r\n    for (BezierPath.Node n : digitizedPoints) {\r\n        d.add(new Point2D.Double(n.x[0], n.y[0]));\r\n    }\r\n    return Bezier.fitBezierPath(d, error);\r\n}"},
 {"id":1327, "parametername":"BezierPath bezierPath", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":341, "classname":"org.jhotdraw.geom.Bezier", "methodid":3343, "methodname":"org.jhotdraw.geom.Bezier.fitCubic(java.util.ArrayList,int,int,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,org.jhotdraw.geom.BezierPath)", "isreturn":0, "sourcecode":"/**\r\n * Fit one or multiple subsequent cubic bezier curves to a (sub)set of\r\n * digitized points. The digitized points represent a smooth curve without\r\n * corners.\r\n *\r\n * @param d\r\n * \t\tArray of digitized points. Must not contain subsequent\r\n * \t\tcoincident points.\r\n * @param first\r\n * \t\tIndice of first point in d.\r\n * @param last\r\n * \t\tIndice of last point in d.\r\n * @param tHat1\r\n * \t\tUnit tangent vectors at start point.\r\n * @param tHat2\r\n * \t\tUnit tanget vector at end point.\r\n * @param errorSquared\r\n * \t\tUser-defined errorSquared squared.\r\n * @param bezierPath\r\n * \t\tPath to which the bezier curve segments are added.\r\n */\r\nprivate static void fitCubic(ArrayList<Point2D.Double> d, int first, int last, Point2D.Double tHat1, Point2D.Double tHat2, double errorSquared, BezierPath bezierPath) {\r\n    Point2D.Double[] bezCurve;/* Control points of fitted Bezier curve */\r\n\r\n    double[] u;/* Parameter values for point */\r\n\r\n    double maxError;/* Maximum fitting errorSquared */\r\n\r\n    int[] splitPoint = new int[1];/* Point to split point set at.\n    This is an array of size one, because we need it as an input/output parameter.\n     */\r\n\r\n    int nPts;/* Number of points in subset */\r\n\r\n    double iterationError;/* Error below which you try iterating */\r\n\r\n    int maxIterations = 4;/* Max times to try iterating */\r\n\r\n    Point2D.Double tHatCenter = new Point2D.Double();/* Unit tangent vector at splitPoint */\r\n\r\n    int i;\r\n    // clone unit tangent vectors, so that we can alter their coordinates\r\n    // without affecting the input values.\r\n    tHat1 = ((Point2D.Double) (tHat1.clone()));\r\n    tHat2 = ((Point2D.Double) (tHat2.clone()));\r\n    iterationError = errorSquared * errorSquared;\r\n    nPts = (last - first) + 1;\r\n    /* Use heuristic if region only has two points in it */\r\n    if (nPts == 2) {\r\n        double dist = (Bezier.v2DistanceBetween2Points(d.get(last), d.get(first))) / 3.0;\r\n        bezCurve = new Point2D.Double[4];\r\n        for (i = 0; i < (bezCurve.length); i++) {\r\n            bezCurve[i] = new Point2D.Double();\r\n        }\r\n        bezCurve[0] = d.get(first);\r\n        bezCurve[3] = d.get(last);\r\n        Bezier.v2Add(bezCurve[0], Bezier.v2Scale(tHat1, dist), bezCurve[1]);\r\n        Bezier.v2Add(bezCurve[3], Bezier.v2Scale(tHat2, dist), bezCurve[2]);\r\n        bezierPath.curveTo(bezCurve[1].x, bezCurve[1].y, bezCurve[2].x, bezCurve[2].y, bezCurve[3].x, bezCurve[3].y);\r\n        return;\r\n    }\r\n    /* Parameterize points, and attempt to fit curve */\r\n    u = Bezier.chordLengthParameterize(d, first, last);\r\n    bezCurve = Bezier.generateBezier(d, first, last, u, tHat1, tHat2);\r\n    /* Find max deviation of points to fitted curve */\r\n    maxError = Bezier.computeMaxError(d, first, last, bezCurve, u, splitPoint);\r\n    if (maxError < errorSquared) {\r\n        Bezier.addCurveTo(bezCurve, bezierPath, errorSquared, ((first == 0) && (last == ((d.size()) - 1))));\r\n        return;\r\n    }\r\n    /* If errorSquared not too large, try some reparameterization */\r\n    /* and iteration */\r\n    if (maxError < iterationError) {\r\n        double[] uPrime;/* Improved parameter values */\r\n\r\n        for (i = 0; i < maxIterations; i++) {\r\n            uPrime = Bezier.reparameterize(d, first, last, u, bezCurve);\r\n            bezCurve = Bezier.generateBezier(d, first, last, uPrime, tHat1, tHat2);\r\n            maxError = Bezier.computeMaxError(d, first, last, bezCurve, uPrime, splitPoint);\r\n            if (maxError < errorSquared) {\r\n                Bezier.addCurveTo(bezCurve, bezierPath, errorSquared, ((first == 0) && (last == ((d.size()) - 1))));\r\n                return;\r\n            }\r\n            u = uPrime;\r\n        }\r\n    }\r\n    /* Fitting failed -- split at max errorSquared point and fit recursively */\r\n    tHatCenter = Bezier.computeCenterTangent(d, splitPoint[0]);\r\n    if (first < (splitPoint[0])) {\r\n        Bezier.fitCubic(d, first, splitPoint[0], tHat1, tHatCenter, errorSquared, bezierPath);\r\n    } else {\r\n        bezierPath.lineTo(d.get(splitPoint[0]).x, d.get(splitPoint[0]).y);\r\n        // System.err.println(\"Cant split any further \" + first + \"..\" + splitPoint[0]);\r\n    }\r\n    Bezier.v2Negate(tHatCenter);\r\n    if ((splitPoint[0]) < last) {\r\n        Bezier.fitCubic(d, splitPoint[0], last, tHatCenter, tHat2, errorSquared, bezierPath);\r\n    } else {\r\n        bezierPath.lineTo(d.get(last).x, d.get(last).y);\r\n        // System.err.println(\"Cant split any further \" + splitPoint[0] + \"..\" + last);\r\n    }\r\n}"},
 {"id":1328, "parametername":"BezierPath bezierPath", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":341, "classname":"org.jhotdraw.geom.Bezier", "methodid":3328, "methodname":"org.jhotdraw.geom.Bezier.addCurveTo(java.awt.geom.Point2D$Double[],org.jhotdraw.geom.BezierPath,double,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Adds the curve to the bezier path.\r\n *\r\n * @param bezCurve\r\n * \t\t\r\n * @param bezierPath\r\n * \t\t\r\n */\r\nprivate static void addCurveTo(Point2D.Double[] bezCurve, BezierPath bezierPath, double errorSquared, boolean connectsCorners) {\r\n    BezierPath.Node lastNode = bezierPath.get(((bezierPath.size()) - 1));\r\n    double error = Math.sqrt(errorSquared);\r\n    if ((connectsCorners && (Geom.lineContainsPoint(lastNode.x[0], lastNode.y[0], bezCurve[3].x, bezCurve[3].y, bezCurve[1].x, bezCurve[1].y, error))) && (Geom.lineContainsPoint(lastNode.x[0], lastNode.y[0], bezCurve[3].x, bezCurve[3].y, bezCurve[2].x, bezCurve[2].y, error))) {\r\n        bezierPath.lineTo(bezCurve[3].x, bezCurve[3].y);\r\n    } else {\r\n        bezierPath.curveTo(bezCurve[1].x, bezCurve[1].y, bezCurve[2].x, bezCurve[2].y, bezCurve[3].x, bezCurve[3].y);\r\n    }\r\n}"},
 {"id":1329, "parametername":"BezierPath.Node that", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":342, "classname":"org.jhotdraw.geom.BezierPath$Node", "methodid":3413, "methodname":"org.jhotdraw.geom.BezierPath$Node.-init-(org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"public Node(BezierPath.Node that) {\r\n    setTo(that);\r\n}"},
 {"id":1330, "parametername":"BezierPath.Node that", "parametertype":"org.jhotdraw.geom.BezierPath$Node", "parameterclass":342, "classid":342, "classname":"org.jhotdraw.geom.BezierPath$Node", "methodid":3428, "methodname":"org.jhotdraw.geom.BezierPath$Node.setTo(org.jhotdraw.geom.BezierPath$Node)", "isreturn":0, "sourcecode":"public void setTo(BezierPath.Node that) {\r\n    this.mask = that.mask;\r\n    this.keepColinear = that.keepColinear;\r\n    System.arraycopy(that.x, 0, this.x, 0, 3);\r\n    System.arraycopy(that.y, 0, this.y, 0, 3);\r\n}"},
 {"id":1331, "parametername":"BezierPath that", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":343, "classname":"org.jhotdraw.geom.BezierPath", "methodid":3405, "methodname":"org.jhotdraw.geom.BezierPath.setTo(org.jhotdraw.geom.BezierPath)", "isreturn":0, "sourcecode":"public void setTo(BezierPath that) {\r\n    while ((that.size()) < (size())) {\r\n        remove(((size()) - 1));\r\n    } \r\n    for (int i = 0, n = size(); i < n; i++) {\r\n        get(i).setTo(that.get(i));\r\n    }\r\n    while ((size()) < (that.size())) {\r\n        add(((BezierPath.Node) (that.get(size()).clone())));\r\n    } \r\n}"},
 {"id":1332, "parametername":"BezierPath path", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":344, "classname":"org.jhotdraw.geom.BezierPathIterator", "methodid":3430, "methodname":"org.jhotdraw.geom.BezierPathIterator.-init-(org.jhotdraw.geom.BezierPath)", "isreturn":0, "sourcecode":"/**\r\n * Constructs an iterator given a BezierPath.\r\n *\r\n * @see BezierPath#getPathIterator\r\n */\r\npublic BezierPathIterator(BezierPath path) {\r\n    this(path, null);\r\n}"},
 {"id":1333, "parametername":"BezierPath path", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":344, "classname":"org.jhotdraw.geom.BezierPathIterator", "methodid":3431, "methodname":"org.jhotdraw.geom.BezierPathIterator.-init-(org.jhotdraw.geom.BezierPath,java.awt.geom.AffineTransform)", "isreturn":0, "sourcecode":"/**\r\n * Constructs an iterator given a BezierPath and an optional\r\n * AffineTransform.\r\n *\r\n * @see BezierPath#getPathIterator\r\n */\r\npublic BezierPathIterator(BezierPath path, AffineTransform at) {\r\n    this.path = path;\r\n    this.affine = at;\r\n}"},
 {"id":1334, "parametername":"Dimension2DDouble d", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":346, "classname":"org.jhotdraw.geom.Dimension2DDouble", "methodid":3448, "methodname":"org.jhotdraw.geom.Dimension2DDouble.-init-(org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"/**\r\n * Creates an instance of <code>Dimension2DDouble</code> whose width\r\n * and height are the same as for the specified dimension.\r\n *\r\n * @param d\r\n * \t\tthe specified dimension for the\r\n * \t\t<code>width</code> and\r\n * \t\t<code>height</code> values\r\n */\r\npublic Dimension2DDouble(Dimension2DDouble d) {\r\n    this(d.width, d.height);\r\n}"},
 {"id":1335, "parametername":"Dimension2DDouble d", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":346, "classname":"org.jhotdraw.geom.Dimension2DDouble", "methodid":3456, "methodname":"org.jhotdraw.geom.Dimension2DDouble.setSize(org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"/**\r\n * Sets the size of this <code>Dimension2DDouble</code> object to the specified size.\r\n * This method is included for completeness, to parallel the\r\n * <code>setSize</code> method defined by <code>Component</code>.\r\n *\r\n * @param d\r\n * \t\tthe new size for this <code>Dimension2DDouble</code> object\r\n * @see Dimension2DDouble#getSize\r\n * @see java.awt.Component#setSize\r\n * @since JDK1.1\r\n */\r\npublic void setSize(Dimension2DDouble d) {\r\n    setSize(d.width, d.height);\r\n}"},
 {"id":1336, "parametername":"BezierPath bp", "parametertype":"org.jhotdraw.geom.BezierPath", "parameterclass":343, "classid":347, "classname":"org.jhotdraw.geom.DoubleStroke", "methodid":3463, "methodname":"org.jhotdraw.geom.DoubleStroke.traceStroke(org.jhotdraw.geom.BezierPath,java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)", "isreturn":0, "sourcecode":"protected void traceStroke(BezierPath bp, GeneralPath left, GeneralPath right) {\r\n    // XXX - We only support straight line segments here\r\n    // Corners of the current and the previous thick line\r\n    double[] currentCorners = new double[8];\r\n    double[] prevCorners = new double[8];\r\n    Point2D.Double intersect;\r\n    // Remove duplicate nodes from bezier path.\r\n    if (bp.isClosed()) {\r\n        BezierPath.Node prev = bp.get(((bp.size()) - 1));\r\n        for (int i = 0; i < (bp.size()); i++) {\r\n            BezierPath.Node node = bp.get(i);\r\n            if (((prev.x[0]) == (node.x[0])) && ((prev.y[0]) == (node.y[0]))) {\r\n                bp.remove((i--));\r\n            } else {\r\n                prev = node;\r\n            }\r\n        }\r\n    } else {\r\n        BezierPath.Node prev = bp.get(0);\r\n        for (int i = 1; i < (bp.size()); i++) {\r\n            BezierPath.Node node = bp.get(i);\r\n            if (((prev.x[0]) == (node.x[0])) && ((prev.y[0]) == (node.y[0]))) {\r\n                bp.remove((i--));\r\n            } else {\r\n                prev = node;\r\n            }\r\n        }\r\n    }\r\n    // Handle the first point of the bezier path\r\n    if ((bp.isClosed()) && ((bp.size()) > 1)) {\r\n        prevCorners = computeThickLine(bp.get(((bp.size()) - 1)).x[0], bp.get(((bp.size()) - 1)).y[0], bp.get(0).x[0], bp.get(0).y[0], innerWidth, prevCorners);\r\n        currentCorners = computeThickLine(bp.get(0).x[0], bp.get(0).y[0], bp.get(1).x[0], bp.get(1).y[0], innerWidth, currentCorners);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.moveTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.moveTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.moveTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.moveTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    } else {\r\n        if ((bp.size()) > 1) {\r\n            currentCorners = computeThickLine(bp.get(0).x[0], bp.get(0).y[0], bp.get(1).x[0], bp.get(1).y[0], innerWidth, currentCorners);\r\n            right.moveTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n            left.moveTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    }\r\n    // Handle points in the middle of the bezier path\r\n    for (int i = 1, n = (bp.size()) - 1; i < n; i++) {\r\n        double[] tmp = prevCorners;\r\n        prevCorners = currentCorners;\r\n        currentCorners = computeThickLine(bp.get(i).x[0], bp.get(i).y[0], bp.get((i + 1)).x[0], bp.get((i + 1)).y[0], innerWidth, tmp);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.lineTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.lineTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n    }\r\n    // Handle the last point of the bezier path\r\n    if ((bp.isClosed()) && ((bp.size()) > 0)) {\r\n        double[] tmp = prevCorners;\r\n        prevCorners = currentCorners;\r\n        currentCorners = // bp.get(1).x[0], bp.get(1).y[0],\r\n        computeThickLine(bp.get(((bp.size()) - 1)).x[0], bp.get(((bp.size()) - 1)).y[0], bp.get(0).x[0], bp.get(0).y[0], innerWidth, tmp);\r\n        intersect = Geom.intersect(prevCorners[0], prevCorners[1], prevCorners[4], prevCorners[5], currentCorners[0], currentCorners[1], currentCorners[4], currentCorners[5], miterLimit);\r\n        if (intersect != null) {\r\n            right.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            right.lineTo(((float) (prevCorners[4])), ((float) (prevCorners[5])));\r\n            right.lineTo(((float) (currentCorners[0])), ((float) (currentCorners[1])));\r\n        }\r\n        intersect = Geom.intersect(prevCorners[2], prevCorners[3], prevCorners[6], prevCorners[7], currentCorners[2], currentCorners[3], currentCorners[6], currentCorners[7], miterLimit);\r\n        if (intersect != null) {\r\n            left.lineTo(((float) (intersect.x)), ((float) (intersect.y)));\r\n        } else {\r\n            left.lineTo(((float) (prevCorners[6])), ((float) (prevCorners[7])));\r\n            left.lineTo(((float) (currentCorners[2])), ((float) (currentCorners[3])));\r\n        }\r\n        right.closePath();\r\n        left.closePath();\r\n    } else {\r\n        if ((bp.size()) > 1) {\r\n            right.lineTo(((float) (currentCorners[4])), ((float) (currentCorners[5])));\r\n            left.lineTo(((float) (currentCorners[6])), ((float) (currentCorners[7])));\r\n        }\r\n    }\r\n}"},
 {"id":1337, "parametername":"Insets2D i", "parametertype":"org.jhotdraw.geom.Insets2D", "parameterclass":352, "classid":352, "classname":"org.jhotdraw.geom.Insets2D", "methodid":3523, "methodname":"org.jhotdraw.geom.Insets2D.set(org.jhotdraw.geom.Insets2D)", "isreturn":0, "sourcecode":"/**\r\n * Sets the insets.\r\n *\r\n * @param i\r\n * \t\tThe new insets.\r\n */\r\npublic void set(Insets2D i) {\r\n    set(i.getTop(), i.getLeft(), i.getBottom(), i.getRight());\r\n}"},
 {"id":1338, "parametername":"Insets2D i", "parametertype":"org.jhotdraw.geom.Insets2D", "parameterclass":352, "classid":352, "classname":"org.jhotdraw.geom.Insets2D", "methodid":3513, "methodname":"org.jhotdraw.geom.Insets2D.add(org.jhotdraw.geom.Insets2D)", "isreturn":0, "sourcecode":"/**\r\n * Adds the specified insets to the current insets.\r\n *\r\n * @param i\r\n * \t\tThe insets to be added.\r\n */\r\npublic void add(Insets2D i) {\r\n    set(((getTop()) + (i.getTop())), ((getLeft()) + (i.getLeft())), ((getBottom()) + (i.getBottom())), ((getRight()) + (i.getRight())));\r\n}"},
 {"id":1339, "parametername":"Insets2D i", "parametertype":"org.jhotdraw.geom.Insets2D", "parameterclass":352, "classid":352, "classname":"org.jhotdraw.geom.Insets2D", "methodid":3525, "methodname":"org.jhotdraw.geom.Insets2D.subtract(org.jhotdraw.geom.Insets2D)", "isreturn":0, "sourcecode":"/**\r\n * Subtracts the specified insets from the current insets.\r\n *\r\n * @param i\r\n * \t\tThe insets to be subtracted.\r\n */\r\npublic void subtract(Insets2D i) {\r\n    set(((getTop()) - (i.getTop())), ((getLeft()) - (i.getLeft())), ((getBottom()) - (i.getBottom())), ((getRight()) - (i.getRight())));\r\n}"},
 {"id":1340, "parametername":"Polygon2D.Double pg", "parametertype":"org.jhotdraw.geom.Polygon2D$Double", "parameterclass":353, "classid":355, "classname":"org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble", "methodid":3598, "methodname":"org.jhotdraw.geom.Polygon2D$PolygonPathIteratorDouble.-init-(org.jhotdraw.geom.Polygon2D$Double,java.awt.geom.AffineTransform)", "isreturn":0, "sourcecode":"public PolygonPathIteratorDouble(Polygon2D.Double pg, AffineTransform at) {\r\n    poly = pg;\r\n    transform = at;\r\n    if ((pg.npoints) == 0) {\r\n        // Prevent a spurious SEG_CLOSE segment\r\n        index = 1;\r\n    }\r\n}"},
 {"id":1341, "parametername":"Polygon2D.Float pg", "parametertype":"org.jhotdraw.geom.Polygon2D$Float", "parameterclass":354, "classid":356, "classname":"org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat", "methodid":3604, "methodname":"org.jhotdraw.geom.Polygon2D$PolygonPathIteratorFloat.-init-(org.jhotdraw.geom.Polygon2D$Float,java.awt.geom.AffineTransform)", "isreturn":0, "sourcecode":"public PolygonPathIteratorFloat(Polygon2D.Float pg, AffineTransform at) {\r\n    poly = pg;\r\n    transform = at;\r\n    if ((pg.npoints) == 0) {\r\n        // Prevent a spurious SEG_CLOSE segment\r\n        index = 1;\r\n    }\r\n}"},
 {"id":1342, "parametername":"AttributeKey<T> attributeKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":362, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit", "methodid":3654, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler$UndoableAttributeEdit.-init-(java.util.Set,org.jhotdraw.draw.AttributeKey,java.lang.Object,java.util.LinkedList)", "isreturn":0, "sourcecode":"public UndoableAttributeEdit(Set<Figure> editedFigures, AttributeKey<T> attributeKey, T editRedoValue, LinkedList<Object> editUndoData) {\r\n    this.editedFigures = editedFigures;\r\n    this.attributeKey = attributeKey;\r\n    this.editRedoValue = editRedoValue;\r\n    this.editUndoData = editUndoData;\r\n}"},
 {"id":1343, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3632, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    this(key, attributeEditor, drawingEditor, true);\r\n}"},
 {"id":1344, "parametername":"AttributeEditor<T> attributeEditor", "parametertype":"org.jhotdraw.gui.AttributeEditor", "parameterclass":366, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3632, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    this(key, attributeEditor, drawingEditor, true);\r\n}"},
 {"id":1345, "parametername":"DrawingEditor drawingEditor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3632, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    this(key, attributeEditor, drawingEditor, true);\r\n}"},
 {"id":1346, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3633, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    this(key, null, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1347, "parametername":"AttributeEditor<T> attributeEditor", "parametertype":"org.jhotdraw.gui.AttributeEditor", "parameterclass":366, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3633, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    this(key, null, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1348, "parametername":"DrawingEditor drawingEditor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3633, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public AbstractAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    this(key, null, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1349, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3634, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic AbstractAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    eventHandler = new EventHandler();\r\n    this.defaultAttributes = ((Map<AttributeKey, Object>) ((defaultAttributes == null) ? Collections.emptyMap() : defaultAttributes));\r\n    attributeEditor.setAttributeValue(key.getDefaultValue());\r\n    setAttributeKey(key);\r\n    setAttributeEditor(attributeEditor);\r\n    setDrawingEditor(drawingEditor);\r\n    isUpdateDrawingEditorDefaults = updateDrawingEditorDefaults;\r\n}"},
 {"id":1350, "parametername":"AttributeEditor<T> attributeEditor", "parametertype":"org.jhotdraw.gui.AttributeEditor", "parameterclass":366, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3634, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic AbstractAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    eventHandler = new EventHandler();\r\n    this.defaultAttributes = ((Map<AttributeKey, Object>) ((defaultAttributes == null) ? Collections.emptyMap() : defaultAttributes));\r\n    attributeEditor.setAttributeValue(key.getDefaultValue());\r\n    setAttributeKey(key);\r\n    setAttributeEditor(attributeEditor);\r\n    setDrawingEditor(drawingEditor);\r\n    isUpdateDrawingEditorDefaults = updateDrawingEditorDefaults;\r\n}"},
 {"id":1351, "parametername":"DrawingEditor drawingEditor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3634, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic AbstractAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    eventHandler = new EventHandler();\r\n    this.defaultAttributes = ((Map<AttributeKey, Object>) ((defaultAttributes == null) ? Collections.emptyMap() : defaultAttributes));\r\n    attributeEditor.setAttributeValue(key.getDefaultValue());\r\n    setAttributeKey(key);\r\n    setAttributeEditor(attributeEditor);\r\n    setDrawingEditor(drawingEditor);\r\n    isUpdateDrawingEditorDefaults = updateDrawingEditorDefaults;\r\n}"},
 {"id":1352, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":361, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler", "methodid":3653, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt) {\r\n    attributeRestoreData = null;\r\n    if ((figuresOfInterest) != null) {\r\n        for (Figure f : figuresOfInterest) {\r\n            f.removeFigureListener(this);\r\n        }\r\n    }\r\n    figuresOfInterest = getEditedFigures();\r\n    for (Figure f : figuresOfInterest) {\r\n        f.addFigureListener(this);\r\n    }\r\n    updateAttributeEditor();\r\n}"},
 {"id":1353, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":361, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler", "methodid":3651, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler$EventHandler.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    if ((e.getAttribute()) == (attributeKey)) {\r\n        updateAttributeEditor();\r\n    }\r\n}"},
 {"id":1354, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3644, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.setDrawingEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Attaches the FigureAttributeEditorHandler to the specified DrawingEditor.\r\n * <p>\r\n * The FigureAttributeEditorHandler listens to view changes and selection\r\n * changes of the drawing editor and calls setEnabled(boolean) and\r\n * updateField(Set&lt;Figure&gt;) on the field accordingly.\r\n *\r\n * @param newValue\r\n * \t\ta drawing editor.\r\n */\r\npublic void setDrawingEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = drawingEditor;\r\n    if ((drawingEditor) != null) {\r\n        drawingEditor.removePropertyChangeListener(eventHandler);\r\n    }\r\n    this.drawingEditor = newValue;\r\n    if ((drawingEditor) != null) {\r\n        drawingEditor.addPropertyChangeListener(eventHandler);\r\n    }\r\n    updateActiveView();\r\n}"},
 {"id":1355, "parametername":"DrawingView newValue", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3646, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.setView(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Attaches the FigureAttributeEditorHandler to the specified DrawingView.\r\n * <p>\r\n * If a non-null value is provided, the FigureAttributeEditorHandler listens only\r\n * to selection changes of the specified view. If a null value is provided,\r\n * the FigureAttributeEditorHandler listens to all views of the drawing editor.\r\n *\r\n * @param newValue\r\n * \t\ta drawing view.\r\n */\r\npublic void setView(DrawingView newValue) {\r\n    this.view = newValue;\r\n    updateActiveView();\r\n}"},
 {"id":1356, "parametername":"AttributeEditor<T> newValue", "parametertype":"org.jhotdraw.gui.AttributeEditor", "parameterclass":366, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3642, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.setAttributeEditor(org.jhotdraw.gui.AttributeEditor)", "isreturn":0, "sourcecode":"/**\r\n * Attaches the FigureAttributeEditorHandler to the specified AttributeEditor.\r\n */\r\npublic void setAttributeEditor(AttributeEditor<T> newValue) {\r\n    if ((attributeEditor) != null) {\r\n        attributeEditor.removePropertyChangeListener(eventHandler);\r\n    }\r\n    this.attributeEditor = newValue;\r\n    if ((attributeEditor) != null) {\r\n        attributeEditor.addPropertyChangeListener(eventHandler);\r\n    }\r\n}"},
 {"id":1357, "parametername":"AttributeKey<T> newValue", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":363, "classname":"org.jhotdraw.gui.AbstractAttributeEditorHandler", "methodid":3643, "methodname":"org.jhotdraw.gui.AbstractAttributeEditorHandler.setAttributeKey(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"public void setAttributeKey(AttributeKey<T> newValue) {\r\n    attributeKey = newValue;\r\n}"},
 {"id":1358, "parametername":"Arrangeable.Arrangement newValue", "parametertype":"org.jhotdraw.gui.Arrangeable$Arrangement", "parameterclass":364, "classid":365, "classname":"org.jhotdraw.gui.Arrangeable", "methodid":3663, "methodname":"org.jhotdraw.gui.Arrangeable.setArrangement(org.jhotdraw.gui.Arrangeable$Arrangement)", "isreturn":0, "sourcecode":"public void setArrangement(Arrangeable.Arrangement newValue);"},
 {"id":1359, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":368, "classname":"org.jhotdraw.gui.DrawingAttributeEditorHandler", "methodid":3677, "methodname":"org.jhotdraw.gui.DrawingAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public DrawingAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor, false);\r\n}"},
 {"id":1360, "parametername":"AttributeEditor<T> attributeEditor", "parametertype":"org.jhotdraw.gui.AttributeEditor", "parameterclass":366, "classid":368, "classname":"org.jhotdraw.gui.DrawingAttributeEditorHandler", "methodid":3677, "methodname":"org.jhotdraw.gui.DrawingAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public DrawingAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor, false);\r\n}"},
 {"id":1361, "parametername":"DrawingEditor drawingEditor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":368, "classname":"org.jhotdraw.gui.DrawingAttributeEditorHandler", "methodid":3677, "methodname":"org.jhotdraw.gui.DrawingAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public DrawingAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor, false);\r\n}"},
 {"id":1362, "parametername":"Drawing newValue", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":368, "classname":"org.jhotdraw.gui.DrawingAttributeEditorHandler", "methodid":3680, "methodname":"org.jhotdraw.gui.DrawingAttributeEditorHandler.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void setDrawing(Drawing newValue) {\r\n    drawing = newValue;\r\n    updateAttributeEditor();\r\n}"},
 {"id":1363, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3685, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor);\r\n}"},
 {"id":1364, "parametername":"AttributeEditor<T> attributeEditor", "parametertype":"org.jhotdraw.gui.AttributeEditor", "parameterclass":366, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3685, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor);\r\n}"},
 {"id":1365, "parametername":"DrawingEditor drawingEditor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3685, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor) {\r\n    super(key, attributeEditor, drawingEditor);\r\n}"},
 {"id":1366, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3686, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1367, "parametername":"AttributeEditor<T> attributeEditor", "parametertype":"org.jhotdraw.gui.AttributeEditor", "parameterclass":366, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3686, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1368, "parametername":"DrawingEditor drawingEditor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3686, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1369, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3687, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, defaultAttributes, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1370, "parametername":"AttributeEditor<T> attributeEditor", "parametertype":"org.jhotdraw.gui.AttributeEditor", "parameterclass":366, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3687, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, defaultAttributes, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1371, "parametername":"DrawingEditor drawingEditor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":370, "classname":"org.jhotdraw.gui.FigureAttributeEditorHandler", "methodid":3687, "methodname":"org.jhotdraw.gui.FigureAttributeEditorHandler.-init-(org.jhotdraw.draw.AttributeKey,java.util.Map,org.jhotdraw.gui.AttributeEditor,org.jhotdraw.draw.DrawingEditor,boolean)", "isreturn":0, "sourcecode":"public FigureAttributeEditorHandler(AttributeKey<T> key, Map<AttributeKey, Object> defaultAttributes, AttributeEditor<T> attributeEditor, DrawingEditor drawingEditor, boolean updateDrawingEditorDefaults) {\r\n    super(key, defaultAttributes, attributeEditor, drawingEditor, updateDrawingEditorDefaults);\r\n}"},
 {"id":1372, "parametername":"FontChooserUI ui", "parametertype":"org.jhotdraw.gui.plaf.FontChooserUI", "parameterclass":408, "classid":379, "classname":"org.jhotdraw.gui.JFontChooser", "methodid":3791, "methodname":"org.jhotdraw.gui.JFontChooser.setUI(org.jhotdraw.gui.plaf.FontChooserUI)", "isreturn":0, "sourcecode":"/**\r\n * Sets the look and feel (L&F) object that renders this component.\r\n *\r\n * @param ui\r\n * \t\tthe PanelUI L&F object\r\n * @see UIDefaults#getUI\r\n */\r\npublic void setUI(FontChooserUI ui) {\r\n    super.setUI(ui);\r\n}"},
 {"id":1373, "parametername":"FontChooserModel newValue", "parametertype":"org.jhotdraw.gui.fontchooser.FontChooserModel", "parameterclass":404, "classid":379, "classname":"org.jhotdraw.gui.JFontChooser", "methodid":3788, "methodname":"org.jhotdraw.gui.JFontChooser.setModel(org.jhotdraw.gui.fontchooser.FontChooserModel)", "isreturn":0, "sourcecode":"/**\r\n * Sets the selected Font.\r\n * This is a bound property.\r\n *\r\n * @param newValue\r\n * \t\tThe new selected font, or null if no font is to be\r\n * \t\tselected..\r\n */\r\npublic void setModel(FontChooserModel newValue) {\r\n    FontChooserModel oldValue = model;\r\n    if (oldValue != null) {\r\n        oldValue.removeTreeModelListener(modelHandler);\r\n    }\r\n    this.model = newValue;\r\n    if (newValue != null) {\r\n        newValue.addTreeModelListener(modelHandler);\r\n    }\r\n    firePropertyChange(JFontChooser.MODEL_PROPERTY, oldValue, newValue);\r\n    updateSelectionPath(selectedFont);\r\n}"},
 {"id":1374, "parametername":"SheetListener l", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3874, "methodname":"org.jhotdraw.gui.JSheet.addSheetListener(org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Adds a sheet listener.\r\n */\r\npublic void addSheetListener(SheetListener l) {\r\n    listenerList.add(SheetListener.class, l);\r\n}"},
 {"id":1375, "parametername":"SheetListener l", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3889, "methodname":"org.jhotdraw.gui.JSheet.removeSheetListener(org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Removes a sheet listener.\r\n */\r\npublic void removeSheetListener(SheetListener l) {\r\n    listenerList.remove(SheetListener.class, l);\r\n}"},
 {"id":1376, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3911, "methodname":"org.jhotdraw.gui.JSheet.showSheet(javax.swing.JOptionPane,java.awt.Component,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Displays an option pane as a sheet on its parent window.\r\n *\r\n * @param pane\r\n * \t\tThe option pane.\r\n * @param parentComponent\r\n * \t\tThe parent of the option pane.\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showSheet(JOptionPane pane, Component parentComponent, SheetListener listener) {\r\n    final JSheet sheet = JSheet.createSheet(pane, parentComponent, JSheet.styleFromMessageType(pane.getMessageType()));\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n}"},
 {"id":1377, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3897, "methodname":"org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Brings up a sheet with the options <i>Yes</i>,\r\n * <i>No</i> and <i>Cancel</i>.\r\n *\r\n * @param parentComponent\r\n * \t\tdetermines the <code>Frame</code> in which the\r\n * \t\tsheet is displayed; if <code>null</code>,\r\n * \t\tor if the <code>parentComponent</code> has no\r\n * \t\t<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, JOptionPane.YES_NO_CANCEL_OPTION, listener);\r\n}"},
 {"id":1378, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3896, "methodname":"org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Brings up a sheet where the number of choices is determined\r\n * by the <code>optionType</code> parameter.\r\n *\r\n * @param parentComponent\r\n * \t\tdetermines the <code>Frame</code> in which the\r\n * \t\tsheet is displayed; if <code>null</code>,\r\n * \t\tor if the <code>parentComponent</code> has no\r\n * \t\t<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param optionType\r\n * \t\tan int designating the options available on the dialog:\r\n * \t\t<code>YES_NO_OPTION</code>, or\r\n * \t\t<code>YES_NO_CANCEL_OPTION</code>\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, optionType, JOptionPane.QUESTION_MESSAGE, listener);\r\n}"},
 {"id":1379, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3895, "methodname":"org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,int,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Brings up a sheet where the number of choices is determined\r\n * by the <code>optionType</code> parameter, where the\r\n * <code>messageType</code>\r\n * parameter determines the icon to display.\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the Look and Feel.\r\n *\r\n * @param parentComponent\r\n * \t\tdetermines the <code>Frame</code> in\r\n * \t\twhich the dialog is displayed; if <code>null</code>,\r\n * \t\tor if the <code>parentComponent</code> has no\r\n * \t\t<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param optionType\r\n * \t\tan integer designating the options available\r\n * \t\ton the dialog: <code>YES_NO_OPTION</code>,\r\n * \t\tor <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * \t\tan integer designating the kind of message this is;\r\n * \t\tprimarily used to determine the icon from the pluggable\r\n * \t\tLook and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * \t\tor <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, int messageType, SheetListener listener) {\r\n    JSheet.showConfirmSheet(parentComponent, message, optionType, messageType, null, listener);\r\n}"},
 {"id":1380, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3894, "methodname":"org.jhotdraw.gui.JSheet.showConfirmSheet(java.awt.Component,java.lang.Object,int,int,javax.swing.Icon,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Brings up a sheet with a specified icon, where the number of\r\n * choices is determined by the <code>optionType</code> parameter.\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the look and feel.\r\n *\r\n * @param parentComponent\r\n * \t\tdetermines the <code>Frame</code> in which the\r\n * \t\tdialog is displayed; if <code>null</code>,\r\n * \t\tor if the <code>parentComponent</code> has no\r\n * \t\t<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * \t\tthe Object to display\r\n * @param optionType\r\n * \t\tan int designating the options available on the dialog:\r\n * \t\t<code>YES_NO_OPTION</code>,\r\n * \t\tor <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * \t\tan int designating the kind of message this is,\r\n * \t\tprimarily used to determine the icon from the pluggable\r\n * \t\tLook and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * \t\tor <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * \t\tthe icon to display in the dialog\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showConfirmSheet(Component parentComponent, Object message, int optionType, int messageType, Icon icon, SheetListener listener) {\r\n    JSheet.showOptionSheet(parentComponent, message, optionType, messageType, icon, null, null, listener);\r\n}"},
 {"id":1381, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3901, "methodname":"org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Shows a question-message sheet requesting input from the user\r\n * parented to <code>parentComponent</code>.\r\n *\r\n * @param parentComponent\r\n * \t\tthe parent <code>Component</code> for the\r\n * \t\tdialog\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, JOptionPane.QUESTION_MESSAGE, listener);\r\n}"},
 {"id":1382, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3900, "methodname":"org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,java.lang.Object,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Shows a question-message sheet requesting input from the user and\r\n * parented to <code>parentComponent</code>. The input value will be\r\n * initialized to <code>initialSelectionValue</code>.\r\n *\r\n * @param parentComponent\r\n * \t\tthe parent <code>Component</code> for the\r\n * \t\tdialog\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param initialSelectionValue\r\n * \t\tthe value used to initialize the input\r\n * \t\tfield\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, Object initialSelectionValue, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, JOptionPane.QUESTION_MESSAGE, null, null, initialSelectionValue, listener);\r\n}"},
 {"id":1383, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3899, "methodname":"org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Shows a sheet requesting input from the user parented to\r\n * <code>parentComponent</code> and message type <code>messageType</code>.\r\n *\r\n * @param parentComponent\r\n * \t\tthe parent <code>Component</code> for the\r\n * \t\tdialog\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param messageType\r\n * \t\tthe type of message that is to be displayed:\r\n * \t\t<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * \t\tor <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, int messageType, SheetListener listener) {\r\n    JSheet.showInputSheet(parentComponent, message, messageType, null, null, null, listener);\r\n}"},
 {"id":1384, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3898, "methodname":"org.jhotdraw.gui.JSheet.showInputSheet(java.awt.Component,java.lang.Object,int,javax.swing.Icon,java.lang.Object[],java.lang.Object,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Prompts the user for input in a sheet where the\r\n * initial selection, possible selections, and all other options can\r\n * be specified. The user will able to choose from\r\n * <code>selectionValues</code>, where <code>null</code> implies the\r\n * user can input\r\n * whatever they wish, usually by means of a <code>JTextField</code>.\r\n * <code>initialSelectionValue</code> is the initial value to prompt\r\n * the user with. It is up to the UI to decide how best to represent\r\n * the <code>selectionValues</code>, but usually a\r\n * <code>JComboBox</code>, <code>JList</code>, or\r\n * <code>JTextField</code> will be used.\r\n *\r\n * @param parentComponent\r\n * \t\tthe parent <code>Component</code> for the\r\n * \t\tdialog\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param messageType\r\n * \t\tthe type of message to be displayed:\r\n * \t\t<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * \t\tor <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * \t\tthe <code>Icon</code> image to display\r\n * @param selectionValues\r\n * \t\tan array of <code>Object</code>s that\r\n * \t\tgives the possible selections\r\n * @param initialSelectionValue\r\n * \t\tthe value used to initialize the input\r\n * \t\tfield\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showInputSheet(Component parentComponent, Object message, int messageType, Icon icon, Object[] selectionValues, Object initialSelectionValue, SheetListener listener) {\r\n    JOptionPane pane = new JOptionPane(message, messageType, JOptionPane.OK_CANCEL_OPTION, icon, null, null);\r\n    pane.setWantsInput(true);\r\n    pane.setSelectionValues(selectionValues);\r\n    pane.setInitialSelectionValue(initialSelectionValue);\r\n    pane.setComponentOrientation((parentComponent == null ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());\r\n    int style = JSheet.styleFromMessageType(messageType);\r\n    JSheet sheet = JSheet.createSheet(pane, parentComponent, style);\r\n    pane.selectInitialValue();\r\n    /* sheet.addWindowListener(new WindowAdapter() {\n    public void windowClosed(WindowEvent evt) {\n    sheet.dispose();\n    }\n    });\n     */\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n    sheet.toFront();\r\n}"},
 {"id":1385, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3906, "methodname":"org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Brings up an information-message sheet.\r\n *\r\n * @param parentComponent\r\n * \t\tdetermines the <code>Frame</code> in\r\n * \t\twhich the dialog is displayed; if <code>null</code>,\r\n * \t\tor if the <code>parentComponent</code> has no\r\n * \t\t<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param listener\r\n * \t\tThis listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, SheetListener listener) {\r\n    JSheet.showMessageSheet(parentComponent, message, JOptionPane.INFORMATION_MESSAGE, listener);\r\n}"},
 {"id":1386, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3905, "methodname":"org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,int,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Brings up a sheet that displays a message using a default\r\n * icon determined by the <code>messageType</code> parameter.\r\n *\r\n * @param parentComponent\r\n * \t\tdetermines the <code>Frame</code>\r\n * \t\tin which the dialog is displayed; if <code>null</code>,\r\n * \t\tor if the <code>parentComponent</code> has no\r\n * \t\t<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param messageType\r\n * \t\tthe type of message to be displayed:\r\n * \t\t<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * \t\tor <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param listener\r\n * \t\tThis listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, int messageType, SheetListener listener) {\r\n    JSheet.showMessageSheet(parentComponent, message, messageType, null, listener);\r\n}"},
 {"id":1387, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3904, "methodname":"org.jhotdraw.gui.JSheet.showMessageSheet(java.awt.Component,java.lang.Object,int,javax.swing.Icon,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Brings up a sheet displaying a message, specifying all parameters.\r\n *\r\n * @param parentComponent\r\n * \t\tdetermines the <code>Frame</code> in which the\r\n * \t\tsheet is displayed; if <code>null</code>,\r\n * \t\tor if the <code>parentComponent</code> has no\r\n * \t\t<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param messageType\r\n * \t\tthe type of message to be displayed:\r\n * \t\t<code>JOptionPane.ERROR_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * \t\tor <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * \t\tan icon to display in the sheet that helps the user\r\n * \t\tidentify the kind of message that is being displayed\r\n * @param listener\r\n * \t\tThis listener is notified when the sheet is dismissed.\r\n */\r\npublic static void showMessageSheet(Component parentComponent, Object message, int messageType, Icon icon, SheetListener listener) {\r\n    JSheet.showOptionSheet(parentComponent, message, JOptionPane.DEFAULT_OPTION, messageType, icon, null, null, listener);\r\n}"},
 {"id":1388, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3908, "methodname":"org.jhotdraw.gui.JSheet.showOptionSheet(java.awt.Component,java.lang.Object,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Brings up a sheet with a specified icon, where the initial\r\n * choice is determined by the <code>initialValue</code> parameter and\r\n * the number of choices is determined by the <code>optionType</code>\r\n * parameter.\r\n * <p>\r\n * If <code>optionType</code> is <code>YES_NO_OPTION</code>,\r\n * or <code>YES_NO_CANCEL_OPTION</code>\r\n * and the <code>options</code> parameter is <code>null</code>,\r\n * then the options are\r\n * supplied by the look and feel.\r\n * <p>\r\n * The <code>messageType</code> parameter is primarily used to supply\r\n * a default icon from the look and feel.\r\n *\r\n * @param parentComponent\r\n * \t\tdetermines the <code>Frame</code>\r\n * \t\tin which the dialog is displayed;  if\r\n * \t\t<code>null</code>, or if the\r\n * \t\t<code>parentComponent</code> has no\r\n * \t\t<code>Frame</code>, the sheet is displayed as a dialog.\r\n * @param message\r\n * \t\tthe <code>Object</code> to display\r\n * @param optionType\r\n * \t\tan integer designating the options available on the\r\n * \t\tdialog: <code>YES_NO_OPTION</code>,\r\n * \t\tor <code>YES_NO_CANCEL_OPTION</code>\r\n * @param messageType\r\n * \t\tan integer designating the kind of message this is,\r\n * \t\tprimarily used to determine the icon from the\r\n * \t\tpluggable Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.INFORMATION_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.WARNING_MESSAGE</code>,\r\n * \t\t<code>JOptionPane.QUESTION_MESSAGE</code>,\r\n * \t\tor <code>JOptionPane.PLAIN_MESSAGE</code>\r\n * @param icon\r\n * \t\tthe icon to display in the dialog\r\n * @param options\r\n * \t\tan array of objects indicating the possible choices\r\n * \t\tthe user can make; if the objects are components, they\r\n * \t\tare rendered properly; non-<code>String</code>\r\n * \t\tobjects are\r\n * \t\trendered using their <code>toString</code> methods;\r\n * \t\tif this parameter is <code>null</code>,\r\n * \t\tthe options are determined by the Look and Feel\r\n * @param initialValue\r\n * \t\tthe object that represents the default selection\r\n * \t\tfor the dialog; only meaningful if <code>options</code>\r\n * \t\tis used; can be <code>null</code>\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showOptionSheet(Component parentComponent, Object message, int optionType, int messageType, Icon icon, Object[] options, Object initialValue, SheetListener listener) {\r\n    JOptionPane pane = new JOptionPane(message, messageType, optionType, icon, options, initialValue);\r\n    pane.setInitialValue(initialValue);\r\n    pane.setComponentOrientation((parentComponent == null ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());\r\n    int style = JSheet.styleFromMessageType(messageType);\r\n    JSheet sheet = JSheet.createSheet(pane, parentComponent, style);\r\n    pane.selectInitialValue();\r\n    sheet.addSheetListener(listener);\r\n    sheet.show();\r\n    sheet.toFront();\r\n}"},
 {"id":1389, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3909, "methodname":"org.jhotdraw.gui.JSheet.showSaveSheet(javax.swing.JFileChooser,java.awt.Component,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Displays a \"Save File\" file chooser sheet. Note that the\r\n * text that appears in the approve button is determined by\r\n * the L&F.\r\n *\r\n * @param parent\r\n * \t\tthe parent component of the dialog,\r\n * \t\tcan be <code>null</code>.\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showSaveSheet(JFileChooser chooser, Component parent, SheetListener listener) {\r\n    chooser.setDialogType(JFileChooser.SAVE_DIALOG);\r\n    JSheet.showSheet(chooser, parent, null, listener);\r\n}"},
 {"id":1390, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3907, "methodname":"org.jhotdraw.gui.JSheet.showOpenSheet(javax.swing.JFileChooser,java.awt.Component,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Displays an \"Open File\" file chooser sheet. Note that the\r\n * text that appears in the approve button is determined by\r\n * the L&F.\r\n *\r\n * @param parent\r\n * \t\tthe parent component of the dialog,\r\n * \t\tcan be <code>null</code>.\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showOpenSheet(JFileChooser chooser, Component parent, SheetListener listener) {\r\n    chooser.setDialogType(JFileChooser.OPEN_DIALOG);\r\n    JSheet.showSheet(chooser, parent, null, listener);\r\n}"},
 {"id":1391, "parametername":"SheetListener listener", "parametertype":"org.jhotdraw.gui.event.SheetListener", "parameterclass":400, "classid":388, "classname":"org.jhotdraw.gui.JSheet", "methodid":3910, "methodname":"org.jhotdraw.gui.JSheet.showSheet(javax.swing.JFileChooser,java.awt.Component,java.lang.String,org.jhotdraw.gui.event.SheetListener)", "isreturn":0, "sourcecode":"/**\r\n * Displays a custom file chooser sheet with a custom approve button.\r\n *\r\n * @param parent\r\n * \t\tthe parent component of the dialog;\r\n * \t\tcan be <code>null</code>\r\n * @param approveButtonText\r\n * \t\tthe text of the <code>ApproveButton</code>\r\n * @param listener\r\n * \t\tThe listener for SheetEvents.\r\n */\r\npublic static void showSheet(final JFileChooser chooser, Component parent, String approveButtonText, SheetListener listener) {\r\n    if (approveButtonText != null) {\r\n        chooser.setApproveButtonText(approveButtonText);\r\n        chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);\r\n    }\r\n    // Begin Create Dialog\r\n    Frame frame = (parent instanceof Frame) ? ((Frame) (parent)) : ((Frame) (SwingUtilities.getAncestorOfClass(Frame.class, parent)));\r\n    String title = chooser.getUI().getDialogTitle(chooser);\r\n    chooser.getAccessibleContext().setAccessibleDescription(title);\r\n    final JSheet sheet = new JSheet(frame);\r\n    sheet.addSheetListener(listener);\r\n    Container contentPane = sheet.getContentPane();\r\n    contentPane.setLayout(new BorderLayout());\r\n    contentPane.add(chooser, BorderLayout.CENTER);\r\n    // End Create Dialog\r\n    final ActionListener actionListener = new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            int option;\r\n            if (evt.getActionCommand().equals(\"ApproveSelection\")) {\r\n                option = JFileChooser.APPROVE_OPTION;\r\n            } else {\r\n                option = JFileChooser.CANCEL_OPTION;\r\n            }\r\n            sheet.hide();\r\n            sheet.fireOptionSelected(chooser, option);\r\n            chooser.removeActionListener(this);\r\n        }\r\n    };\r\n    chooser.addActionListener(actionListener);\r\n    sheet.addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(WindowEvent e) {\r\n            sheet.fireOptionSelected(chooser, JFileChooser.CANCEL_OPTION);\r\n            chooser.removeActionListener(actionListener);\r\n        }\r\n    });\r\n    chooser.rescanCurrentDirectory();\r\n    sheet.pack();\r\n    sheet.show();\r\n    sheet.toFront();\r\n}"},
 {"id":1392, "parametername":"MDIDesktopPane newDesktop", "parametertype":"org.jhotdraw.gui.MDIDesktopPane", "parameterclass":390, "classid":389, "classname":"org.jhotdraw.gui.MDIDesktopManager", "methodid":3914, "methodname":"org.jhotdraw.gui.MDIDesktopManager.-init-(org.jhotdraw.gui.MDIDesktopPane)", "isreturn":0, "sourcecode":"public MDIDesktopManager(MDIDesktopPane newDesktop) {\r\n    this.desktop = newDesktop;\r\n}"},
 {"id":1393, "parametername":"Arrangeable.Arrangement newValue", "parametertype":"org.jhotdraw.gui.Arrangeable$Arrangement", "parameterclass":364, "classid":390, "classname":"org.jhotdraw.gui.MDIDesktopPane", "methodid":3929, "methodname":"org.jhotdraw.gui.MDIDesktopPane.setArrangement(org.jhotdraw.gui.Arrangeable$Arrangement)", "isreturn":0, "sourcecode":"public void setArrangement(Arrangeable.Arrangement newValue) {\r\n    Arrangeable.Arrangement oldValue = getArrangement();\r\n    switch (newValue) {\r\n        case CASCADE :\r\n            arrangeFramesCascading();\r\n            break;\r\n        case HORIZONTAL :\r\n            arrangeFramesHorizontally();\r\n            break;\r\n        case VERTICAL :\r\n            arrangeFramesVertically();\r\n            break;\r\n    }\r\n    firePropertyChange(\"arrangement\", oldValue, newValue);\r\n}"},
 {"id":1394, "parametername":"JSheet source", "parametertype":"org.jhotdraw.gui.JSheet", "parameterclass":388, "classid":399, "classname":"org.jhotdraw.gui.event.SheetEvent", "methodid":3971, "methodname":"org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source) {\r\n    super(source);\r\n}"},
 {"id":1395, "parametername":"JSheet source", "parametertype":"org.jhotdraw.gui.JSheet", "parameterclass":388, "classid":399, "classname":"org.jhotdraw.gui.event.SheetEvent", "methodid":3972, "methodname":"org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet,javax.swing.JFileChooser,int,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source, JFileChooser fileChooser, int option, Object value) {\r\n    super(source);\r\n    this.pane = fileChooser;\r\n    this.option = option;\r\n    this.value = value;\r\n}"},
 {"id":1396, "parametername":"JSheet source", "parametertype":"org.jhotdraw.gui.JSheet", "parameterclass":388, "classid":399, "classname":"org.jhotdraw.gui.event.SheetEvent", "methodid":3973, "methodname":"org.jhotdraw.gui.event.SheetEvent.-init-(org.jhotdraw.gui.JSheet,javax.swing.JOptionPane,int,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SheetEvent(JSheet source, JOptionPane optionPane, int option, Object value, Object inputValue) {\r\n    super(source);\r\n    this.pane = optionPane;\r\n    this.option = option;\r\n    this.value = value;\r\n    this.inputValue = inputValue;\r\n}"},
 {"id":1397, "parametername":"SheetEvent evt", "parametertype":"org.jhotdraw.gui.event.SheetEvent", "parameterclass":399, "classid":400, "classname":"org.jhotdraw.gui.event.SheetListener", "methodid":3980, "methodname":"org.jhotdraw.gui.event.SheetListener.optionSelected(org.jhotdraw.gui.event.SheetEvent)", "isreturn":0, "sourcecode":"/**\r\n * This method is invoked, when the user selected an option on the\r\n * JOptionPane or the JFileChooser pane on the JSheet.\r\n */\r\npublic void optionSelected(SheetEvent evt);"},
 {"id":1398, "parametername":"FontCollectionNode that", "parametertype":"org.jhotdraw.gui.fontchooser.FontCollectionNode", "parameterclass":405, "classid":405, "classname":"org.jhotdraw.gui.fontchooser.FontCollectionNode", "methodid":4010, "methodname":"org.jhotdraw.gui.fontchooser.FontCollectionNode.compareTo(org.jhotdraw.gui.fontchooser.FontCollectionNode)", "isreturn":0, "sourcecode":"public int compareTo(FontCollectionNode that) {\r\n    return Collator.getInstance().compare(this.name, that.name);\r\n}"},
 {"id":1399, "parametername":"FontFamilyNode newChild", "parametertype":"org.jhotdraw.gui.fontchooser.FontFamilyNode", "parameterclass":407, "classid":405, "classname":"org.jhotdraw.gui.fontchooser.FontCollectionNode", "methodid":4006, "methodname":"org.jhotdraw.gui.fontchooser.FontCollectionNode.add(org.jhotdraw.gui.fontchooser.FontFamilyNode)", "isreturn":0, "sourcecode":"public void add(FontFamilyNode newChild) {\r\n    insert(newChild, getChildCount());\r\n}"},
 {"id":1400, "parametername":"FontFaceNode that", "parametertype":"org.jhotdraw.gui.fontchooser.FontFaceNode", "parameterclass":406, "classid":406, "classname":"org.jhotdraw.gui.fontchooser.FontFaceNode", "methodid":4033, "methodname":"org.jhotdraw.gui.fontchooser.FontFaceNode.compareTo(org.jhotdraw.gui.fontchooser.FontFaceNode)", "isreturn":0, "sourcecode":"public int compareTo(FontFaceNode that) {\r\n    return this.name.compareTo(that.name);\r\n}"},
 {"id":1401, "parametername":"FontFamilyNode that", "parametertype":"org.jhotdraw.gui.fontchooser.FontFamilyNode", "parameterclass":407, "classid":407, "classname":"org.jhotdraw.gui.fontchooser.FontFamilyNode", "methodid":4055, "methodname":"org.jhotdraw.gui.fontchooser.FontFamilyNode.compareTo(org.jhotdraw.gui.fontchooser.FontFamilyNode)", "isreturn":0, "sourcecode":"public int compareTo(FontFamilyNode that) {\r\n    return Collator.getInstance().compare(this.name, that.name);\r\n}"},
 {"id":1402, "parametername":"FontFaceNode newChild", "parametertype":"org.jhotdraw.gui.fontchooser.FontFaceNode", "parameterclass":406, "classid":407, "classname":"org.jhotdraw.gui.fontchooser.FontFamilyNode", "methodid":4052, "methodname":"org.jhotdraw.gui.fontchooser.FontFamilyNode.add(org.jhotdraw.gui.fontchooser.FontFaceNode)", "isreturn":0, "sourcecode":"public void add(FontFaceNode newChild) {\r\n    insert(newChild, getChildCount());\r\n}"},
 {"id":1403, "parametername":"JFontChooser fontChooser", "parametertype":"org.jhotdraw.gui.JFontChooser", "parameterclass":379, "classid":420, "classname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI", "methodid":4119, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.-init-(org.jhotdraw.gui.JFontChooser)", "isreturn":0, "sourcecode":"public PaletteFontChooserUI(JFontChooser fontChooser) {\r\n    this.fontChooser = fontChooser;\r\n}"},
 {"id":1404, "parametername":"JFontChooser fc", "parametertype":"org.jhotdraw.gui.JFontChooser", "parameterclass":379, "classid":420, "classname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI", "methodid":4125, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.installComponents(org.jhotdraw.gui.JFontChooser)", "isreturn":0, "sourcecode":"protected void installComponents(JFontChooser fc) {\r\n    fc.removeAll();\r\n    fc.setLayout(new BorderLayout());\r\n    selectionPanel = new PaletteFontChooserSelectionPanel();\r\n    fc.add(selectionPanel, BorderLayout.CENTER);\r\n    previewPanel = new PaletteFontChooserPreviewPanel();\r\n    fc.add(previewPanel, BorderLayout.NORTH);\r\n    FontChooserModel model = fontChooser.getModel();\r\n    updateCollectionList();\r\n    updateFamilyList();\r\n    updateFaceList();\r\n    updatePreview();\r\n}"},
 {"id":1405, "parametername":"JFontChooser fc", "parametertype":"org.jhotdraw.gui.JFontChooser", "parameterclass":379, "classid":420, "classname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI", "methodid":4126, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.installListeners(org.jhotdraw.gui.JFontChooser)", "isreturn":0, "sourcecode":"protected void installListeners(JFontChooser fc) {\r\n    selectionPanelHandler = new PaletteFontChooserUI.SelectionPanelHandler();\r\n    selectionPanel.getCollectionList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addKeyListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().addMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().addMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().addMouseListener(selectionPanelHandler);\r\n    chooserHandler = new PaletteFontChooserUI.FontChooserHandler();\r\n    fontChooser.addPropertyChangeListener(chooserHandler);\r\n    if ((fontChooser.getModel()) != null) {\r\n        fontChooser.getModel().addTreeModelListener(chooserHandler);\r\n    }\r\n}"},
 {"id":1406, "parametername":"JFontChooser fc", "parametertype":"org.jhotdraw.gui.JFontChooser", "parameterclass":379, "classid":420, "classname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI", "methodid":4129, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.uninstallComponents(org.jhotdraw.gui.JFontChooser)", "isreturn":0, "sourcecode":"protected void uninstallComponents(JFontChooser fc) {\r\n    fontChooser.removeAll();\r\n}"},
 {"id":1407, "parametername":"JFontChooser fc", "parametertype":"org.jhotdraw.gui.JFontChooser", "parameterclass":379, "classid":420, "classname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI", "methodid":4130, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.uninstallListeners(org.jhotdraw.gui.JFontChooser)", "isreturn":0, "sourcecode":"protected void uninstallListeners(JFontChooser fc) {\r\n    fontChooser.removePropertyChangeListener(chooserHandler);\r\n    selectionPanel.getCollectionList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeListSelectionListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeKeyListener(selectionPanelHandler);\r\n    selectionPanel.getCollectionList().removeMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFamilyList().removeMouseListener(selectionPanelHandler);\r\n    selectionPanel.getFaceList().removeMouseListener(selectionPanelHandler);\r\n    if ((fontChooser.getModel()) != null) {\r\n        fontChooser.getModel().removeTreeModelListener(chooserHandler);\r\n    }\r\n    chooserHandler = null;\r\n    selectionPanelHandler = null;\r\n}"},
 {"id":1408, "parametername":"FontCollectionNode newCollection", "parametertype":"org.jhotdraw.gui.fontchooser.FontCollectionNode", "parameterclass":405, "classid":420, "classname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI", "methodid":4128, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.setNewSelectionPath(org.jhotdraw.gui.fontchooser.FontCollectionNode,org.jhotdraw.gui.fontchooser.FontFamilyNode,org.jhotdraw.gui.fontchooser.FontFaceNode)", "isreturn":0, "sourcecode":"private void setNewSelectionPath(FontCollectionNode newCollection, FontFamilyNode newFamily, FontFaceNode newFace) {\r\n    FontChooserModel model = fontChooser.getModel();\r\n    TreePath newPath;\r\n    if (newFace != null) {\r\n        newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily, newFace });\r\n    } else\r\n        if (newFamily != null) {\r\n            newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily });\r\n        } else\r\n            if (newCollection != null) {\r\n                newPath = new TreePath(new Object[]{ model.getRoot(), newCollection });\r\n            } else {\r\n                newPath = new TreePath(model.getRoot());\r\n            }\r\n\r\n\r\n    fontChooser.setSelectionPath(newPath);\r\n}"},
 {"id":1409, "parametername":"FontFamilyNode newFamily", "parametertype":"org.jhotdraw.gui.fontchooser.FontFamilyNode", "parameterclass":407, "classid":420, "classname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI", "methodid":4128, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.setNewSelectionPath(org.jhotdraw.gui.fontchooser.FontCollectionNode,org.jhotdraw.gui.fontchooser.FontFamilyNode,org.jhotdraw.gui.fontchooser.FontFaceNode)", "isreturn":0, "sourcecode":"private void setNewSelectionPath(FontCollectionNode newCollection, FontFamilyNode newFamily, FontFaceNode newFace) {\r\n    FontChooserModel model = fontChooser.getModel();\r\n    TreePath newPath;\r\n    if (newFace != null) {\r\n        newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily, newFace });\r\n    } else\r\n        if (newFamily != null) {\r\n            newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily });\r\n        } else\r\n            if (newCollection != null) {\r\n                newPath = new TreePath(new Object[]{ model.getRoot(), newCollection });\r\n            } else {\r\n                newPath = new TreePath(model.getRoot());\r\n            }\r\n\r\n\r\n    fontChooser.setSelectionPath(newPath);\r\n}"},
 {"id":1410, "parametername":"FontFaceNode newFace", "parametertype":"org.jhotdraw.gui.fontchooser.FontFaceNode", "parameterclass":406, "classid":420, "classname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI", "methodid":4128, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteFontChooserUI.setNewSelectionPath(org.jhotdraw.gui.fontchooser.FontCollectionNode,org.jhotdraw.gui.fontchooser.FontFamilyNode,org.jhotdraw.gui.fontchooser.FontFaceNode)", "isreturn":0, "sourcecode":"private void setNewSelectionPath(FontCollectionNode newCollection, FontFamilyNode newFamily, FontFaceNode newFace) {\r\n    FontChooserModel model = fontChooser.getModel();\r\n    TreePath newPath;\r\n    if (newFace != null) {\r\n        newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily, newFace });\r\n    } else\r\n        if (newFamily != null) {\r\n            newPath = new TreePath(new Object[]{ model.getRoot(), newCollection, newFamily });\r\n        } else\r\n            if (newCollection != null) {\r\n                newPath = new TreePath(new Object[]{ model.getRoot(), newCollection });\r\n            } else {\r\n                newPath = new TreePath(model.getRoot());\r\n            }\r\n\r\n\r\n    fontChooser.setSelectionPath(newPath);\r\n}"},
 {"id":1411, "parametername":"PaletteLazyActionMap map", "parametertype":"org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap", "parameterclass":423, "classid":440, "classname":"org.jhotdraw.gui.plaf.palette.PaletteToolBarUI", "methodid":4281, "methodname":"org.jhotdraw.gui.plaf.palette.PaletteToolBarUI.loadActionMap(org.jhotdraw.gui.plaf.palette.PaletteLazyActionMap)", "isreturn":0, "sourcecode":"static void loadActionMap(PaletteLazyActionMap map) {\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_RIGHT));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_LEFT));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_UP));\r\n    map.put(new PaletteToolBarUI.Actions(PaletteToolBarUI.Actions.NAVIGATE_DOWN));\r\n}"},
 {"id":1412, "parametername":"ColorSystem sys", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":452, "classname":"org.jhotdraw.samples.color.WheelsAndSlidersMain", "methodid":4457, "methodname":"org.jhotdraw.samples.color.WheelsAndSlidersMain.createColorWheelChooser(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"private JPanel createColorWheelChooser(ColorSystem sys) {\r\n    return createColorWheelChooser(sys, 0, 1, 2);\r\n}"},
 {"id":1413, "parametername":"ColorSystem sys", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":452, "classname":"org.jhotdraw.samples.color.WheelsAndSlidersMain", "methodid":4458, "methodname":"org.jhotdraw.samples.color.WheelsAndSlidersMain.createColorWheelChooser(org.jhotdraw.color.ColorSystem,int,int,int)", "isreturn":0, "sourcecode":"private JPanel createColorWheelChooser(ColorSystem sys, int angularIndex, int radialIndex, int verticalIndex) {\r\n    JPanel p = new JPanel(new BorderLayout());\r\n    DefaultColorSliderModel m = new DefaultColorSliderModel(sys);\r\n    models.add(m);\r\n    m.addChangeListener(handler);\r\n    JColorWheel w = new JColorWheel();\r\n    w.setAngularComponentIndex(angularIndex);\r\n    w.setRadialComponentIndex(radialIndex);\r\n    w.setVerticalComponentIndex(verticalIndex);\r\n    w.setModel(m);\r\n    JSlider s = new JSlider(JSlider.VERTICAL);\r\n    m.configureSlider(verticalIndex, s);\r\n    p.add(w, BorderLayout.CENTER);\r\n    p.add(s, BorderLayout.EAST);\r\n    return p;\r\n}"},
 {"id":1414, "parametername":"ColorSystem sys", "parametertype":"org.jhotdraw.color.ColorSystem", "parameterclass":68, "classid":452, "classname":"org.jhotdraw.samples.color.WheelsAndSlidersMain", "methodid":4459, "methodname":"org.jhotdraw.samples.color.WheelsAndSlidersMain.createSliderChooser(org.jhotdraw.color.ColorSystem)", "isreturn":0, "sourcecode":"private JPanel createSliderChooser(ColorSystem sys) {\r\n    JPanel p = new JPanel(new GridLayout(0, 1));\r\n    DefaultColorSliderModel m = new DefaultColorSliderModel(sys);\r\n    models.add(m);\r\n    m.addChangeListener(handler);\r\n    for (int i = 0; i < (m.getComponentCount()); i++) {\r\n        JSlider s = new JSlider(JSlider.HORIZONTAL);\r\n        m.configureSlider(i, s);\r\n        p.add(s);\r\n    }\r\n    return p;\r\n}"},
 {"id":1415, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":453, "classname":"org.jhotdraw.samples.draw.DrawApplet", "methodid":4476, "methodname":"org.jhotdraw.samples.draw.DrawApplet.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}"},
 {"id":1416, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":453, "classname":"org.jhotdraw.samples.draw.DrawApplet", "methodid":4473, "methodname":"org.jhotdraw.samples.draw.DrawApplet.initDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initDrawing(Drawing d) {\r\n    d.setInputFormats(((List<InputFormat>) (Collections.EMPTY_LIST)));\r\n    d.setOutputFormats(((List<OutputFormat>) (Collections.EMPTY_LIST)));\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new DrawFigureFactory());\r\n    d.addInputFormat(ioFormat);\r\n    d.addInputFormat(new ImageInputFormat(new ImageFigure()));\r\n    d.addInputFormat(new TextInputFormat(new TextFigure()));\r\n    d.addOutputFormat(ioFormat);\r\n    d.addOutputFormat(new ImageOutputFormat());\r\n}"},
 {"id":1417, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":454, "classname":"org.jhotdraw.samples.draw.DrawApplicationModel", "methodid":4482, "methodname":"org.jhotdraw.samples.draw.DrawApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((DrawView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}"},
 {"id":1418, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":454, "classname":"org.jhotdraw.samples.draw.DrawApplicationModel", "methodid":4482, "methodname":"org.jhotdraw.samples.draw.DrawApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((DrawView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}"},
 {"id":1419, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":454, "classname":"org.jhotdraw.samples.draw.DrawApplicationModel", "methodid":4480, "methodname":"org.jhotdraw.samples.draw.DrawApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    DrawView p = ((DrawView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":1420, "parametername":"View pr", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":454, "classname":"org.jhotdraw.samples.draw.DrawApplicationModel", "methodid":4480, "methodname":"org.jhotdraw.samples.draw.DrawApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    DrawView p = ((DrawView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":1421, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":454, "classname":"org.jhotdraw.samples.draw.DrawApplicationModel", "methodid":4478, "methodname":"org.jhotdraw.samples.draw.DrawApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addCreationButtonsTo(JToolBar tb, DrawingEditor editor) {\r\n    addDefaultCreationButtonsTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}"},
 {"id":1422, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":454, "classname":"org.jhotdraw.samples.draw.DrawApplicationModel", "methodid":4479, "methodname":"org.jhotdraw.samples.draw.DrawApplicationModel.addDefaultCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)", "isreturn":0, "sourcecode":"public void addDefaultCreationButtonsTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, drawingActions, selectionActions);\r\n    tb.addSeparator();\r\n    AbstractAttributedFigure af;\r\n    CreationTool ct;\r\n    ConnectionTool cnt;\r\n    ConnectionFigure lc;\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure()), \"edit.createRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RoundRectangleFigure()), \"edit.createRoundRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new EllipseFigure()), \"edit.createEllipse\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new DiamondFigure()), \"edit.createDiamond\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TriangleFigure()), \"edit.createTriangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new LineFigure()), \"edit.createLine\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (ct = new CreationTool(new LineFigure())), \"edit.createArrow\", labels);\r\n    af = ((AbstractAttributedFigure) (ct.getPrototype()));\r\n    AttributeKeys.END_DECORATION.basicSet(af, new ArrowTip(0.35, 12, 11.3));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure()), \"edit.createLineConnection\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (cnt = new ConnectionTool(new LineConnectionFigure())), \"edit.createElbowConnection\", labels);\r\n    lc = cnt.getPrototype();\r\n    lc.setLiner(new ElbowLiner());\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure()), \"edit.createScribble\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure(true)), \"edit.createPolygon\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new TextFigure()), \"edit.createText\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new ImageTool(new ImageFigure()), \"edit.createImage\", labels);\r\n}"},
 {"id":1423, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":457, "classname":"org.jhotdraw.samples.draw.DrawLiveConnectApplet", "methodid":4494, "methodname":"org.jhotdraw.samples.draw.DrawLiveConnectApplet.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}"},
 {"id":1424, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":458, "classname":"org.jhotdraw.samples.draw.DrawView", "methodid":4509, "methodname":"org.jhotdraw.samples.draw.DrawView.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Sets a drawing editor for the view.\r\n */\r\npublic void setEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.add(view);\r\n    }\r\n}"},
 {"id":1425, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":459, "classname":"org.jhotdraw.samples.draw.DrawingPanel", "methodid":4519, "methodname":"org.jhotdraw.samples.draw.DrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}"},
 {"id":1426, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":459, "classname":"org.jhotdraw.samples.draw.DrawingPanel", "methodid":4513, "methodname":"org.jhotdraw.samples.draw.DrawingPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addCreationButtonsTo(JToolBar tb, DrawingEditor editor) {\r\n    addDefaultCreationButtonsTo(tb, editor, ButtonFactory.createDrawingActions(editor), ButtonFactory.createSelectionActions(editor));\r\n}"},
 {"id":1427, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":459, "classname":"org.jhotdraw.samples.draw.DrawingPanel", "methodid":4514, "methodname":"org.jhotdraw.samples.draw.DrawingPanel.addDefaultCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor,java.util.Collection,java.util.Collection)", "isreturn":0, "sourcecode":"public void addDefaultCreationButtonsTo(JToolBar tb, final DrawingEditor editor, Collection<Action> drawingActions, Collection<Action> selectionActions) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, drawingActions, selectionActions);\r\n    tb.addSeparator();\r\n    AbstractAttributedFigure af;\r\n    CreationTool ct;\r\n    ConnectionTool cnt;\r\n    ConnectionFigure lc;\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RectangleFigure()), \"edit.createRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new RoundRectangleFigure()), \"edit.createRoundRectangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new EllipseFigure()), \"edit.createEllipse\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new DiamondFigure()), \"edit.createDiamond\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TriangleFigure()), \"edit.createTriangle\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new LineFigure()), \"edit.createLine\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (ct = new CreationTool(new LineFigure())), \"edit.createArrow\", labels);\r\n    af = ((AbstractAttributedFigure) (ct.getPrototype()));\r\n    AttributeKeys.END_DECORATION.basicSet(af, new ArrowTip(0.35, 12, 11.3));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure()), \"edit.createLineConnection\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, (cnt = new ConnectionTool(new LineConnectionFigure())), \"edit.createElbowConnection\", labels);\r\n    lc = cnt.getPrototype();\r\n    lc.setLiner(new ElbowLiner());\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure()), \"edit.createScribble\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new BezierTool(new BezierFigure(true)), \"edit.createPolygon\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new TextFigure()), \"edit.createText\", labels);\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", labels);\r\n}"},
 {"id":1428, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":469, "classname":"org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject", "methodid":4571, "methodname":"org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"name\", name);\r\n}"},
 {"id":1429, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":469, "classname":"org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject", "methodid":4569, "methodname":"org.jhotdraw.samples.mini.DefaultDOMStorableSample$MyObject.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    name = in.getAttribute(\"name\", null);\r\n}"},
 {"id":1430, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":477, "classname":"org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject", "methodid":4594, "methodname":"org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"name\", name);\r\n}"},
 {"id":1431, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":477, "classname":"org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject", "methodid":4592, "methodname":"org.jhotdraw.samples.mini.QuickAndDirtyDOMStorableSample$MyObject.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    name = in.getAttribute(\"name\", null);\r\n}"},
 {"id":1432, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":480, "classname":"org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure", "methodid":4600, "methodname":"org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"@Override\r\npublic void handleConnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, ((start.getOwner()) == (end.getOwner()) ? AttributeKeys.StrokeType.DOUBLE : AttributeKeys.StrokeType.BASIC));\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}"},
 {"id":1433, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":480, "classname":"org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure", "methodid":4600, "methodname":"org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"@Override\r\npublic void handleConnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, ((start.getOwner()) == (end.getOwner()) ? AttributeKeys.StrokeType.DOUBLE : AttributeKeys.StrokeType.BASIC));\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}"},
 {"id":1434, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":480, "classname":"org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure", "methodid":4601, "methodname":"org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"@Override\r\npublic void handleDisconnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, AttributeKeys.StrokeType.BASIC);\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}"},
 {"id":1435, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":480, "classname":"org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure", "methodid":4601, "methodname":"org.jhotdraw.samples.mini.SmartConnectionFigureSample$SmartConnectionFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"@Override\r\npublic void handleDisconnect(Connector start, Connector end) {\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, true);\r\n    AttributeKeys.STROKE_TYPE.set(this, AttributeKeys.StrokeType.BASIC);\r\n    setAttributeEnabled(AttributeKeys.STROKE_TYPE, false);\r\n}"},
 {"id":1436, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":484, "classname":"org.jhotdraw.samples.net.NetApplet", "methodid":4626, "methodname":"org.jhotdraw.samples.net.NetApplet.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}"},
 {"id":1437, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":484, "classname":"org.jhotdraw.samples.net.NetApplet", "methodid":4623, "methodname":"org.jhotdraw.samples.net.NetApplet.initDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\nprivate void initDrawing(Drawing d) {\r\n    d.setInputFormats(((List<InputFormat>) (Collections.EMPTY_LIST)));\r\n    d.setOutputFormats(((List<OutputFormat>) (Collections.EMPTY_LIST)));\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new NetFactory());\r\n    d.addInputFormat(ioFormat);\r\n    d.addInputFormat(new ImageInputFormat(new ImageFigure()));\r\n    d.addInputFormat(new TextInputFormat(new TextFigure()));\r\n    d.addOutputFormat(ioFormat);\r\n    d.addOutputFormat(new ImageOutputFormat());\r\n}"},
 {"id":1438, "parametername":"Tool t", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":485, "classname":"org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener", "methodid":4635, "methodname":"org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}"},
 {"id":1439, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":485, "classname":"org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener", "methodid":4635, "methodname":"org.jhotdraw.samples.net.NetApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}"},
 {"id":1440, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":486, "classname":"org.jhotdraw.samples.net.NetApplicationModel", "methodid":4633, "methodname":"org.jhotdraw.samples.net.NetApplicationModel.initApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"view.toggleGrid\", (aa = new ToggleViewPropertyAction(a, NetView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : NetApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n}"},
 {"id":1441, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":486, "classname":"org.jhotdraw.samples.net.NetApplicationModel", "methodid":4634, "methodname":"org.jhotdraw.samples.net.NetApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((NetView) (p)).setDrawingEditor(getSharedEditor());\r\n    }\r\n}"},
 {"id":1442, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":486, "classname":"org.jhotdraw.samples.net.NetApplicationModel", "methodid":4634, "methodname":"org.jhotdraw.samples.net.NetApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((NetView) (p)).setDrawingEditor(getSharedEditor());\r\n    }\r\n}"},
 {"id":1443, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":486, "classname":"org.jhotdraw.samples.net.NetApplicationModel", "methodid":4629, "methodname":"org.jhotdraw.samples.net.NetApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new NodeFigure(), attributes), \"edit.createNode\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure(), attributes), \"edit.createLink\", labels);\r\n}"},
 {"id":1444, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":486, "classname":"org.jhotdraw.samples.net.NetApplicationModel", "methodid":4631, "methodname":"org.jhotdraw.samples.net.NetApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    NetView p = ((NetView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getDrawingEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":1445, "parametername":"View pr", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":486, "classname":"org.jhotdraw.samples.net.NetApplicationModel", "methodid":4631, "methodname":"org.jhotdraw.samples.net.NetApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    NetView p = ((NetView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getDrawingEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":1446, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":486, "classname":"org.jhotdraw.samples.net.NetApplicationModel", "methodid":4630, "methodname":"org.jhotdraw.samples.net.NetApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    NetView p = ((NetView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"view.toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"view.toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : NetApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}"},
 {"id":1447, "parametername":"View pr", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":486, "classname":"org.jhotdraw.samples.net.NetApplicationModel", "methodid":4630, "methodname":"org.jhotdraw.samples.net.NetApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    NetView p = ((NetView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"view.toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"view.toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : NetApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}"},
 {"id":1448, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":488, "classname":"org.jhotdraw.samples.net.NetPanel", "methodid":4644, "methodname":"org.jhotdraw.samples.net.NetPanel.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}"},
 {"id":1449, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":488, "classname":"org.jhotdraw.samples.net.NetPanel", "methodid":4639, "methodname":"org.jhotdraw.samples.net.NetPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.net.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new TextCreationTool(new NodeFigure(), attributes), \"edit.createNode\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new LineConnectionFigure(), attributes), \"edit.createLink\", labels);\r\n}"},
 {"id":1450, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":489, "classname":"org.jhotdraw.samples.net.NetView", "methodid":4661, "methodname":"org.jhotdraw.samples.net.NetView.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}"},
 {"id":1451, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":489, "classname":"org.jhotdraw.samples.net.NetView", "methodid":4660, "methodname":"org.jhotdraw.samples.net.NetView.setDrawingEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Sets a drawing editor for the view.\r\n */\r\npublic void setDrawingEditor(DrawingEditor newValue) {\r\n    if ((editor) != null) {\r\n        editor.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if ((editor) != null) {\r\n        editor.add(view);\r\n    }\r\n}"},
 {"id":1452, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":490, "classname":"org.jhotdraw.samples.net.figures.NodeFigure", "methodid":4672, "methodname":"org.jhotdraw.samples.net.figures.NodeFigure.getConnectors(org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"@Override\r\npublic Collection<Connector> getConnectors(ConnectionFigure prototype) {\r\n    return ((List<Connector>) (Collections.unmodifiableList(connectors)));\r\n}"},
 {"id":1453, "parametername":"ConnectionFigure figure", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":490, "classname":"org.jhotdraw.samples.net.figures.NodeFigure", "methodid":4671, "methodname":"org.jhotdraw.samples.net.figures.NodeFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure figure) {\r\n    // return closest connector\r\n    double min = Double.MAX_VALUE;\r\n    Connector closest = null;\r\n    for (Connector c : connectors) {\r\n        Point2D.Double p2 = Geom.center(c.getBounds());\r\n        double d = Geom.length2(p.x, p.y, p2.x, p2.y);\r\n        if (d < min) {\r\n            min = d;\r\n            closest = c;\r\n        }\r\n    }\r\n    return closest;\r\n}"},
 {"id":1454, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":490, "classname":"org.jhotdraw.samples.net.figures.NodeFigure", "methodid":4671, "methodname":"org.jhotdraw.samples.net.figures.NodeFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure figure) {\r\n    // return closest connector\r\n    double min = Double.MAX_VALUE;\r\n    Connector closest = null;\r\n    for (Connector c : connectors) {\r\n        Point2D.Double p2 = Geom.center(c.getBounds());\r\n        double d = Geom.length2(p.x, p.y, p2.x, p2.y);\r\n        if (d < min) {\r\n            min = d;\r\n            closest = c;\r\n        }\r\n    }\r\n    return closest;\r\n}"},
 {"id":1455, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":490, "classname":"org.jhotdraw.samples.net.figures.NodeFigure", "methodid":4670, "methodname":"org.jhotdraw.samples.net.figures.NodeFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    if (c instanceof LocatorConnector) {\r\n        LocatorConnector lc = ((LocatorConnector) (c));\r\n        for (Connector cc : connectors) {\r\n            LocatorConnector lcc = ((LocatorConnector) (cc));\r\n            if (lcc.getLocator().equals(lc.getLocator())) {\r\n                return lcc;\r\n            }\r\n        }\r\n    }\r\n    return connectors.getFirst();\r\n}"},
 {"id":1456, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":490, "classname":"org.jhotdraw.samples.net.figures.NodeFigure", "methodid":4670, "methodname":"org.jhotdraw.samples.net.figures.NodeFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStart) {\r\n    if (c instanceof LocatorConnector) {\r\n        LocatorConnector lc = ((LocatorConnector) (c));\r\n        for (Connector cc : connectors) {\r\n            LocatorConnector lcc = ((LocatorConnector) (cc));\r\n            if (lcc.getLocator().equals(lc.getLocator())) {\r\n                return lcc;\r\n            }\r\n        }\r\n    }\r\n    return connectors.getFirst();\r\n}"},
 {"id":1457, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":490, "classname":"org.jhotdraw.samples.net.figures.NodeFigure", "methodid":4677, "methodname":"org.jhotdraw.samples.net.figures.NodeFigure.writeDecorator(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\nprotected void writeDecorator(DOMOutput out) throws IOException {\r\n    // do nothing\r\n}"},
 {"id":1458, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":490, "classname":"org.jhotdraw.samples.net.figures.NodeFigure", "methodid":4675, "methodname":"org.jhotdraw.samples.net.figures.NodeFigure.readDecorator(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\nprotected void readDecorator(DOMInput in) throws IOException {\r\n    // do nothing\r\n}"},
 {"id":1459, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":490, "classname":"org.jhotdraw.samples.net.figures.NodeFigure", "methodid":4676, "methodname":"org.jhotdraw.samples.net.figures.NodeFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    if ((getDecorator()) != null) {\r\n        key.basicSet(getDecorator(), newValue);\r\n    }\r\n}"},
 {"id":1460, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":491, "classname":"org.jhotdraw.samples.odg.Gradient", "methodid":4679, "methodname":"org.jhotdraw.samples.odg.Gradient.getPaint(org.jhotdraw.draw.Figure,double)", "isreturn":0, "sourcecode":"public Paint getPaint(Figure f, double opacity);"},
 {"id":1461, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":491, "classname":"org.jhotdraw.samples.odg.Gradient", "methodid":4681, "methodname":"org.jhotdraw.samples.odg.Gradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void makeRelativeToFigureBounds(Figure f);"},
 {"id":1462, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4690, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.createDrawingActions(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static Collection<Action> createDrawingActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectAllAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}"},
 {"id":1463, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4691, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new ODGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new ODGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}"},
 {"id":1464, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4688, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, ODGApplicationModel.createDrawingActions(editor), ODGApplicationModel.createSelectionActions(editor));\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new ODGRectFigure(), attributes), \"edit.createRectangle\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new ODGPathFigure(), attributes), \"edit.createLine\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n}"},
 {"id":1465, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4686, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.addAttributesButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbar buttons and adds them to the specified JToolBar\r\n */\r\nprivate void addAttributesButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JButton b;\r\n    b = bar.add(new PickAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    b = bar.add(new ApplyAttributesAction(editor));\r\n    b.setFocusable(false);\r\n    bar.addSeparator();\r\n    addColorButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    addStrokeButtonsTo(bar, editor);\r\n    bar.addSeparator();\r\n    ButtonFactory.addFontButtonsTo(bar, editor);\r\n}"},
 {"id":1466, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4687, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.addColorButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addColorButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    HashMap<AttributeKey, Object> defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    ODGAttributeKeys.STROKE_GRADIENT.set(defaultAttributes, ((Gradient) (null)));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.STROKE_COLOR, ButtonFactory.WEBSAVE_COLORS, ButtonFactory.WEBSAVE_COLORS_COLUMN_COUNT, \"attribute.strokeColor\", labels, defaultAttributes));\r\n    defaultAttributes = new HashMap<AttributeKey, Object>();\r\n    ODGAttributeKeys.FILL_GRADIENT.set(defaultAttributes, ((Gradient) (null)));\r\n    bar.add(ButtonFactory.createEditorColorButton(editor, AttributeKeys.FILL_COLOR, ButtonFactory.WEBSAVE_COLORS, ButtonFactory.WEBSAVE_COLORS_COLUMN_COUNT, \"attribute.fillColor\", labels, defaultAttributes));\r\n}"},
 {"id":1467, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4689, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.addStrokeButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addStrokeButtonsTo(JToolBar bar, DrawingEditor editor) {\r\n    bar.add(ButtonFactory.createStrokeWidthButton(editor));\r\n    bar.add(ButtonFactory.createStrokeDashesButton(editor));\r\n    bar.add(ButtonFactory.createStrokeCapButton(editor));\r\n    bar.add(ButtonFactory.createStrokeJoinButton(editor));\r\n}"},
 {"id":1468, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4692, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ODGView p = ((ODGView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":1469, "parametername":"View pr", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4692, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ODGView p = ((ODGView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    addAttributesButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(labels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":1470, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4695, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((ODGView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}"},
 {"id":1471, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4695, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((ODGView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}"},
 {"id":1472, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":493, "classname":"org.jhotdraw.samples.odg.ODGApplicationModel", "methodid":4694, "methodname":"org.jhotdraw.samples.odg.ODGApplicationModel.initApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"view.toggleGrid\", (aa = new ToggleViewPropertyAction(a, ODGView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : ODGApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n    putAction(\"togglePropertiesPanel\", new TogglePropertiesPanelAction(a));\r\n}"},
 {"id":1473, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":494, "classname":"org.jhotdraw.samples.odg.ODGAttributeKeys", "methodid":4697, "methodname":"org.jhotdraw.samples.odg.ODGAttributeKeys.getFillPaint(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Gets the fill paint for the specified figure based on the attributes\r\n * FILL_GRADIENT, FILL_OPACITY, FILL_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getFillPaint(Figure f) {\r\n    double opacity = ODGAttributeKeys.FILL_OPACITY.get(f);\r\n    if ((ODGAttributeKeys.FILL_GRADIENT.get(f)) != null) {\r\n        return ODGAttributeKeys.FILL_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.FILL_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}"},
 {"id":1474, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":494, "classname":"org.jhotdraw.samples.odg.ODGAttributeKeys", "methodid":4699, "methodname":"org.jhotdraw.samples.odg.ODGAttributeKeys.getStrokePaint(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Gets the stroke paint for the specified figure based on the attributes\r\n * STROKE_GRADIENT, STROKE_OPACITY, STROKE_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getStrokePaint(Figure f) {\r\n    double opacity = ODGAttributeKeys.STROKE_OPACITY.get(f);\r\n    if ((ODGAttributeKeys.STROKE_GRADIENT.get(f)) != null) {\r\n        return ODGAttributeKeys.STROKE_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.STROKE_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}"},
 {"id":1475, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":494, "classname":"org.jhotdraw.samples.odg.ODGAttributeKeys", "methodid":4698, "methodname":"org.jhotdraw.samples.odg.ODGAttributeKeys.getStroke(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public static Stroke getStroke(Figure f) {\r\n    double strokeWidth = AttributeKeys.STROKE_WIDTH.get(f);\r\n    if (strokeWidth == 0) {\r\n        strokeWidth = 1;\r\n    }\r\n    return new BasicStroke(((float) (strokeWidth)));\r\n}"},
 {"id":1476, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":494, "classname":"org.jhotdraw.samples.odg.ODGAttributeKeys", "methodid":4700, "methodname":"org.jhotdraw.samples.odg.ODGAttributeKeys.setDefaults(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Sets ODG default values.\r\n */\r\npublic static void setDefaults(Figure f) {\r\n    // Fill properties\r\n    AttributeKeys.FILL_COLOR.basicSet(f, Color.black);\r\n    AttributeKeys.WINDING_RULE.basicSet(f, AttributeKeys.WindingRule.NON_ZERO);\r\n    // Stroke properties\r\n    AttributeKeys.STROKE_COLOR.basicSet(f, null);\r\n    AttributeKeys.STROKE_WIDTH.basicSet(f, 1.0);\r\n    AttributeKeys.STROKE_CAP.basicSet(f, BasicStroke.CAP_BUTT);\r\n    AttributeKeys.STROKE_JOIN.basicSet(f, BasicStroke.JOIN_MITER);\r\n    AttributeKeys.STROKE_MITER_LIMIT.basicSet(f, 4.0);\r\n    AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.basicSet(f, false);\r\n    AttributeKeys.STROKE_DASHES.basicSet(f, null);\r\n    AttributeKeys.STROKE_DASH_PHASE.basicSet(f, 0.0);\r\n    AttributeKeys.IS_STROKE_DASH_FACTOR.basicSet(f, false);\r\n}"},
 {"id":1477, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":498, "classname":"org.jhotdraw.samples.odg.ODGDrawing", "methodid":4707, "methodname":"org.jhotdraw.samples.odg.ODGDrawing.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException {\r\n    for (int i = 0, n = in.getElementCount(); i < n; i++) {\r\n        in.openElement(i);\r\n        String name = in.getTagName();\r\n        if (name.equals(\"title\")) {\r\n            title = in.getText();\r\n            in.closeElement();\r\n        } else\r\n            if (name.equals(\"desc\")) {\r\n                description = in.getText();\r\n                in.closeElement();\r\n            } else\r\n                if (name.equals(\"defs\")) {\r\n                    // We ignore \"defs\" elements for now.\r\n                    in.closeElement();\r\n                } else\r\n                    if (name.equals(\"use\")) {\r\n                        // We ignore \"use\" elements for now.\r\n                        in.closeElement();\r\n                    } else\r\n                        if (name.equals(\"script\")) {\r\n                            // We ignore \"script\" elements for now.\r\n                            in.closeElement();\r\n                        } else\r\n                            if (name.equals(\"style\")) {\r\n                                // We ignore \"style\" elements for now.\r\n                                in.closeElement();\r\n                            } else\r\n                                if (name.equals(\"radialGradient\")) {\r\n                                    // We ignore \"radialGradient\" elements for now.\r\n                                    in.closeElement();\r\n                                } else {\r\n                                    in.closeElement();\r\n                                    Object f = ((Object) (in.readObject(i)));\r\n                                    if (f instanceof ODGDrawing) {\r\n                                        SVGGroupFigure g = new SVGGroupFigure();\r\n                                        g.willChange();\r\n                                        for (Figure child : ((ODGDrawing) (f)).getChildren()) {\r\n                                            g.basicAdd(child);\r\n                                        }\r\n                                        g.changed();\r\n                                        if (!(g.isEmpty())) {\r\n                                            add(g);\r\n                                        }\r\n                                    } else\r\n                                        if (f instanceof SVGFigure) {\r\n                                            if (!(((SVGFigure) (f)).isEmpty())) {\r\n                                                add(((Figure) (f)));\r\n                                            }\r\n                                        } else {\r\n                                            throw new IOException((\"Unexpected child \" + f));\r\n                                        }\r\n\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    readAttributes(in);\r\n}"},
 {"id":1478, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":498, "classname":"org.jhotdraw.samples.odg.ODGDrawing", "methodid":4708, "methodname":"org.jhotdraw.samples.odg.ODGDrawing.readAttributes(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"protected void readAttributes(DOMInput in) throws IOException {\r\n    // SVGUtil.readAttributes(this, in);\r\n}"},
 {"id":1479, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":498, "classname":"org.jhotdraw.samples.odg.ODGDrawing", "methodid":4711, "methodname":"org.jhotdraw.samples.odg.ODGDrawing.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(DOMOutput out) throws IOException {\r\n    out.addAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n    out.addAttribute(\"version\", \"1.2\");\r\n    out.addAttribute(\"baseProfile\", \"tiny\");\r\n    for (Figure f : getChildren()) {\r\n        out.writeObject(f);\r\n    }\r\n}"},
 {"id":1480, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":499, "classname":"org.jhotdraw.samples.odg.ODGDrawingPanel", "methodid":4719, "methodname":"org.jhotdraw.samples.odg.ODGDrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}"},
 {"id":1481, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":499, "classname":"org.jhotdraw.samples.odg.ODGDrawingPanel", "methodid":4714, "methodname":"org.jhotdraw.samples.odg.ODGDrawingPanel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}"},
 {"id":1482, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":499, "classname":"org.jhotdraw.samples.odg.ODGDrawingPanel", "methodid":4713, "methodname":"org.jhotdraw.samples.odg.ODGDrawingPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor, ButtonFactory.createDrawingActions(editor), ODGDrawingPanel.createSelectionActions(editor));\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGRectFigure(), attributes), \"edit.createRectangle\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGEllipseFigure(), attributes), \"edit.createEllipse\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new PathTool(new SVGPathFigure(), new SVGBezierFigure(true), attributes), \"edit.createPolygon\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, null);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGPathFigure(), attributes), \"edit.createLine\", drawLabels);\r\n    ButtonFactory.addToolTo(tb, editor, new PathTool(new SVGPathFigure(), new SVGBezierFigure(false), attributes), \"edit.createScribble\", drawLabels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, null);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new SVGTextFigure(), attributes), \"edit.createText\", drawLabels);\r\n    TextAreaCreationTool tat = new TextAreaCreationTool(new SVGTextAreaFigure(), attributes);\r\n    tat.setRubberbandColor(Color.BLACK);\r\n    ButtonFactory.addToolTo(tb, editor, tat, \"edit.createTextArea\", drawLabels);\r\n}"},
 {"id":1483, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":501, "classname":"org.jhotdraw.samples.odg.ODGPropertiesPanel", "methodid":4734, "methodname":"org.jhotdraw.samples.odg.ODGPropertiesPanel.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor editor) {\r\n    this.editor = editor;\r\n    linkFieldHandler.setDrawingEditor(editor);\r\n    opacitySliderHandler.setDrawingEditor(editor);\r\n    opacityFieldHandler.setDrawingEditor(editor);\r\n}"},
 {"id":1484, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":501, "classname":"org.jhotdraw.samples.odg.ODGPropertiesPanel", "methodid":4735, "methodname":"org.jhotdraw.samples.odg.ODGPropertiesPanel.setView(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void setView(DrawingView view) {\r\n    opacityFieldHandler.setView(view);\r\n    opacitySliderHandler.setView(view);\r\n    linkFieldHandler.setView(view);\r\n}"},
 {"id":1485, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":503, "classname":"org.jhotdraw.samples.odg.ODGView", "methodid":4767, "methodname":"org.jhotdraw.samples.odg.ODGView.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    propertiesPanel.setEditor(editor);\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}"},
 {"id":1486, "parametername":"SVGPathFigure pathPrototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":504, "classname":"org.jhotdraw.samples.odg.PathTool", "methodid":4774, "methodname":"org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}"},
 {"id":1487, "parametername":"SVGBezierFigure bezierPrototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGBezierFigure", "parameterclass":559, "classid":504, "classname":"org.jhotdraw.samples.odg.PathTool", "methodid":4774, "methodname":"org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}"},
 {"id":1488, "parametername":"SVGPathFigure pathPrototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":504, "classname":"org.jhotdraw.samples.odg.PathTool", "methodid":4775, "methodname":"org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}"},
 {"id":1489, "parametername":"SVGBezierFigure bezierPrototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGBezierFigure", "parameterclass":559, "classid":504, "classname":"org.jhotdraw.samples.odg.PathTool", "methodid":4775, "methodname":"org.jhotdraw.samples.odg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}"},
 {"id":1490, "parametername":"BezierFigure createdFigure", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":504, "classname":"org.jhotdraw.samples.odg.PathTool", "methodid":4777, "methodname":"org.jhotdraw.samples.odg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG)\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    creationView.addToSelection(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n}"},
 {"id":1491, "parametername":"DrawingView creationView", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":504, "classname":"org.jhotdraw.samples.odg.PathTool", "methodid":4777, "methodname":"org.jhotdraw.samples.odg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG)\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    creationView.addToSelection(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n}"},
 {"id":1492, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":505, "classname":"org.jhotdraw.samples.odg.action.CombineAction", "methodid":4778, "methodname":"org.jhotdraw.samples.odg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic CombineAction(DrawingEditor editor) {\r\n    super(editor, new ODGPathFigure());\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, CombineAction.ID);\r\n}"},
 {"id":1493, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":505, "classname":"org.jhotdraw.samples.odg.action.CombineAction", "methodid":4781, "methodname":"org.jhotdraw.samples.odg.action.CombineAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}"},
 {"id":1494, "parametername":"CompositeFigure group", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":505, "classname":"org.jhotdraw.samples.odg.action.CombineAction", "methodid":4781, "methodname":"org.jhotdraw.samples.odg.action.CombineAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}"},
 {"id":1495, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":505, "classname":"org.jhotdraw.samples.odg.action.CombineAction", "methodid":4780, "methodname":"org.jhotdraw.samples.odg.action.CombineAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)", "isreturn":0, "sourcecode":"@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        // XXX - We must fire an UndoableEdito for the flattenTransform!\r\n        path.flattenTransform();\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}"},
 {"id":1496, "parametername":"CompositeFigure group", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":505, "classname":"org.jhotdraw.samples.odg.action.CombineAction", "methodid":4780, "methodname":"org.jhotdraw.samples.odg.action.CombineAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)", "isreturn":0, "sourcecode":"@Override\r\n@SuppressWarnings(\"unchecked\")\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        // XXX - We must fire an UndoableEdito for the flattenTransform!\r\n        path.flattenTransform();\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}"},
 {"id":1497, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":506, "classname":"org.jhotdraw.samples.odg.action.SplitAction", "methodid":4782, "methodname":"org.jhotdraw.samples.odg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SplitAction(DrawingEditor editor) {\r\n    super(editor, new ODGPathFigure());\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, SplitAction.ID);\r\n}"},
 {"id":1498, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":506, "classname":"org.jhotdraw.samples.odg.action.SplitAction", "methodid":4785, "methodname":"org.jhotdraw.samples.odg.action.SplitAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}"},
 {"id":1499, "parametername":"CompositeFigure group", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":506, "classname":"org.jhotdraw.samples.odg.action.SplitAction", "methodid":4785, "methodname":"org.jhotdraw.samples.odg.action.SplitAction.ungroupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic Collection<Figure> ungroupFigures(DrawingView view, CompositeFigure group) {\r\n    LinkedList<Figure> figures = new LinkedList<Figure>(group.getChildren());\r\n    view.clearSelection();\r\n    group.basicRemoveAllChildren();\r\n    LinkedList<Figure> paths = new LinkedList<Figure>();\r\n    for (Figure f : figures) {\r\n        ODGPathFigure path = new ODGPathFigure();\r\n        path.removeAllChildren();\r\n        for (Map.Entry<AttributeKey, Object> entry : group.getAttributes().entrySet()) {\r\n            path.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n        path.add(f);\r\n        view.getDrawing().basicAdd(path);\r\n        paths.add(path);\r\n    }\r\n    view.getDrawing().remove(group);\r\n    view.addToSelection(paths);\r\n    return figures;\r\n}"},
 {"id":1500, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":506, "classname":"org.jhotdraw.samples.odg.action.SplitAction", "methodid":4784, "methodname":"org.jhotdraw.samples.odg.action.SplitAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}"},
 {"id":1501, "parametername":"CompositeFigure group", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":506, "classname":"org.jhotdraw.samples.odg.action.SplitAction", "methodid":4784, "methodname":"org.jhotdraw.samples.odg.action.SplitAction.groupFigures(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic void groupFigures(DrawingView view, CompositeFigure group, Collection<Figure> figures) {\r\n    Collection<Figure> sorted = view.getDrawing().sort(figures);\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(group);\r\n    group.willChange();\r\n    ((ODGPathFigure) (group)).removeAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : sorted) {\r\n        ODGPathFigure path = ((ODGPathFigure) (f));\r\n        for (Figure child : path.getChildren()) {\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}"},
 {"id":1502, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":507, "classname":"org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction", "methodid":4786, "methodname":"org.jhotdraw.samples.odg.action.TogglePropertiesPanelAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic TogglePropertiesPanelAction(Application app) {\r\n    super(app);\r\n    setPropertyName(\"propertiesPanelVisible\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.odg.Labels\");\r\n    putValue(AbstractAction.NAME, labels.getString(\"propertiesPanel\"));\r\n}"},
 {"id":1503, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":508, "classname":"org.jhotdraw.samples.odg.figures.ODGAttributedFigure", "methodid":4796, "methodname":"org.jhotdraw.samples.odg.figures.ODGAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.TRANSFORM)) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}"},
 {"id":1504, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":508, "classname":"org.jhotdraw.samples.odg.figures.ODGAttributedFigure", "methodid":4797, "methodname":"org.jhotdraw.samples.odg.figures.ODGAttributedFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}"},
 {"id":1505, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":508, "classname":"org.jhotdraw.samples.odg.figures.ODGAttributedFigure", "methodid":4795, "methodname":"org.jhotdraw.samples.odg.figures.ODGAttributedFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}"},
 {"id":1506, "parametername":"ODGPathFigure pathFigure", "parametertype":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "parameterclass":513, "classid":509, "classname":"org.jhotdraw.samples.odg.figures.ODGBezierFigure", "methodid":4800, "methodname":"org.jhotdraw.samples.odg.figures.ODGBezierFigure.createHandles(org.jhotdraw.samples.odg.figures.ODGPathFigure,int)", "isreturn":0, "sourcecode":"public Collection<Handle> createHandles(ODGPathFigure pathFigure, int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            for (int i = 0, n = path.size(); i < n; i++) {\r\n                handles.add(new BezierNodeHandle(this, i, pathFigure));\r\n            }\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}"},
 {"id":1507, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":509, "classname":"org.jhotdraw.samples.odg.figures.ODGBezierFigure", "methodid":4803, "methodname":"org.jhotdraw.samples.odg.figures.ODGBezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    /* && view.getHandleDetailLevel() == 0 */\r\n    if ((evt.getClickCount()) == 2) {\r\n        willChange();\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":1508, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":510, "classname":"org.jhotdraw.samples.odg.figures.ODGEllipseFigure", "methodid":4815, "methodname":"org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1509, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":510, "classname":"org.jhotdraw.samples.odg.figures.ODGEllipseFigure", "methodid":4815, "methodname":"org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1510, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":510, "classname":"org.jhotdraw.samples.odg.figures.ODGEllipseFigure", "methodid":4814, "methodname":"org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1511, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":510, "classname":"org.jhotdraw.samples.odg.figures.ODGEllipseFigure", "methodid":4814, "methodname":"org.jhotdraw.samples.odg.figures.ODGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1512, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":512, "classname":"org.jhotdraw.samples.odg.figures.ODGGroupFigure", "methodid":4839, "methodname":"org.jhotdraw.samples.odg.figures.ODGGroupFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    if (key == (ODGAttributeKeys.OPACITY)) {\r\n        attributes.put(key, value);\r\n    } else {\r\n        super.setAttribute(key, value);\r\n    }\r\n    invalidate();\r\n}"},
 {"id":1513, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":512, "classname":"org.jhotdraw.samples.odg.figures.ODGGroupFigure", "methodid":4834, "methodname":"org.jhotdraw.samples.odg.figures.ODGGroupFigure.getAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return key.get(attributes);\r\n}"},
 {"id":1514, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":512, "classname":"org.jhotdraw.samples.odg.figures.ODGGroupFigure", "methodid":4842, "methodname":"org.jhotdraw.samples.odg.figures.ODGGroupFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}"},
 {"id":1515, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":512, "classname":"org.jhotdraw.samples.odg.figures.ODGGroupFigure", "methodid":4838, "methodname":"org.jhotdraw.samples.odg.figures.ODGGroupFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}"},
 {"id":1516, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4871, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableOutput to write this Figure.\");\r\n}"},
 {"id":1517, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4865, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use ODGStorableInput to read this Figure.\");\r\n}"},
 {"id":1518, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4867, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}"},
 {"id":1519, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4868, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.setAttributeOnChildren(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\nprotected <T> void setAttributeOnChildren(AttributeKey<T> key, T newValue) {\r\n    // empty!\r\n}"},
 {"id":1520, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4855, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1521, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4855, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1522, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4854, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1523, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4854, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1524, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4862, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        for (Figure child : getChildren()) {\r\n            ODGBezierFigure bf = ((ODGBezierFigure) (child));\r\n            int index = bf.getBezierPath().findSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n            if (index != (-1)) {\r\n                bf.handleMouseClick(p, evt, view);\r\n                evt.consume();\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":1525, "parametername":"final Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":513, "classname":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "methodid":4845, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathFigure.add(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic void add(final int index, final Figure figure) {\r\n    super.add(index, ((ODGBezierFigure) (figure)));\r\n}"},
 {"id":1526, "parametername":"ODGPathFigure owner", "parametertype":"org.jhotdraw.samples.odg.figures.ODGPathFigure", "parameterclass":513, "classid":514, "classname":"org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle", "methodid":4872, "methodname":"org.jhotdraw.samples.odg.figures.ODGPathOutlineHandle.-init-(org.jhotdraw.samples.odg.figures.ODGPathFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ODGPathOutlineHandle(ODGPathFigure owner) {\r\n    super(owner);\r\n}"},
 {"id":1527, "parametername":"Dimension2DDouble arc", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":515, "classname":"org.jhotdraw.samples.odg.figures.ODGRectFigure", "methodid":4908, "methodname":"org.jhotdraw.samples.odg.figures.ODGRectFigure.setArc(org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"public void setArc(Dimension2DDouble arc) {\r\n    roundrect.arcwidth = Math.max(0.0, Math.min(roundrect.width, ((arc.width) * 2.0)));\r\n    roundrect.archeight = Math.max(0.0, Math.min(roundrect.height, ((arc.height) * 2.0)));\r\n}"},
 {"id":1528, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":515, "classname":"org.jhotdraw.samples.odg.figures.ODGRectFigure", "methodid":4890, "methodname":"org.jhotdraw.samples.odg.figures.ODGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1529, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":515, "classname":"org.jhotdraw.samples.odg.figures.ODGRectFigure", "methodid":4890, "methodname":"org.jhotdraw.samples.odg.figures.ODGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1530, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":515, "classname":"org.jhotdraw.samples.odg.figures.ODGRectFigure", "methodid":4889, "methodname":"org.jhotdraw.samples.odg.figures.ODGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1531, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":515, "classname":"org.jhotdraw.samples.odg.figures.ODGRectFigure", "methodid":4889, "methodname":"org.jhotdraw.samples.odg.figures.ODGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// ODG does not support connectors\r\n\r\n}"},
 {"id":1532, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":516, "classname":"org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle", "methodid":4911, "methodname":"org.jhotdraw.samples.odg.figures.ODGRectRadiusHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ODGRectRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":1533, "parametername":"EnhancedPath.SegType type", "parametertype":"org.jhotdraw.samples.odg.geom.EnhancedPath$SegType", "parameterclass":517, "classid":518, "classname":"org.jhotdraw.samples.odg.geom.EnhancedPath$Segment", "methodid":4952, "methodname":"org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$SegType,java.lang.Object[])", "isreturn":0, "sourcecode":"/**\r\n * Creates a segment.\r\n */\r\npublic Segment(EnhancedPath.SegType type, Object... coordOrModifier) {\r\n    this.type = type;\r\n    for (int i = 0; i < (coordOrModifier.length); i++) {\r\n        if ((coordOrModifier[i]) instanceof Double) {\r\n            coords[i] = ((Double) (coordOrModifier[i]));\r\n        } else {\r\n            modifiers[i] = ((String) (coordOrModifier[i]));\r\n        }\r\n    }\r\n}"},
 {"id":1534, "parametername":"EnhancedPath.Segment that", "parametertype":"org.jhotdraw.samples.odg.geom.EnhancedPath$Segment", "parameterclass":518, "classid":518, "classname":"org.jhotdraw.samples.odg.geom.EnhancedPath$Segment", "methodid":4953, "methodname":"org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.-init-(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)", "isreturn":0, "sourcecode":"public Segment(EnhancedPath.Segment that) {\r\n    setTo(that);\r\n}"},
 {"id":1535, "parametername":"EnhancedPath.Segment that", "parametertype":"org.jhotdraw.samples.odg.geom.EnhancedPath$Segment", "parameterclass":518, "classid":518, "classname":"org.jhotdraw.samples.odg.geom.EnhancedPath$Segment", "methodid":4957, "methodname":"org.jhotdraw.samples.odg.geom.EnhancedPath$Segment.setTo(org.jhotdraw.samples.odg.geom.EnhancedPath$Segment)", "isreturn":0, "sourcecode":"public void setTo(EnhancedPath.Segment that) {\r\n    this.type = that.type;\r\n    System.arraycopy(that.coords, 0, this.coords, 0, that.type.getLen());\r\n    System.arraycopy(that.modifiers, 0, this.modifiers, 0, that.type.getLen());\r\n}"},
 {"id":1536, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":521, "classname":"org.jhotdraw.samples.odg.io.ODGInputFormat", "methodid":4972, "methodname":"org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}"},
 {"id":1537, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":521, "classname":"org.jhotdraw.samples.odg.io.ODGInputFormat", "methodid":4973, "methodname":"org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}"},
 {"id":1538, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":521, "classname":"org.jhotdraw.samples.odg.io.ODGInputFormat", "methodid":4971, "methodname":"org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = ((InputStream) (t.getTransferData(new DataFlavor(\"application/vnd.oasis.opendocument.graphics\", \"Image SVG\"))));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}"},
 {"id":1539, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":521, "classname":"org.jhotdraw.samples.odg.io.ODGInputFormat", "methodid":4974, "methodname":"org.jhotdraw.samples.odg.io.ODGInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    // Read the file into a byte array.\r\n    byte[] tmp = readAllBytes(in);\r\n    // Input stream of the content.xml file\r\n    InputStream contentIn = null;\r\n    // Input stream of the styles.xml file\r\n    InputStream stylesIn = null;\r\n    // Try to read \"tmp\" as a ZIP-File.\r\n    boolean isZipped = true;\r\n    try {\r\n        ZipInputStream zin = new ZipInputStream(new ByteArrayInputStream(tmp));\r\n        for (ZipEntry entry; null != (entry = zin.getNextEntry());) {\r\n            if (entry.getName().equals(\"content.xml\")) {\r\n                contentIn = new ByteArrayInputStream(readAllBytes(zin));\r\n            } else\r\n                if (entry.getName().equals(\"styles.xml\")) {\r\n                    stylesIn = new ByteArrayInputStream(readAllBytes(zin));\r\n                }\r\n\r\n        }\r\n    } catch (ZipException e) {\r\n        isZipped = false;\r\n    }\r\n    if (contentIn == null) {\r\n        contentIn = new ByteArrayInputStream(tmp);\r\n    }\r\n    if (stylesIn == null) {\r\n        stylesIn = new ByteArrayInputStream(tmp);\r\n    }\r\n    styles = new ODGStylesReader();\r\n    styles.read(stylesIn);\r\n    readFiguresFromDocumentContent(contentIn, drawing, replace);\r\n}"},
 {"id":1540, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":521, "classname":"org.jhotdraw.samples.odg.io.ODGInputFormat", "methodid":4984, "methodname":"org.jhotdraw.samples.odg.io.ODGInputFormat.readFiguresFromDocumentContent(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Reads figures from the content.xml file of an ODG open document drawing\r\n * document.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic void readFiguresFromDocumentContent(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    this.figures = new LinkedList<Figure>();\r\n    IXMLParser parser;\r\n    try {\r\n        parser = XMLParserFactory.createDefaultXMLParser();\r\n    } catch (Exception ex) {\r\n        InternalError e = new InternalError(\"Unable to instantiate NanoXML Parser\");\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    IXMLReader reader = new StdXMLReader(in);\r\n    parser.setReader(reader);\r\n    try {\r\n        document = ((IXMLElement) (parser.parse()));\r\n    } catch (XMLException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    if ((styles) == null) {\r\n        styles = new ODGStylesReader();\r\n    }\r\n    styles.read(document);\r\n    // Search for the first office:drawing element in the XML document\r\n    // in preorder sequence\r\n    IXMLElement drawingElem = document;\r\n    Stack<Iterator> stack = new Stack<Iterator>();\r\n    LinkedList<IXMLElement> ll = new LinkedList<IXMLElement>();\r\n    ll.add(document);\r\n    stack.push(ll.iterator());\r\n    while ((!(stack.empty())) && (stack.peek().hasNext())) {\r\n        Iterator<IXMLElement> iter = stack.peek();\r\n        IXMLElement node = iter.next();\r\n        Iterator<IXMLElement> children = node.getChildren().iterator();\r\n        if (!(iter.hasNext())) {\r\n            stack.pop();\r\n        }\r\n        if (children.hasNext()) {\r\n            stack.push(children);\r\n        }\r\n        if ((((node.getName()) != null) && (node.getName().equals(\"drawing\"))) && (((node.getNamespace()) == null) || (node.getNamespace().equals(ODGConstants.OFFICE_NAMESPACE)))) {\r\n            drawingElem = node;\r\n            break;\r\n        }\r\n    } \r\n    if ((((drawingElem.getName()) == null) || (!(drawingElem.getName().equals(\"drawing\")))) || (((drawingElem.getNamespace()) != null) && (!(drawingElem.getNamespace().equals(ODGConstants.OFFICE_NAMESPACE))))) {\r\n        throw new IOException((\"office:drawing element expected: \" + (drawingElem.getName())));\r\n    }\r\n    readDrawingElement(drawingElem);\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n}"},
 {"id":1541, "parametername":"StreamPosTokenizer tt", "parametertype":"org.jhotdraw.io.StreamPosTokenizer", "parameterclass":448, "classid":521, "classname":"org.jhotdraw.samples.odg.io.ODGInputFormat", "methodid":4970, "methodname":"org.jhotdraw.samples.odg.io.ODGInputFormat.nextEnhancedCoordinate(org.jhotdraw.io.StreamPosTokenizer,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Retrieves an enhanced coordinate from the specified tokenizer.\r\n * An enhanced coordinate can be a double, or a ? followed by a\r\n * formula name, or a $ followed by an index to a modifier.\r\n */\r\nprivate Object nextEnhancedCoordinate(StreamPosTokenizer tt, String str) throws IOException {\r\n    switch (tt.nextToken()) {\r\n        case ? :\r\n            {\r\n                StringBuilder buf = new StringBuilder();\r\n                buf.append(?);\r\n                int ch = tt.nextChar();\r\n                for (; (((ch >= a) && (ch <= z)) || ((ch >= A) && (ch <= Z))) || ((ch >= 0) && (ch <= 9)); ch = tt.nextChar()) {\r\n                    buf.append(((char) (ch)));\r\n                }\r\n                tt.pushCharBack(ch);\r\n                return buf.toString();\r\n            }\r\n        case $ :\r\n            {\r\n                StringBuilder buf = new StringBuilder();\r\n                buf.append($);\r\n                int ch = tt.nextChar();\r\n                for (; (ch >= 0) && (ch <= 9); ch = tt.nextChar()) {\r\n                    buf.append(((char) (ch)));\r\n                }\r\n                tt.pushCharBack(ch);\r\n                return buf.toString();\r\n            }\r\n        case StreamPosTokenizer.TT_NUMBER :\r\n            return tt.nval;\r\n        default :\r\n            throw new IOException((((\"coordinate missing at position\" + (tt.getStartPosition())) + \" in \") + str));\r\n    }\r\n}"},
 {"id":1542, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":525, "classname":"org.jhotdraw.samples.pert.PertApplet", "methodid":5043, "methodname":"org.jhotdraw.samples.pert.PertApplet.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"private void setDrawing(Drawing d) {\r\n    drawingPanel.setDrawing(d);\r\n}"},
 {"id":1543, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":525, "classname":"org.jhotdraw.samples.pert.PertApplet", "methodid":5040, "methodname":"org.jhotdraw.samples.pert.PertApplet.initDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Configure Drawing object to support copy and paste.\r\n */\r\nprivate void initDrawing(Drawing d) {\r\n    LinkedList<InputFormat> inputFormats = new LinkedList<InputFormat>();\r\n    LinkedList<OutputFormat> outputFormats = new LinkedList<OutputFormat>();\r\n    DOMStorableInputOutputFormat ioFormat = new DOMStorableInputOutputFormat(new PertFactory());\r\n    inputFormats.add(ioFormat);\r\n    outputFormats.add(ioFormat);\r\n    outputFormats.add(new ImageOutputFormat());\r\n    d.setInputFormats(inputFormats);\r\n    d.setOutputFormats(outputFormats);\r\n}"},
 {"id":1544, "parametername":"Tool t", "parametertype":"org.jhotdraw.draw.Tool", "parameterclass":262, "classid":526, "classname":"org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener", "methodid":5052, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}"},
 {"id":1545, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":526, "classname":"org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener", "methodid":5052, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel$ToolButtonListener.-init-(org.jhotdraw.draw.Tool,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public ToolButtonListener(Tool t, DrawingEditor editor) {\r\n    this.tool = t;\r\n    this.editor = editor;\r\n}"},
 {"id":1546, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":527, "classname":"org.jhotdraw.samples.pert.PertApplicationModel", "methodid":5050, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel.initApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"public void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    AbstractAction aa;\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n    putAction(\"toggleGrid\", (aa = new ToggleViewPropertyAction(a, PertView.GRID_VISIBLE_PROPERTY)));\r\n    drawLabels.configureAction(aa, \"view.toggleGrid\");\r\n    for (double sf : PertApplicationModel.scaleFactors) {\r\n        putAction((((int) (sf * 100)) + \"%\"), (aa = new ViewPropertyAction(a, \"scaleFactor\", Double.TYPE, new Double(sf))));\r\n        aa.putValue(Action.NAME, (((int) (sf * 100)) + \" %\"));\r\n    }\r\n}"},
 {"id":1547, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":527, "classname":"org.jhotdraw.samples.pert.PertApplicationModel", "methodid":5051, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((PertView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}"},
 {"id":1548, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":527, "classname":"org.jhotdraw.samples.pert.PertApplicationModel", "methodid":5051, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public void initView(Application a, View p) {\r\n    if (a.isSharingToolsAmongViews()) {\r\n        ((PertView) (p)).setEditor(getSharedEditor());\r\n    }\r\n}"},
 {"id":1549, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":527, "classname":"org.jhotdraw.samples.pert.PertApplicationModel", "methodid":5046, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TaskFigure(), attributes), \"edit.createTask\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new DependencyFigure(), attributes), \"edit.createDependency\", labels);\r\n    tb.addSeparator();\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", drawLabels);\r\n}"},
 {"id":1550, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":527, "classname":"org.jhotdraw.samples.pert.PertApplicationModel", "methodid":5048, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    PertView p = ((PertView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":1551, "parametername":"View pr", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":527, "classname":"org.jhotdraw.samples.pert.PertApplicationModel", "methodid":5048, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class always returns an empty list. Subclasses may return other\r\n * values.\r\n */\r\npublic List<JToolBar> createToolBars(Application a, View pr) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    PertView p = ((PertView) (pr));\r\n    DrawingEditor editor;\r\n    if (p == null) {\r\n        editor = getSharedEditor();\r\n    } else {\r\n        editor = p.getEditor();\r\n    }\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    JToolBar tb;\r\n    tb = new JToolBar();\r\n    addCreationButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.drawToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAttributesButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.attributesToolBar.title\"));\r\n    list.add(tb);\r\n    tb = new JToolBar();\r\n    ButtonFactory.addAlignmentButtonsTo(tb, editor);\r\n    tb.setName(drawLabels.getString(\"window.alignmentToolBar.title\"));\r\n    list.add(tb);\r\n    return list;\r\n}"},
 {"id":1552, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":527, "classname":"org.jhotdraw.samples.pert.PertApplicationModel", "methodid":5047, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    PertView p = ((PertView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : PertApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}"},
 {"id":1553, "parametername":"View pr", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":527, "classname":"org.jhotdraw.samples.pert.PertApplicationModel", "methodid":5047, "methodname":"org.jhotdraw.samples.pert.PertApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"public List<JMenu> createMenus(Application a, View pr) {\r\n    // FIXME - Add code for unconfiguring the menus!! We leak memory!\r\n    PertView p = ((PertView) (pr));\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    // JMenuBar mb = new JMenuBar();\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    mb.add(createEditMenu(a, pr));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(\"toggleGrid\"));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(\"toggleGrid\"));\r\n    m.add(cbmi);\r\n    m2 = new JMenu(\"Zoom\");\r\n    for (double sf : PertApplicationModel.scaleFactors) {\r\n        String id = ((int) (sf * 100)) + \"%\";\r\n        cbmi = new JCheckBoxMenuItem(getAction(id));\r\n        Actions.configureJCheckBoxMenuItem(cbmi, getAction(id));\r\n        m2.add(cbmi);\r\n    }\r\n    m.add(m2);\r\n    mb.add(m);\r\n    return mb;\r\n}"},
 {"id":1554, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":529, "classname":"org.jhotdraw.samples.pert.PertPanel", "methodid":5061, "methodname":"org.jhotdraw.samples.pert.PertPanel.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}"},
 {"id":1555, "parametername":"final DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":529, "classname":"org.jhotdraw.samples.pert.PertPanel", "methodid":5056, "methodname":"org.jhotdraw.samples.pert.PertPanel.addCreationButtonsTo(javax.swing.JToolBar,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"private void addCreationButtonsTo(JToolBar tb, final DrawingEditor editor) {\r\n    // AttributeKeys for the entitie sets\r\n    HashMap<AttributeKey, Object> attributes;\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.pert.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ButtonFactory.addSelectionToolTo(tb, editor);\r\n    tb.addSeparator();\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.FILL_COLOR, Color.white);\r\n    attributes.put(AttributeKeys.STROKE_COLOR, Color.black);\r\n    attributes.put(AttributeKeys.TEXT_COLOR, Color.black);\r\n    ButtonFactory.addToolTo(tb, editor, new CreationTool(new TaskFigure(), attributes), \"edit.createTask\", labels);\r\n    attributes = new HashMap<AttributeKey, Object>();\r\n    attributes.put(AttributeKeys.STROKE_COLOR, new Color(153));\r\n    ButtonFactory.addToolTo(tb, editor, new ConnectionTool(new DependencyFigure(), attributes), \"edit.createDependency\", labels);\r\n    tb.addSeparator();\r\n    ButtonFactory.addToolTo(tb, editor, new TextAreaCreationTool(new TextAreaFigure()), \"edit.createTextArea\", drawLabels);\r\n}"},
 {"id":1556, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":530, "classname":"org.jhotdraw.samples.pert.PertView", "methodid":5076, "methodname":"org.jhotdraw.samples.pert.PertView.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n}"},
 {"id":1557, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":531, "classname":"org.jhotdraw.samples.pert.figures.DependencyFigure", "methodid":5083, "methodname":"org.jhotdraw.samples.pert.figures.DependencyFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Checks if two figures can be connected. Implement this method\r\n * to constrain the allowed connections between figures.\r\n */\r\n@Override\r\npublic boolean canConnect(Connector start, Connector end) {\r\n    if (((start.getOwner()) instanceof TaskFigure) && ((end.getOwner()) instanceof TaskFigure)) {\r\n        TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n        TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n        // Disallow multiple connections to same dependent\r\n        if (ef.getPredecessors().contains(sf)) {\r\n            return false;\r\n        }\r\n        // Disallow cyclic connections\r\n        return !(sf.isDependentOf(ef));\r\n    }\r\n    return false;\r\n}"},
 {"id":1558, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":531, "classname":"org.jhotdraw.samples.pert.figures.DependencyFigure", "methodid":5083, "methodname":"org.jhotdraw.samples.pert.figures.DependencyFigure.canConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Checks if two figures can be connected. Implement this method\r\n * to constrain the allowed connections between figures.\r\n */\r\n@Override\r\npublic boolean canConnect(Connector start, Connector end) {\r\n    if (((start.getOwner()) instanceof TaskFigure) && ((end.getOwner()) instanceof TaskFigure)) {\r\n        TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n        TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n        // Disallow multiple connections to same dependent\r\n        if (ef.getPredecessors().contains(sf)) {\r\n            return false;\r\n        }\r\n        // Disallow cyclic connections\r\n        return !(sf.isDependentOf(ef));\r\n    }\r\n    return false;\r\n}"},
 {"id":1559, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":531, "classname":"org.jhotdraw.samples.pert.figures.DependencyFigure", "methodid":5082, "methodname":"org.jhotdraw.samples.pert.figures.DependencyFigure.canConnect(org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"@Override\r\npublic boolean canConnect(Connector start) {\r\n    return (start.getOwner()) instanceof TaskFigure;\r\n}"},
 {"id":1560, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":531, "classname":"org.jhotdraw.samples.pert.figures.DependencyFigure", "methodid":5087, "methodname":"org.jhotdraw.samples.pert.figures.DependencyFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.removeDependency(this);\r\n    ef.removeDependency(this);\r\n}"},
 {"id":1561, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":531, "classname":"org.jhotdraw.samples.pert.figures.DependencyFigure", "methodid":5087, "methodname":"org.jhotdraw.samples.pert.figures.DependencyFigure.handleDisconnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Handles the disconnection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleDisconnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.removeDependency(this);\r\n    ef.removeDependency(this);\r\n}"},
 {"id":1562, "parametername":"Connector start", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":531, "classname":"org.jhotdraw.samples.pert.figures.DependencyFigure", "methodid":5086, "methodname":"org.jhotdraw.samples.pert.figures.DependencyFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleConnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.addDependency(this);\r\n    ef.addDependency(this);\r\n}"},
 {"id":1563, "parametername":"Connector end", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":531, "classname":"org.jhotdraw.samples.pert.figures.DependencyFigure", "methodid":5086, "methodname":"org.jhotdraw.samples.pert.figures.DependencyFigure.handleConnect(org.jhotdraw.draw.Connector,org.jhotdraw.draw.Connector)", "isreturn":0, "sourcecode":"/**\r\n * Handles the connection of a connection.\r\n * Override this method to handle this event.\r\n */\r\n@Override\r\nprotected void handleConnect(Connector start, Connector end) {\r\n    TaskFigure sf = ((TaskFigure) (start.getOwner()));\r\n    TaskFigure ef = ((TaskFigure) (end.getOwner()));\r\n    sf.addDependency(this);\r\n    ef.addDependency(this);\r\n}"},
 {"id":1564, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":531, "classname":"org.jhotdraw.samples.pert.figures.DependencyFigure", "methodid":5088, "methodname":"org.jhotdraw.samples.pert.figures.DependencyFigure.removeNotify(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"@Override\r\npublic void removeNotify(Drawing d) {\r\n    if ((getStartFigure()) != null) {\r\n        ((TaskFigure) (getStartFigure())).removeDependency(this);\r\n    }\r\n    if ((getEndFigure()) != null) {\r\n        ((TaskFigure) (getEndFigure())).removeDependency(this);\r\n    }\r\n    super.removeNotify(d);\r\n}"},
 {"id":1565, "parametername":"TaskFigure target", "parametertype":"org.jhotdraw.samples.pert.figures.TaskFigure", "parameterclass":535, "classid":534, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter", "methodid":5118, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter.-init-(org.jhotdraw.samples.pert.figures.TaskFigure)", "isreturn":0, "sourcecode":"public NameAdapter(TaskFigure target) {\r\n    this.target = target;\r\n}"},
 {"id":1566, "parametername":"TaskFigure target", "parametertype":"org.jhotdraw.samples.pert.figures.TaskFigure", "parameterclass":535, "classid":533, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter", "methodid":5116, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter.-init-(org.jhotdraw.samples.pert.figures.TaskFigure)", "isreturn":0, "sourcecode":"public DurationAdapter(TaskFigure target) {\r\n    this.target = target;\r\n}"},
 {"id":1567, "parametername":"FigureEvent e", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":534, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter", "methodid":5119, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure$NameAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void attributeChanged(FigureEvent e) {\r\n    // We could fire a property change event here, in case\r\n    // some other object would like to observe us.\r\n    // target.firePropertyChange(\"name\", e.getOldValue(), e.getNewValue());\r\n}"},
 {"id":1568, "parametername":"FigureEvent evt", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":533, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter", "methodid":5117, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure$DurationAdapter.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    // We could fire a property change event here, in case\r\n    // some other object would like to observe us.\r\n    // target.firePropertyChange(\"duration\", e.getOldValue(), e.getNewValue());\r\n    for (TaskFigure succ : target.getSuccessors()) {\r\n        succ.updateStartTime();\r\n    }\r\n}"},
 {"id":1569, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":535, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure", "methodid":5095, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure.applyAttributes(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\nprivate void applyAttributes(Figure f) {\r\n    Map<AttributeKey, Object> attr = ((AbstractAttributedFigure) (getPresentationFigure())).getAttributes();\r\n    for (Map.Entry<AttributeKey, Object> entry : attr.entrySet()) {\r\n        entry.getKey().basicSet(f, entry.getValue());\r\n    }\r\n}"},
 {"id":1570, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":535, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure", "methodid":5109, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(DOMInput in) throws IOException {\r\n    double x = in.getAttribute(\"x\", 0.0);\r\n    double y = in.getAttribute(\"y\", 0.0);\r\n    double w = in.getAttribute(\"w\", 0.0);\r\n    double h = in.getAttribute(\"h\", 0.0);\r\n    setBounds(new Point2D.Double(x, y), new Point2D.Double((x + w), (y + h)));\r\n    readAttributes(in);\r\n    in.openElement(\"model\");\r\n    in.openElement(\"name\");\r\n    setName(((String) (in.readObject())));\r\n    in.closeElement();\r\n    in.openElement(\"duration\");\r\n    setDuration(((Integer) (in.readObject())));\r\n    in.closeElement();\r\n    in.closeElement();\r\n}"},
 {"id":1571, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":535, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure", "methodid":5115, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException {\r\n    Rectangle2D.Double r = getBounds();\r\n    out.addAttribute(\"x\", r.x);\r\n    out.addAttribute(\"y\", r.y);\r\n    writeAttributes(out);\r\n    out.openElement(\"model\");\r\n    out.openElement(\"name\");\r\n    out.writeObject(getName());\r\n    out.closeElement();\r\n    out.openElement(\"duration\");\r\n    out.writeObject(getDuration());\r\n    out.closeElement();\r\n    out.closeElement();\r\n}"},
 {"id":1572, "parametername":"DependencyFigure f", "parametertype":"org.jhotdraw.samples.pert.figures.DependencyFigure", "parameterclass":531, "classid":535, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure", "methodid":5094, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure.addDependency(org.jhotdraw.samples.pert.figures.DependencyFigure)", "isreturn":0, "sourcecode":"public void addDependency(DependencyFigure f) {\r\n    dependencies.add(f);\r\n    updateStartTime();\r\n}"},
 {"id":1573, "parametername":"DependencyFigure f", "parametertype":"org.jhotdraw.samples.pert.figures.DependencyFigure", "parameterclass":531, "classid":535, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure", "methodid":5110, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure.removeDependency(org.jhotdraw.samples.pert.figures.DependencyFigure)", "isreturn":0, "sourcecode":"public void removeDependency(DependencyFigure f) {\r\n    dependencies.remove(f);\r\n    updateStartTime();\r\n}"},
 {"id":1574, "parametername":"TaskFigure t", "parametertype":"org.jhotdraw.samples.pert.figures.TaskFigure", "parameterclass":535, "classid":535, "classname":"org.jhotdraw.samples.pert.figures.TaskFigure", "methodid":5108, "methodname":"org.jhotdraw.samples.pert.figures.TaskFigure.isDependentOf(org.jhotdraw.samples.pert.figures.TaskFigure)", "isreturn":0, "sourcecode":"/**\r\n * Returns true, if the current task is a direct or\r\n * indirect dependent of the specified task.\r\n * If the dependency is cyclic, then this method returns true\r\n * if <code>this</code> is passed as a parameter and for every other\r\n * task in the cycle.\r\n */\r\npublic boolean isDependentOf(TaskFigure t) {\r\n    if ((this) == t) {\r\n        return true;\r\n    }\r\n    for (TaskFigure pre : getPredecessors()) {\r\n        if (pre.isDependentOf(t)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":1575, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":536, "classname":"org.jhotdraw.samples.svg.Gradient", "methodid":5121, "methodname":"org.jhotdraw.samples.svg.Gradient.getPaint(org.jhotdraw.draw.Figure,double)", "isreturn":0, "sourcecode":"public Paint getPaint(Figure f, double opacity);"},
 {"id":1576, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":536, "classname":"org.jhotdraw.samples.svg.Gradient", "methodid":5123, "methodname":"org.jhotdraw.samples.svg.Gradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void makeRelativeToFigureBounds(Figure f);"},
 {"id":1577, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":537, "classname":"org.jhotdraw.samples.svg.LinearGradient", "methodid":5130, "methodname":"org.jhotdraw.samples.svg.LinearGradient.getPaint(org.jhotdraw.draw.Figure,double)", "isreturn":0, "sourcecode":"public Paint getPaint(Figure f, double opacity) {\r\n    // No stops, like fill = none\r\n    if ((stopColors.length) == 0) {\r\n        return new Color(0, true);\r\n    }\r\n    // Compute colors and fractions for the paint\r\n    Color[] colors = new Color[stopColors.length];\r\n    float[] fractions = new float[stopColors.length];\r\n    float previousFraction = 0;\r\n    for (int i = 0; i < (stopColors.length); i++) {\r\n        // Each fraction must be larger or equal the previous fraction.\r\n        fractions[i] = Math.min(1.0F, Math.max(previousFraction, ((float) (stopOffsets[i]))));\r\n        colors[i] = new Color((((stopColors[i].getRGB()) & 16777215) | (((int) ((opacity * (stopOpacities[i])) * 255)) << 24)), true);\r\n        previousFraction = fractions[i];\r\n    }\r\n    // Compute the dimensions and transforms for the paint\r\n    Point2D.Double p1;\r\n    Point2D.Double p2;\r\n    p1 = new Point2D.Double(x1, y1);\r\n    p2 = new Point2D.Double(x2, y2);\r\n    AffineTransform t = transform;\r\n    if (isRelativeToFigureBounds) {\r\n        t = ((AffineTransform) (t.clone()));\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        t.translate(bounds.x, bounds.y);\r\n        t.scale(bounds.width, bounds.height);\r\n    }\r\n    // Construct a solid color, if only one stop color is given, or if\r\n    // transform is not invertible\r\n    if (((stopColors.length) == 1) || ((t.getDeterminant()) == 0)) {\r\n        return colors[0];\r\n    }\r\n    // Construct a gradient\r\n    LinearGradientPaint gp;\r\n    gp = new <org.apache.batik.ext.awt.LinearGradientPaint, org.apache.batik.ext.awt.LinearGradientPaint>LinearGradientPaint(p1, p2, fractions, colors, t);\r\n    return gp;\r\n}"},
 {"id":1578, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":537, "classname":"org.jhotdraw.samples.svg.LinearGradient", "methodid":5141, "methodname":"org.jhotdraw.samples.svg.LinearGradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void makeRelativeToFigureBounds(Figure f) {\r\n    if (!(isRelativeToFigureBounds)) {\r\n        isRelativeToFigureBounds = true;\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        x1 = ((x1) - (bounds.x)) / (bounds.width);\r\n        y1 = ((y1) - (bounds.y)) / (bounds.height);\r\n        x2 = ((x2) - (bounds.x)) / (bounds.width);\r\n        y2 = ((y2) - (bounds.y)) / (bounds.height);\r\n    }\r\n}"},
 {"id":1579, "parametername":"LinearGradient that", "parametertype":"org.jhotdraw.samples.svg.LinearGradient", "parameterclass":537, "classid":537, "classname":"org.jhotdraw.samples.svg.LinearGradient", "methodid":5129, "methodname":"org.jhotdraw.samples.svg.LinearGradient.equals(org.jhotdraw.samples.svg.LinearGradient)", "isreturn":0, "sourcecode":"public boolean equals(LinearGradient that) {\r\n    return (((((((((x1) == (that.x1)) && ((y1) == (that.y1))) && ((x2) == (that.x2))) && ((y2) == (that.y2))) && ((isRelativeToFigureBounds) == (that.isRelativeToFigureBounds))) && (Arrays.equals(stopOffsets, that.stopOffsets))) && (Arrays.equals(stopOpacities, that.stopOpacities))) && (Arrays.equals(stopColors, that.stopColors))) && (transform.equals(that.transform));\r\n}"},
 {"id":1580, "parametername":"SVGPathFigure pathPrototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":539, "classname":"org.jhotdraw.samples.svg.PathTool", "methodid":5150, "methodname":"org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}"},
 {"id":1581, "parametername":"SVGBezierFigure bezierPrototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGBezierFigure", "parameterclass":559, "classid":539, "classname":"org.jhotdraw.samples.svg.PathTool", "methodid":5150, "methodname":"org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype) {\r\n    this(pathPrototype, bezierPrototype, null);\r\n}"},
 {"id":1582, "parametername":"SVGPathFigure pathPrototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":539, "classname":"org.jhotdraw.samples.svg.PathTool", "methodid":5151, "methodname":"org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}"},
 {"id":1583, "parametername":"SVGBezierFigure bezierPrototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGBezierFigure", "parameterclass":559, "classid":539, "classname":"org.jhotdraw.samples.svg.PathTool", "methodid":5151, "methodname":"org.jhotdraw.samples.svg.PathTool.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.samples.svg.figures.SVGBezierFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic PathTool(SVGPathFigure pathPrototype, SVGBezierFigure bezierPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(bezierPrototype, attributes);\r\n    this.pathPrototype = pathPrototype;\r\n}"},
 {"id":1584, "parametername":"BezierFigure createdFigure", "parametertype":"org.jhotdraw.draw.BezierFigure", "parameterclass":118, "classid":539, "classname":"org.jhotdraw.samples.svg.PathTool", "methodid":5153, "methodname":"org.jhotdraw.samples.svg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG) {\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n    }\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n    creationView.addToSelection(createdPath);\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}"},
 {"id":1585, "parametername":"DrawingView creationView", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":539, "classname":"org.jhotdraw.samples.svg.PathTool", "methodid":5153, "methodname":"org.jhotdraw.samples.svg.PathTool.finishCreation(org.jhotdraw.draw.BezierFigure,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"@Override\r\nprotected void finishCreation(BezierFigure createdFigure, DrawingView creationView) {\r\n    if (PathTool.DEBUG) {\r\n        System.out.println((\"PathTool.finishCreation \" + createdFigure));\r\n    }\r\n    creationView.getDrawing().remove(createdFigure);\r\n    SVGPathFigure createdPath = createPath();\r\n    createdPath.removeAllChildren();\r\n    createdPath.add(createdFigure);\r\n    creationView.getDrawing().add(createdPath);\r\n    fireUndoEvent(createdPath, creationView);\r\n    creationView.addToSelection(createdPath);\r\n    if (isToolDoneAfterCreation()) {\r\n        fireToolDone();\r\n    }\r\n}"},
 {"id":1586, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":540, "classname":"org.jhotdraw.samples.svg.RadialGradient", "methodid":5171, "methodname":"org.jhotdraw.samples.svg.RadialGradient.makeRelativeToFigureBounds(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"public void makeRelativeToFigureBounds(Figure f) {\r\n    if (!(isRelativeToFigureBounds)) {\r\n        isRelativeToFigureBounds = true;\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        cx = ((cx) - (bounds.x)) / (bounds.width);\r\n        cy = ((cy) - (bounds.y)) / (bounds.height);\r\n        r = (r) / (Math.sqrt(((((bounds.width) * (bounds.width)) / 2.0) + (((bounds.height) * (bounds.height)) / 2.0))));\r\n    }\r\n}"},
 {"id":1587, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":540, "classname":"org.jhotdraw.samples.svg.RadialGradient", "methodid":5163, "methodname":"org.jhotdraw.samples.svg.RadialGradient.getPaint(org.jhotdraw.draw.Figure,double)", "isreturn":0, "sourcecode":"public Paint getPaint(Figure f, double opacity) {\r\n    if (((stopColors.length) == 0) || ((r) <= 0)) {\r\n        return new Color(-1600086016, true);\r\n    }\r\n    // Compute colors and fractions for the paint\r\n    Color[] colors = new Color[stopColors.length];\r\n    float[] fractions = new float[stopColors.length];\r\n    for (int i = 0; i < (stopColors.length); i++) {\r\n        fractions[i] = ((float) (stopOffsets[i]));\r\n        colors[i] = new Color((((stopColors[i].getRGB()) & 16777215) | (((int) ((opacity * (stopOpacities[i])) * 255)) << 24)), true);\r\n    }\r\n    // Compute the dimensions and transforms for the paint\r\n    Point2D.Double cp;\r\n    Point2D.Double fp;\r\n    double rr;\r\n    cp = new Point2D.Double(cx, cy);\r\n    fp = new Point2D.Double(fx, fy);\r\n    rr = r;\r\n    AffineTransform t = transform;\r\n    if (isRelativeToFigureBounds) {\r\n        if (!(t.isIdentity()))\r\n            System.out.println((((\"RadialGradient \" + (hashCode())) + \" t=\") + t));\r\n\r\n        t = new AffineTransform();\r\n        Rectangle2D.Double bounds = f.getBounds();\r\n        t.translate(bounds.x, bounds.y);\r\n        t.scale(bounds.width, bounds.height);\r\n    }\r\n    // Construct a solid color, if only one stop color is given, or if\r\n    // transform is not invertible\r\n    if (((stopColors.length) == 1) || ((t.getDeterminant()) == 0)) {\r\n        return colors[0];\r\n    }\r\n    // Construct the paint\r\n    RadialGradientPaint gp;\r\n    gp = new <org.apache.batik.ext.awt.RadialGradientPaint, org.apache.batik.ext.awt.RadialGradientPaint>RadialGradientPaint(cp, ((float) (rr)), fp, fractions, colors, t);\r\n    return gp;\r\n}"},
 {"id":1588, "parametername":"RadialGradient that", "parametertype":"org.jhotdraw.samples.svg.RadialGradient", "parameterclass":540, "classid":540, "classname":"org.jhotdraw.samples.svg.RadialGradient", "methodid":5158, "methodname":"org.jhotdraw.samples.svg.RadialGradient.equals(org.jhotdraw.samples.svg.RadialGradient)", "isreturn":0, "sourcecode":"public boolean equals(RadialGradient that) {\r\n    return ((((((((((cx) == (that.cx)) && ((cy) == (that.cy))) && ((fx) == (that.fx))) && ((fy) == (that.fy))) && ((r) == (that.r))) && ((isRelativeToFigureBounds) == (that.isRelativeToFigureBounds))) && (Arrays.equals(stopOffsets, that.stopOffsets))) && (Arrays.equals(stopOpacities, that.stopOpacities))) && (Arrays.equals(stopColors, that.stopColors))) && (transform.equals(that.transform));\r\n}"},
 {"id":1589, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":541, "classname":"org.jhotdraw.samples.svg.SVGApplet", "methodid":5193, "methodname":"org.jhotdraw.samples.svg.SVGApplet.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Sets the drawing on the drawing panel.\r\n */\r\nprivate void setDrawing(Drawing d) {\r\n    drawingComponent.setDrawing(d);\r\n}"},
 {"id":1590, "parametername":"ProgressIndicator progress", "parametertype":"org.jhotdraw.samples.svg.gui.ProgressIndicator", "parameterclass":594, "classid":541, "classname":"org.jhotdraw.samples.svg.SVGApplet", "methodid":5191, "methodname":"org.jhotdraw.samples.svg.SVGApplet.loadDrawing(org.jhotdraw.samples.svg.gui.ProgressIndicator)", "isreturn":0, "sourcecode":"/**\r\n * Loads the drawing.\r\n * By convention this method is invoked on a worker thread.\r\n *\r\n * @param progress\r\n * \t\tA ProgressIndicator to inform the user about the progress\r\n * \t\tof the operation.\r\n * @return The Drawing that was loaded.\r\n */\r\nprotected Drawing loadDrawing(ProgressIndicator progress) throws IOException {\r\n    Drawing drawing = createDrawing();\r\n    InputStream in = null;\r\n    try {\r\n        if ((getParameter(\"datafile\")) != null) {\r\n            ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n            URLConnection uc = url.openConnection();\r\n            // Disable caching. This ensures that we always request the\r\n            // newest version of the drawing from the server.\r\n            // (Note: The server still needs to set the proper HTTP caching\r\n            // properties to prevent proxies from caching the drawing).\r\n            if (uc instanceof HttpURLConnection) {\r\n                ((HttpURLConnection) (uc)).setUseCaches(false);\r\n            }\r\n            // Read the data into a buffer\r\n            int contentLength = uc.getContentLength();\r\n            in = uc.getInputStream();\r\n            if (contentLength != (-1)) {\r\n                in = new BoundedRangeInputStream(in);\r\n                ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                progress.setIndeterminate(false);\r\n            }\r\n            BufferedInputStream bin = new BufferedInputStream(in);\r\n            bin.mark(512);\r\n            // Read the data using all supported input formats\r\n            // until we succeed\r\n            final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n            IOException formatException = null;\r\n            for (InputFormat format : drawing.getInputFormats()) {\r\n                try {\r\n                    bin.reset();\r\n                } catch (IOException e) {\r\n                    uc = url.openConnection();\r\n                    in = uc.getInputStream();\r\n                    in = new BoundedRangeInputStream(in);\r\n                    ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                    progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                    bin = new BufferedInputStream(in);\r\n                    bin.mark(512);\r\n                }\r\n                try {\r\n                    bin.reset();\r\n                    format.read(bin, drawing, true);\r\n                    formatException = null;\r\n                    break;\r\n                } catch (IOException e) {\r\n                    formatException = e;\r\n                }\r\n            }\r\n            if (formatException != null) {\r\n                throw formatException;\r\n            }\r\n        }\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    return drawing;\r\n}"},
 {"id":1591, "parametername":"org.jhotdraw.draw.Drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":541, "classname":"org.jhotdraw.samples.svg.SVGApplet", "methodid":5191, "methodname":"org.jhotdraw.samples.svg.SVGApplet.loadDrawing(org.jhotdraw.samples.svg.gui.ProgressIndicator)", "isreturn":1, "sourcecode":"/**\r\n * Loads the drawing.\r\n * By convention this method is invoked on a worker thread.\r\n *\r\n * @param progress\r\n * \t\tA ProgressIndicator to inform the user about the progress\r\n * \t\tof the operation.\r\n * @return The Drawing that was loaded.\r\n */\r\nprotected Drawing loadDrawing(ProgressIndicator progress) throws IOException {\r\n    Drawing drawing = createDrawing();\r\n    InputStream in = null;\r\n    try {\r\n        if ((getParameter(\"datafile\")) != null) {\r\n            ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n            URL url = new URL(getDocumentBase(), getParameter(\"datafile\"));\r\n            URLConnection uc = url.openConnection();\r\n            // Disable caching. This ensures that we always request the\r\n            // newest version of the drawing from the server.\r\n            // (Note: The server still needs to set the proper HTTP caching\r\n            // properties to prevent proxies from caching the drawing).\r\n            if (uc instanceof HttpURLConnection) {\r\n                ((HttpURLConnection) (uc)).setUseCaches(false);\r\n            }\r\n            // Read the data into a buffer\r\n            int contentLength = uc.getContentLength();\r\n            in = uc.getInputStream();\r\n            if (contentLength != (-1)) {\r\n                in = new BoundedRangeInputStream(in);\r\n                ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                progress.setIndeterminate(false);\r\n            }\r\n            BufferedInputStream bin = new BufferedInputStream(in);\r\n            bin.mark(512);\r\n            // Read the data using all supported input formats\r\n            // until we succeed\r\n            final ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n            IOException formatException = null;\r\n            for (InputFormat format : drawing.getInputFormats()) {\r\n                try {\r\n                    bin.reset();\r\n                } catch (IOException e) {\r\n                    uc = url.openConnection();\r\n                    in = uc.getInputStream();\r\n                    in = new BoundedRangeInputStream(in);\r\n                    ((BoundedRangeInputStream) (in)).setMaximum((contentLength + 1));\r\n                    progress.setProgressModel(((BoundedRangeModel) (in)));\r\n                    bin = new BufferedInputStream(in);\r\n                    bin.mark(512);\r\n                }\r\n                try {\r\n                    bin.reset();\r\n                    format.read(bin, drawing, true);\r\n                    formatException = null;\r\n                    break;\r\n                } catch (IOException e) {\r\n                    formatException = e;\r\n                }\r\n            }\r\n            if (formatException != null) {\r\n                throw formatException;\r\n            }\r\n        }\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    return drawing;\r\n}"},
 {"id":1592, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5203, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic void initView(Application a, View p) {\r\n    SVGView v = ((SVGView) (p));\r\n    if (a.isSharingToolsAmongViews()) {\r\n        v.setEditor(getSharedEditor());\r\n    }\r\n    p.putAction(SelectSameAction.ID, new SelectSameAction(v.getEditor()));\r\n}"},
 {"id":1593, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5203, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic void initView(Application a, View p) {\r\n    SVGView v = ((SVGView) (p));\r\n    if (a.isSharingToolsAmongViews()) {\r\n        v.setEditor(getSharedEditor());\r\n    }\r\n    p.putAction(SelectSameAction.ID, new SelectSameAction(v.getEditor()));\r\n}"},
 {"id":1594, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5202, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.initApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"@Override\r\npublic void initApplication(Application a) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    AbstractAction aa;\r\n    gridConstrainer = new GridConstrainer(12, 12);\r\n    putAction(ClearSelectionAction.ID, new ClearSelectionAction());\r\n    putAction(ViewSourceAction.ID, new ViewSourceAction(a));\r\n    putAction(ExportAction.ID, new ExportAction(a));\r\n}"},
 {"id":1595, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5195, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createDrawingActions(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public Collection<Action> createDrawingActions(Application app, DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectAllAction());\r\n    a.add(new ClearSelectionAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}"},
 {"id":1596, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5195, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createDrawingActions(org.jhotdraw.app.Application,org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public Collection<Action> createDrawingActions(Application app, DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new CutAction());\r\n    a.add(new CopyAction());\r\n    a.add(new PasteAction());\r\n    a.add(new SelectAllAction());\r\n    a.add(new ClearSelectionAction());\r\n    a.add(new SelectSameAction(editor));\r\n    return a;\r\n}"},
 {"id":1597, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5198, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createSelectionActions(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}"},
 {"id":1598, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5197, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic List<JMenu> createMenus(Application a, View pr) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    mb.add(createEditMenu(a, pr));\r\n    mb.add(createViewMenu(a, pr));\r\n    return mb;\r\n}"},
 {"id":1599, "parametername":"View pr", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5197, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic List<JMenu> createMenus(Application a, View pr) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    mb.add(createEditMenu(a, pr));\r\n    mb.add(createViewMenu(a, pr));\r\n    return mb;\r\n}"},
 {"id":1600, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5200, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createViewMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JMenu createViewMenu(Application a, View p) {\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    Action action;\r\n    ResourceBundleUtil appLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil svgLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    m = new JMenu();\r\n    appLabels.configureMenu(m, \"view\");\r\n    m.add(getAction(ViewSourceAction.ID));\r\n    return m;\r\n}"},
 {"id":1601, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5200, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createViewMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"protected JMenu createViewMenu(Application a, View p) {\r\n    JMenu m;\r\n    JMenu m2;\r\n    JMenuItem mi;\r\n    JRadioButtonMenuItem rbmi;\r\n    JCheckBoxMenuItem cbmi;\r\n    ButtonGroup group;\r\n    Action action;\r\n    ResourceBundleUtil appLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.app.Labels\");\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    ResourceBundleUtil svgLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    m = new JMenu();\r\n    appLabels.configureMenu(m, \"view\");\r\n    m.add(getAction(ViewSourceAction.ID));\r\n    return m;\r\n}"},
 {"id":1602, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5196, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JMenu m = super.createEditMenu(a, p);\r\n    JMenuItem mi;\r\n    mi = m.add(getAction(ClearSelectionAction.ID));\r\n    mi.setIcon(null);\r\n    if (p != null) {\r\n        mi = m.add(p.getAction(SelectSameAction.ID));\r\n    } else {\r\n        mi = new JMenuItem();\r\n        drawLabels.configureMenu(mi, SelectSameAction.ID);\r\n        mi.setEnabled(false);\r\n        m.add(mi);\r\n    }\r\n    mi.setIcon(null);\r\n    return m;\r\n}"},
 {"id":1603, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5196, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createEditMenu(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\nprotected JMenu createEditMenu(Application a, View p) {\r\n    ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n    JMenu m = super.createEditMenu(a, p);\r\n    JMenuItem mi;\r\n    mi = m.add(getAction(ClearSelectionAction.ID));\r\n    mi.setIcon(null);\r\n    if (p != null) {\r\n        mi = m.add(p.getAction(SelectSameAction.ID));\r\n    } else {\r\n        mi = new JMenuItem();\r\n        drawLabels.configureMenu(mi, SelectSameAction.ID);\r\n        mi.setEnabled(false);\r\n        m.add(mi);\r\n    }\r\n    mi.setIcon(null);\r\n    return m;\r\n}"},
 {"id":1604, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5199, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Overriden to create no toolbars.\r\n *\r\n * @param app\r\n * \t\t\r\n * @param p\r\n * \t\t\r\n * @return An empty list.\r\n */\r\n@Override\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    return list;\r\n}"},
 {"id":1605, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":542, "classname":"org.jhotdraw.samples.svg.SVGApplicationModel", "methodid":5199, "methodname":"org.jhotdraw.samples.svg.SVGApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Overriden to create no toolbars.\r\n *\r\n * @param app\r\n * \t\t\r\n * @param p\r\n * \t\t\r\n * @return An empty list.\r\n */\r\n@Override\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    LinkedList<JToolBar> list = new LinkedList<JToolBar>();\r\n    return list;\r\n}"},
 {"id":1606, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":545, "classname":"org.jhotdraw.samples.svg.SVGAttributeKeys", "methodid":5205, "methodname":"org.jhotdraw.samples.svg.SVGAttributeKeys.getFillPaint(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Gets the fill paint for the specified figure based on the attributes\r\n * FILL_GRADIENT, FILL_OPACITY, FILL_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getFillPaint(Figure f) {\r\n    double opacity = SVGAttributeKeys.FILL_OPACITY.get(f);\r\n    if ((SVGAttributeKeys.FILL_GRADIENT.get(f)) != null) {\r\n        return SVGAttributeKeys.FILL_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.FILL_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}"},
 {"id":1607, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":545, "classname":"org.jhotdraw.samples.svg.SVGAttributeKeys", "methodid":5207, "methodname":"org.jhotdraw.samples.svg.SVGAttributeKeys.getStrokePaint(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Gets the stroke paint for the specified figure based on the attributes\r\n * STROKE_GRADIENT, STROKE_OPACITY, STROKE_PAINT and the bounds of the figure.\r\n * Returns null if the figure is not filled.\r\n */\r\npublic static Paint getStrokePaint(Figure f) {\r\n    double opacity = SVGAttributeKeys.STROKE_OPACITY.get(f);\r\n    if ((SVGAttributeKeys.STROKE_GRADIENT.get(f)) != null) {\r\n        return SVGAttributeKeys.STROKE_GRADIENT.get(f).getPaint(f, opacity);\r\n    }\r\n    Color color = AttributeKeys.STROKE_COLOR.get(f);\r\n    if (color != null) {\r\n        if (opacity != 1) {\r\n            color = new Color((((color.getRGB()) & 16777215) | (((int) (opacity * 255)) << 24)), true);\r\n        }\r\n    }\r\n    return color;\r\n}"},
 {"id":1608, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":545, "classname":"org.jhotdraw.samples.svg.SVGAttributeKeys", "methodid":5208, "methodname":"org.jhotdraw.samples.svg.SVGAttributeKeys.setDefaults(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Sets SVG default values.\r\n */\r\npublic static void setDefaults(Figure f) {\r\n    // Fill properties\r\n    // http://www.w3.org/TR/SVGMobile12/painting.html#FillProperties\r\n    AttributeKeys.FILL_COLOR.basicSet(f, Color.black);\r\n    AttributeKeys.WINDING_RULE.basicSet(f, AttributeKeys.WindingRule.NON_ZERO);\r\n    // Stroke properties\r\n    // http://www.w3.org/TR/SVGMobile12/painting.html#StrokeProperties\r\n    AttributeKeys.STROKE_COLOR.basicSet(f, null);\r\n    AttributeKeys.STROKE_WIDTH.basicSet(f, 1.0);\r\n    AttributeKeys.STROKE_CAP.basicSet(f, BasicStroke.CAP_BUTT);\r\n    AttributeKeys.STROKE_JOIN.basicSet(f, BasicStroke.JOIN_MITER);\r\n    AttributeKeys.STROKE_MITER_LIMIT.basicSet(f, 4.0);\r\n    AttributeKeys.IS_STROKE_MITER_LIMIT_FACTOR.basicSet(f, false);\r\n    AttributeKeys.STROKE_DASHES.basicSet(f, null);\r\n    AttributeKeys.STROKE_DASH_PHASE.basicSet(f, 0.0);\r\n    AttributeKeys.IS_STROKE_DASH_FACTOR.basicSet(f, false);\r\n}"},
 {"id":1609, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":545, "classname":"org.jhotdraw.samples.svg.SVGAttributeKeys", "methodid":5206, "methodname":"org.jhotdraw.samples.svg.SVGAttributeKeys.getPerpendicularHitGrowth(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Returns the distance, that a Rectangle needs to grow (or shrink) to\r\n * make hit detections on a shape as specified by the FILL_UNDER_STROKE and STROKE_POSITION\r\n * attributes of a figure.\r\n * The value returned is the number of units that need to be grown (or shrunk)\r\n * perpendicular to a stroke on an outline of the shape.\r\n */\r\npublic static double getPerpendicularHitGrowth(Figure f) {\r\n    double grow;\r\n    if (((AttributeKeys.STROKE_COLOR.get(f)) == null) && ((SVGAttributeKeys.STROKE_GRADIENT.get(f)) == null)) {\r\n        grow = AttributeKeys.getPerpendicularFillGrowth(f);\r\n    } else {\r\n        double strokeWidth = AttributeKeys.getStrokeTotalWidth(f);\r\n        grow = (AttributeKeys.getPerpendicularDrawGrowth(f)) + (strokeWidth / 2.0);\r\n    }\r\n    return grow;\r\n}"},
 {"id":1610, "parametername":"ImageHolderFigure imagePrototype", "parametertype":"org.jhotdraw.draw.ImageHolderFigure", "parameterclass":199, "classid":547, "classname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool", "methodid":5212, "methodname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype) {\r\n    super(imagePrototype);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}"},
 {"id":1611, "parametername":"CompositeFigure groupPrototype", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":547, "classname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool", "methodid":5212, "methodname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype) {\r\n    super(imagePrototype);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}"},
 {"id":1612, "parametername":"ImageHolderFigure imagePrototype", "parametertype":"org.jhotdraw.draw.ImageHolderFigure", "parameterclass":199, "classid":547, "classname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool", "methodid":5213, "methodname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(imagePrototype, attributes);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}"},
 {"id":1613, "parametername":"CompositeFigure groupPrototype", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":547, "classname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool", "methodid":5213, "methodname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool.-init-(org.jhotdraw.draw.ImageHolderFigure,org.jhotdraw.draw.CompositeFigure,java.util.Map)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SVGCreateFromFileTool(ImageHolderFigure imagePrototype, CompositeFigure groupPrototype, Map<AttributeKey, Object> attributes) {\r\n    super(imagePrototype, attributes);\r\n    this.groupPrototype = groupPrototype;\r\n    this.imagePrototype = imagePrototype;\r\n}"},
 {"id":1614, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":547, "classname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool", "methodid":5215, "methodname":"org.jhotdraw.samples.svg.SVGCreateFromFileTool.activate(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void activate(DrawingEditor editor) {\r\n    super.activate(editor);\r\n    if ((workerThread) != null) {\r\n        try {\r\n            workerThread.join();\r\n        } catch (InterruptedException ex) {\r\n            // ignore\r\n        }\r\n    }\r\n    final File file;\r\n    if (useFileDialog) {\r\n        getFileDialog().setVisible(true);\r\n        if ((getFileDialog().getFile()) != null) {\r\n            file = new File(getFileDialog().getDirectory(), getFileDialog().getFile());\r\n        } else {\r\n            file = null;\r\n        }\r\n    } else {\r\n        if ((getFileChooser().showOpenDialog(getView().getComponent())) == (JFileChooser.APPROVE_OPTION)) {\r\n            file = getFileChooser().getSelectedFile();\r\n        } else {\r\n            file = null;\r\n        }\r\n    }\r\n    if (file != null) {\r\n        Worker worker;\r\n        if ((file.getName().toLowerCase().endsWith(\".svg\")) || (file.getName().toLowerCase().endsWith(\".svgz\"))) {\r\n            prototype = ((Figure) (groupPrototype.clone()));\r\n            worker = new Worker() {\r\n                public Object construct() {\r\n                    Drawing drawing = new DefaultDrawing();\r\n                    try {\r\n                        InputFormat in = (file.getName().toLowerCase().endsWith(\".svg\")) ? new SVGInputFormat() : new SVGZInputFormat();\r\n                        in.read(file, drawing);\r\n                    } catch (Throwable t) {\r\n                        return t;\r\n                    }\r\n                    return drawing;\r\n                }\r\n\r\n                public void finished(Object value) {\r\n                    if (value instanceof Throwable) {\r\n                        Throwable t = ((Throwable) (value));\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        getDrawing().remove(createdFigure);\r\n                        fireToolDone();\r\n                    } else {\r\n                        Drawing drawing = ((Drawing) (value));\r\n                        CompositeFigure parent;\r\n                        if ((createdFigure) == null) {\r\n                            parent = ((CompositeFigure) (prototype));\r\n                            for (Figure f : drawing.getChildren()) {\r\n                                parent.basicAdd(f);\r\n                            }\r\n                        } else {\r\n                            parent = ((CompositeFigure) (createdFigure));\r\n                            parent.willChange();\r\n                            for (Figure f : drawing.getChildren()) {\r\n                                parent.add(f);\r\n                            }\r\n                            parent.changed();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        } else {\r\n            prototype = imagePrototype;\r\n            final ImageHolderFigure loaderFigure = ((ImageHolderFigure) (prototype.clone()));\r\n            worker = new Worker() {\r\n                public Object construct() {\r\n                    try {\r\n                        ((ImageHolderFigure) (loaderFigure)).loadImage(file);\r\n                    } catch (Throwable t) {\r\n                        return t;\r\n                    }\r\n                    return null;\r\n                }\r\n\r\n                public void finished(Object value) {\r\n                    if (value instanceof Throwable) {\r\n                        Throwable t = ((Throwable) (value));\r\n                        JOptionPane.showMessageDialog(getView().getComponent(), t.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        getDrawing().remove(createdFigure);\r\n                        fireToolDone();\r\n                    } else {\r\n                        try {\r\n                            if ((createdFigure) == null) {\r\n                                ((ImageHolderFigure) (prototype)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                            } else {\r\n                                ((ImageHolderFigure) (createdFigure)).setImage(loaderFigure.getImageData(), loaderFigure.getBufferedImage());\r\n                            }\r\n                        } catch (IOException ex) {\r\n                            JOptionPane.showMessageDialog(getView().getComponent(), ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        workerThread = new Thread(worker);\r\n        workerThread.start();\r\n    } else {\r\n        // getDrawing().remove(createdFigure);\r\n        if (isToolDoneAfterCreation()) {\r\n            fireToolDone();\r\n        }\r\n    }\r\n}"},
 {"id":1615, "parametername":"Drawing d", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":549, "classname":"org.jhotdraw.samples.svg.SVGDrawingPanel", "methodid":5228, "methodname":"org.jhotdraw.samples.svg.SVGDrawingPanel.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void setDrawing(Drawing d) {\r\n    undoManager.discardAllEdits();\r\n    view.getDrawing().removeUndoableEditListener(undoManager);\r\n    view.setDrawing(d);\r\n    d.addUndoableEditListener(undoManager);\r\n}"},
 {"id":1616, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":549, "classname":"org.jhotdraw.samples.svg.SVGDrawingPanel", "methodid":5229, "methodname":"org.jhotdraw.samples.svg.SVGDrawingPanel.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = editor;\r\n    if (oldValue != null) {\r\n        oldValue.remove(view);\r\n    }\r\n    editor = newValue;\r\n    if (newValue != null) {\r\n        newValue.add(view);\r\n    }\r\n    creationToolBar.setEditor(editor);\r\n    fillToolBar.setEditor(editor);\r\n    strokeToolBar.setEditor(editor);\r\n    actionToolBar.setUndoManager(undoManager);\r\n    actionToolBar.setEditor(editor);\r\n    alignToolBar.setEditor(editor);\r\n    arrangeToolBar.setEditor(editor);\r\n    fontToolBar.setEditor(editor);\r\n    figureToolBar.setEditor(editor);\r\n    linkToolBar.setEditor(editor);\r\n    DrawingView temp = editor.getActiveView();\r\n    editor.setActiveView(view);\r\n    canvasToolBar.setEditor(editor);\r\n    viewToolBar.setEditor(editor);\r\n    editor.setActiveView(temp);\r\n}"},
 {"id":1617, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":552, "classname":"org.jhotdraw.samples.svg.SVGView", "methodid":5272, "methodname":"org.jhotdraw.samples.svg.SVGView.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor newValue) {\r\n    svgPanel.setEditor(newValue);\r\n}"},
 {"id":1618, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5276, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic CombineAction(DrawingEditor editor) {\r\n    this(editor, new SVGPathFigure(true), true);\r\n}"},
 {"id":1619, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5277, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"public CombineAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    this(editor, prototype, true);\r\n}"},
 {"id":1620, "parametername":"SVGPathFigure prototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5277, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"public CombineAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    this(editor, prototype, true);\r\n}"},
 {"id":1621, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5278, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)", "isreturn":0, "sourcecode":"public CombineAction(DrawingEditor editor, SVGPathFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isCombineAction = isGroupingAction;\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, CombineAction.ID);\r\n}"},
 {"id":1622, "parametername":"SVGPathFigure prototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5278, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)", "isreturn":0, "sourcecode":"public CombineAction(DrawingEditor editor, SVGPathFigure prototype, boolean isGroupingAction) {\r\n    super(editor);\r\n    this.prototype = prototype;\r\n    this.isCombineAction = isGroupingAction;\r\n    labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\", Locale.getDefault());\r\n    labels.configureAction(this, CombineAction.ID);\r\n}"},
 {"id":1623, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5286, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.splitPath(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.List,int[],int[])", "isreturn":0, "sourcecode":"public void splitPath(DrawingView view, CompositeFigure group, List<Figure> ungroupedPaths, int[] ungroupedPathsIndices, int[] ungroupedPathsChildCounts) {\r\n    view.clearSelection();\r\n    Iterator<Figure> groupedFigures = new LinkedList<Figure>(group.getChildren()).iterator();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().remove(group);\r\n    for (int i = 0; i < (ungroupedPaths.size()); i++) {\r\n        CompositeFigure path = ((CompositeFigure) (ungroupedPaths.get(i)));\r\n        view.getDrawing().add(ungroupedPathsIndices[i], path);\r\n        path.willChange();\r\n        for (int j = 0; j < (ungroupedPathsChildCounts[i]); j++) {\r\n            path.basicAdd(groupedFigures.next());\r\n        }\r\n        path.changed();\r\n    }\r\n    view.addToSelection(ungroupedPaths);\r\n}"},
 {"id":1624, "parametername":"CompositeFigure group", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5286, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.splitPath(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.List,int[],int[])", "isreturn":0, "sourcecode":"public void splitPath(DrawingView view, CompositeFigure group, List<Figure> ungroupedPaths, int[] ungroupedPathsIndices, int[] ungroupedPathsChildCounts) {\r\n    view.clearSelection();\r\n    Iterator<Figure> groupedFigures = new LinkedList<Figure>(group.getChildren()).iterator();\r\n    group.basicRemoveAllChildren();\r\n    view.getDrawing().remove(group);\r\n    for (int i = 0; i < (ungroupedPaths.size()); i++) {\r\n        CompositeFigure path = ((CompositeFigure) (ungroupedPaths.get(i)));\r\n        view.getDrawing().add(ungroupedPathsIndices[i], path);\r\n        path.willChange();\r\n        for (int j = 0; j < (ungroupedPathsChildCounts[i]); j++) {\r\n            path.basicAdd(groupedFigures.next());\r\n        }\r\n        path.changed();\r\n    }\r\n    view.addToSelection(ungroupedPaths);\r\n}"},
 {"id":1625, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5284, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.combinePaths(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection,int)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic void combinePaths(DrawingView view, CompositeFigure group, Collection<Figure> figures, int groupIndex) {\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(groupIndex, group);\r\n    group.willChange();\r\n    group.basicRemoveAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : figures) {\r\n        SVGPathFigure path = ((SVGPathFigure) (f));\r\n        List<Figure> children = new LinkedList<Figure>(path.getChildren());\r\n        path.basicRemoveAllChildren();\r\n        for (Figure child : children) {\r\n            SVGBezierFigure bez = ((SVGBezierFigure) (child));\r\n            bez.flattenTransform();\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}"},
 {"id":1626, "parametername":"CompositeFigure group", "parametertype":"org.jhotdraw.draw.CompositeFigure", "parameterclass":136, "classid":553, "classname":"org.jhotdraw.samples.svg.action.CombineAction", "methodid":5284, "methodname":"org.jhotdraw.samples.svg.action.CombineAction.combinePaths(org.jhotdraw.draw.DrawingView,org.jhotdraw.draw.CompositeFigure,java.util.Collection,int)", "isreturn":0, "sourcecode":"@SuppressWarnings(\"unchecked\")\r\npublic void combinePaths(DrawingView view, CompositeFigure group, Collection<Figure> figures, int groupIndex) {\r\n    view.getDrawing().basicRemoveAll(figures);\r\n    view.clearSelection();\r\n    view.getDrawing().add(groupIndex, group);\r\n    group.willChange();\r\n    group.basicRemoveAllChildren();\r\n    for (Map.Entry<AttributeKey, Object> entry : figures.iterator().next().getAttributes().entrySet()) {\r\n        group.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Figure f : figures) {\r\n        SVGPathFigure path = ((SVGPathFigure) (f));\r\n        List<Figure> children = new LinkedList<Figure>(path.getChildren());\r\n        path.basicRemoveAllChildren();\r\n        for (Figure child : children) {\r\n            SVGBezierFigure bez = ((SVGBezierFigure) (child));\r\n            bez.flattenTransform();\r\n            group.basicAdd(child);\r\n        }\r\n    }\r\n    group.changed();\r\n    view.addToSelection(group);\r\n}"},
 {"id":1627, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":554, "classname":"org.jhotdraw.samples.svg.action.SplitAction", "methodid":5288, "methodname":"org.jhotdraw.samples.svg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SplitAction(DrawingEditor editor) {\r\n    super(editor, new SVGPathFigure(), false);\r\n    labels.configureAction(this, SplitAction.ID);\r\n}"},
 {"id":1628, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":554, "classname":"org.jhotdraw.samples.svg.action.SplitAction", "methodid":5289, "methodname":"org.jhotdraw.samples.svg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"public SplitAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, SplitAction.ID);\r\n}"},
 {"id":1629, "parametername":"SVGPathFigure prototype", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":554, "classname":"org.jhotdraw.samples.svg.action.SplitAction", "methodid":5289, "methodname":"org.jhotdraw.samples.svg.action.SplitAction.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"public SplitAction(DrawingEditor editor, SVGPathFigure prototype) {\r\n    super(editor, prototype, false);\r\n    labels.configureAction(this, SplitAction.ID);\r\n}"},
 {"id":1630, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":555, "classname":"org.jhotdraw.samples.svg.action.ViewSourceAction", "methodid":5290, "methodname":"org.jhotdraw.samples.svg.action.ViewSourceAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ViewSourceAction(Application app) {\r\n    super(app);\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.svg.Labels\");\r\n    labels.configureAction(this, ViewSourceAction.ID);\r\n}"},
 {"id":1631, "parametername":"SVGPathFigure owner", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5293, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner) {\r\n    this(owner, false, false);\r\n}"},
 {"id":1632, "parametername":"SVGPathFigure owner", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5294, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, boolean isTransformHandle, boolean isHoverHandle) {\r\n    super(owner);\r\n    if (isTransformHandle) {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;\r\n    } else {\r\n        if (isHoverHandle) {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;\r\n        } else {\r\n            stroke1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;\r\n            strokeColor1Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;\r\n            stroke2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;\r\n            strokeColor2Enabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;\r\n        }\r\n        stroke1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;\r\n        strokeColor1Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;\r\n        stroke2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;\r\n        strokeColor2Disabled = HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;\r\n    }\r\n}"},
 {"id":1633, "parametername":"SVGPathFigure owner", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1634, "parametername":"// \r\nAttributeKey<Stroke> stroke1Enabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1635, "parametername":"AttributeKey<Color> strokeColor1Enabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1636, "parametername":"// \r\nAttributeKey<Stroke> stroke2Enabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1637, "parametername":"AttributeKey<Color> strokeColor2Enabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1638, "parametername":"// \r\nAttributeKey<Stroke> stroke1Disabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1639, "parametername":"AttributeKey<Color> strokeColor1Disabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1640, "parametername":"// \r\nAttributeKey<Stroke> stroke2Disabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1641, "parametername":"AttributeKey<Color> strokeColor2Disabled", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":556, "classname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle", "methodid":5295, "methodname":"org.jhotdraw.samples.svg.figures.ConvexHullOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"/**\r\n * Creates a bounds outline handle for resizing or transforming a component.\r\n *\r\n * @param owner\r\n * \t\t\r\n */\r\npublic ConvexHullOutlineHandle(SVGPathFigure owner, // \r\nAttributeKey<Stroke> stroke1Enabled, AttributeKey<Color> strokeColor1Enabled, // \r\nAttributeKey<Stroke> stroke2Enabled, AttributeKey<Color> strokeColor2Enabled, // \r\nAttributeKey<Stroke> stroke1Disabled, AttributeKey<Color> strokeColor1Disabled, // \r\nAttributeKey<Stroke> stroke2Disabled, AttributeKey<Color> strokeColor2Disabled) {\r\n    super(owner);\r\n    this.stroke1Enabled = stroke1Enabled;\r\n    this.strokeColor1Enabled = strokeColor1Enabled;\r\n    this.stroke2Enabled = stroke2Enabled;\r\n    this.strokeColor2Enabled = strokeColor2Enabled;\r\n    this.stroke1Disabled = stroke1Disabled;\r\n    this.strokeColor1Disabled = strokeColor1Disabled;\r\n    this.stroke2Disabled = stroke2Disabled;\r\n    this.strokeColor2Disabled = strokeColor2Disabled;\r\n}"},
 {"id":1642, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":557, "classname":"org.jhotdraw.samples.svg.figures.LinkHandle", "methodid":5304, "methodname":"org.jhotdraw.samples.svg.figures.LinkHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic LinkHandle(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":1643, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":558, "classname":"org.jhotdraw.samples.svg.figures.SVGAttributedFigure", "methodid":5318, "methodname":"org.jhotdraw.samples.svg.figures.SVGAttributedFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (key == (AttributeKeys.TRANSFORM)) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}"},
 {"id":1644, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":558, "classname":"org.jhotdraw.samples.svg.figures.SVGAttributedFigure", "methodid":5319, "methodname":"org.jhotdraw.samples.svg.figures.SVGAttributedFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}"},
 {"id":1645, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":558, "classname":"org.jhotdraw.samples.svg.figures.SVGAttributedFigure", "methodid":5317, "methodname":"org.jhotdraw.samples.svg.figures.SVGAttributedFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}"},
 {"id":1646, "parametername":"SVGPathFigure pathFigure", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":559, "classname":"org.jhotdraw.samples.svg.figures.SVGBezierFigure", "methodid":5322, "methodname":"org.jhotdraw.samples.svg.figures.SVGBezierFigure.createHandles(org.jhotdraw.samples.svg.figures.SVGPathFigure,int)", "isreturn":0, "sourcecode":"public Collection<Handle> createHandles(SVGPathFigure pathFigure, int detailLevel) {\r\n    LinkedList<Handle> handles = new LinkedList<Handle>();\r\n    switch (detailLevel % 2) {\r\n        case 0 :\r\n            for (int i = 0, n = path.size(); i < n; i++) {\r\n                handles.add(new BezierNodeHandle(this, i, pathFigure));\r\n            }\r\n            break;\r\n        case 1 :\r\n            TransformHandleKit.addTransformHandles(this, handles);\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return handles;\r\n}"},
 {"id":1647, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":559, "classname":"org.jhotdraw.samples.svg.figures.SVGBezierFigure", "methodid":5326, "methodname":"org.jhotdraw.samples.svg.figures.SVGBezierFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    /* && view.getHandleDetailLevel() == 0 */\r\n    if ((evt.getClickCount()) == 2) {\r\n        willChange();\r\n        // Apply inverse of transform to point\r\n        if ((AttributeKeys.TRANSFORM.get(this)) != null) {\r\n            try {\r\n                p = ((Point2D.Double) (AttributeKeys.TRANSFORM.get(this).inverseTransform(p, new Point2D.Double())));\r\n            } catch (NoninvertibleTransformException ex) {\r\n                System.err.println(\"Warning: SVGBezierFigure.handleMouseClick. Figure has noninvertible Transform.\");\r\n            }\r\n        }\r\n        final int index = splitSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n        if (index != (-1)) {\r\n            final BezierPath.Node newNode = getNode(index);\r\n            fireUndoableEditHappened(new AbstractUndoableEdit() {\r\n                @Override\r\n                public String getPresentationName() {\r\n                    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.draw.Labels\");\r\n                    return labels.getString(\"edit.bezierPath.splitSegment.text\");\r\n                }\r\n\r\n                @Override\r\n                public void redo() throws CannotRedoException {\r\n                    super.redo();\r\n                    willChange();\r\n                    addNode(index, newNode);\r\n                    changed();\r\n                }\r\n\r\n                @Override\r\n                public void undo() throws CannotUndoException {\r\n                    super.undo();\r\n                    willChange();\r\n                    removeNode(index);\r\n                    changed();\r\n                }\r\n            });\r\n            changed();\r\n            evt.consume();\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":1648, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":560, "classname":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure", "methodid":5340, "methodname":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1649, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":560, "classname":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure", "methodid":5340, "methodname":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1650, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":560, "classname":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure", "methodid":5339, "methodname":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1651, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":560, "classname":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure", "methodid":5339, "methodname":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1652, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":562, "classname":"org.jhotdraw.samples.svg.figures.SVGGroupFigure", "methodid":5365, "methodname":"org.jhotdraw.samples.svg.figures.SVGGroupFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T value) {\r\n    if (key == (SVGAttributeKeys.OPACITY)) {\r\n        attributes.put(key, value);\r\n    } else\r\n        if ((key == (SVGAttributeKeys.LINK)) || (key == (SVGAttributeKeys.LINK_TARGET))) {\r\n            attributes.put(key, value);\r\n        } else {\r\n            super.setAttribute(key, value);\r\n        }\r\n\r\n    invalidate();\r\n}"},
 {"id":1653, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":562, "classname":"org.jhotdraw.samples.svg.figures.SVGGroupFigure", "methodid":5360, "methodname":"org.jhotdraw.samples.svg.figures.SVGGroupFigure.getAttribute(org.jhotdraw.draw.AttributeKey)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> T getAttribute(AttributeKey<T> key) {\r\n    return key.get(attributes);\r\n}"},
 {"id":1654, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":562, "classname":"org.jhotdraw.samples.svg.figures.SVGGroupFigure", "methodid":5368, "methodname":"org.jhotdraw.samples.svg.figures.SVGGroupFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}"},
 {"id":1655, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":562, "classname":"org.jhotdraw.samples.svg.figures.SVGGroupFigure", "methodid":5364, "methodname":"org.jhotdraw.samples.svg.figures.SVGGroupFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}"},
 {"id":1656, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":563, "classname":"org.jhotdraw.samples.svg.figures.SVGImageFigure", "methodid":5380, "methodname":"org.jhotdraw.samples.svg.figures.SVGImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1657, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":563, "classname":"org.jhotdraw.samples.svg.figures.SVGImageFigure", "methodid":5380, "methodname":"org.jhotdraw.samples.svg.figures.SVGImageFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1658, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":563, "classname":"org.jhotdraw.samples.svg.figures.SVGImageFigure", "methodid":5379, "methodname":"org.jhotdraw.samples.svg.figures.SVGImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1659, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":563, "classname":"org.jhotdraw.samples.svg.figures.SVGImageFigure", "methodid":5379, "methodname":"org.jhotdraw.samples.svg.figures.SVGImageFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1660, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5434, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void write(DOMOutput out) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableOutput to write this Figure.\");\r\n}"},
 {"id":1661, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5429, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"@Override\r\npublic final void read(DOMInput in) throws IOException {\r\n    throw new UnsupportedOperationException(\"Use SVGStorableInput to read this Figure.\");\r\n}"},
 {"id":1662, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5431, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    super.setAttribute(key, newValue);\r\n    invalidate();\r\n}"},
 {"id":1663, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5418, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1664, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5418, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1665, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5417, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1666, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5417, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1667, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5426, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.handleMouseClick(java.awt.geom.Point2D$Double,java.awt.event.MouseEvent,org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"/**\r\n * Handles a mouse click.\r\n */\r\n@Override\r\npublic boolean handleMouseClick(Point2D.Double p, MouseEvent evt, DrawingView view) {\r\n    if (((evt.getClickCount()) == 2) && (((view.getHandleDetailLevel()) % 2) == 0)) {\r\n        for (Figure child : getChildren()) {\r\n            SVGBezierFigure bf = ((SVGBezierFigure) (child));\r\n            int index = bf.findSegment(p, ((float) (5.0F / (view.getScaleFactor()))));\r\n            if (index != (-1)) {\r\n                bf.handleMouseClick(p, evt, view);\r\n                evt.consume();\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":1668, "parametername":"final Figure figure", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":564, "classname":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "methodid":5407, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathFigure.add(int,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"@Override\r\npublic void add(final int index, final Figure figure) {\r\n    super.add(index, ((SVGBezierFigure) (figure)));\r\n}"},
 {"id":1669, "parametername":"SVGPathFigure owner", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":565, "classname":"org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle", "methodid":5435, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SVGPathOutlineHandle(SVGPathFigure owner) {\r\n    this(owner, false);\r\n}"},
 {"id":1670, "parametername":"SVGPathFigure owner", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":565, "classname":"org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle", "methodid":5436, "methodname":"org.jhotdraw.samples.svg.figures.SVGPathOutlineHandle.-init-(org.jhotdraw.samples.svg.figures.SVGPathFigure,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SVGPathOutlineHandle(SVGPathFigure owner, boolean isHoverHandle) {\r\n    super(owner);\r\n    this.isHoverHandle = isHoverHandle;\r\n}"},
 {"id":1671, "parametername":"Dimension2DDouble arc", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":566, "classname":"org.jhotdraw.samples.svg.figures.SVGRectFigure", "methodid":5472, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectFigure.setArc(org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"public void setArc(Dimension2DDouble arc) {\r\n    roundrect.arcwidth = Math.max(0.0, Math.min(roundrect.width, ((arc.width) * 2.0)));\r\n    roundrect.archeight = Math.max(0.0, Math.min(roundrect.height, ((arc.height) * 2.0)));\r\n}"},
 {"id":1672, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":566, "classname":"org.jhotdraw.samples.svg.figures.SVGRectFigure", "methodid":5454, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1673, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":566, "classname":"org.jhotdraw.samples.svg.figures.SVGRectFigure", "methodid":5454, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1674, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":566, "classname":"org.jhotdraw.samples.svg.figures.SVGRectFigure", "methodid":5453, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1675, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":566, "classname":"org.jhotdraw.samples.svg.figures.SVGRectFigure", "methodid":5453, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1676, "parametername":"Figure owner", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":567, "classname":"org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle", "methodid":5475, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectRadiusHandle.-init-(org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic SVGRectRadiusHandle(Figure owner) {\r\n    super(owner);\r\n}"},
 {"id":1677, "parametername":"SVGRectFigure owner", "parametertype":"org.jhotdraw.samples.svg.figures.SVGRectFigure", "parameterclass":566, "classid":568, "classname":"org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit", "methodid":5484, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.-init-(org.jhotdraw.samples.svg.figures.SVGRectFigure,org.jhotdraw.geom.Dimension2DDouble,org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"public SVGRectRadiusUndoableEdit(SVGRectFigure owner, Dimension2DDouble oldArc, Dimension2DDouble newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}"},
 {"id":1678, "parametername":"Dimension2DDouble oldArc", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":568, "classname":"org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit", "methodid":5484, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.-init-(org.jhotdraw.samples.svg.figures.SVGRectFigure,org.jhotdraw.geom.Dimension2DDouble,org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"public SVGRectRadiusUndoableEdit(SVGRectFigure owner, Dimension2DDouble oldArc, Dimension2DDouble newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}"},
 {"id":1679, "parametername":"Dimension2DDouble newArc", "parametertype":"org.jhotdraw.geom.Dimension2DDouble", "parameterclass":346, "classid":568, "classname":"org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit", "methodid":5484, "methodname":"org.jhotdraw.samples.svg.figures.SVGRectRadiusUndoableEdit.-init-(org.jhotdraw.samples.svg.figures.SVGRectFigure,org.jhotdraw.geom.Dimension2DDouble,org.jhotdraw.geom.Dimension2DDouble)", "isreturn":0, "sourcecode":"public SVGRectRadiusUndoableEdit(SVGRectFigure owner, Dimension2DDouble oldArc, Dimension2DDouble newArc) {\r\n    this.owner = owner;\r\n    this.oldArc = oldArc;\r\n    this.newArc = newArc;\r\n}"},
 {"id":1680, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":569, "classname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure", "methodid":5523, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"public <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if ((((((((key.equals(SVGAttributeKeys.TRANSFORM)) || (key.equals(SVGAttributeKeys.FONT_FACE))) || (key.equals(SVGAttributeKeys.FONT_BOLD))) || (key.equals(SVGAttributeKeys.FONT_ITALIC))) || (key.equals(SVGAttributeKeys.FONT_SIZE))) || (key.equals(SVGAttributeKeys.STROKE_WIDTH))) || (key.equals(SVGAttributeKeys.STROKE_COLOR))) || (key.equals(SVGAttributeKeys.STROKE_GRADIENT))) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}"},
 {"id":1681, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":569, "classname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure", "methodid":5501, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1682, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":569, "classname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure", "methodid":5501, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"public Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1683, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":569, "classname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure", "methodid":5500, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1684, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":569, "classname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure", "methodid":5500, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"public Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1685, "parametername":"AttributeKey<T> key", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":570, "classname":"org.jhotdraw.samples.svg.figures.SVGTextFigure", "methodid":5563, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextFigure.setAttribute(org.jhotdraw.draw.AttributeKey,java.lang.Object)", "isreturn":0, "sourcecode":"@Override\r\npublic <T> void setAttribute(AttributeKey<T> key, T newValue) {\r\n    if (((((key.equals(SVGAttributeKeys.TRANSFORM)) || (key.equals(SVGAttributeKeys.FONT_FACE))) || (key.equals(SVGAttributeKeys.FONT_BOLD))) || (key.equals(SVGAttributeKeys.FONT_ITALIC))) || (key.equals(SVGAttributeKeys.FONT_SIZE))) {\r\n        invalidate();\r\n    }\r\n    super.setAttribute(key, newValue);\r\n}"},
 {"id":1686, "parametername":"ConnectionFigure prototype", "parametertype":"org.jhotdraw.draw.ConnectionFigure", "parameterclass":142, "classid":570, "classname":"org.jhotdraw.samples.svg.figures.SVGTextFigure", "methodid":5539, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":0, "sourcecode":"@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1687, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":570, "classname":"org.jhotdraw.samples.svg.figures.SVGTextFigure", "methodid":5539, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextFigure.findConnector(java.awt.geom.Point2D$Double,org.jhotdraw.draw.ConnectionFigure)", "isreturn":1, "sourcecode":"@Override\r\npublic Connector findConnector(Point2D.Double p, ConnectionFigure prototype) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1688, "parametername":"Connector c", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":570, "classname":"org.jhotdraw.samples.svg.figures.SVGTextFigure", "methodid":5538, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":0, "sourcecode":"@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1689, "parametername":"org.jhotdraw.draw.Connector", "parametertype":"org.jhotdraw.draw.Connector", "parameterclass":145, "classid":570, "classname":"org.jhotdraw.samples.svg.figures.SVGTextFigure", "methodid":5538, "methodname":"org.jhotdraw.samples.svg.figures.SVGTextFigure.findCompatibleConnector(org.jhotdraw.draw.Connector,boolean)", "isreturn":1, "sourcecode":"@Override\r\npublic Connector findCompatibleConnector(Connector c, boolean isStartConnector) {\r\n    return null;// SVG does not support connectors\r\n\r\n}"},
 {"id":1690, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":572, "classname":"org.jhotdraw.samples.svg.gui.AbstractToolBar", "methodid":5580, "methodname":"org.jhotdraw.samples.svg.gui.AbstractToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public void setEditor(DrawingEditor editor) {\r\n    if ((this.editor) != null) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.editor = editor;\r\n    if (editor != null) {\r\n        init();\r\n        setDisclosureState(Math.max(0, Math.min(getDisclosureStateCount(), prefs.getInt(((getID()) + \".disclosureState\"), getDefaultDisclosureState()))));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}"},
 {"id":1691, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":574, "classname":"org.jhotdraw.samples.svg.gui.ActionsToolBar", "methodid":5601, "methodname":"org.jhotdraw.samples.svg.gui.ActionsToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    if (((this.editor) != null) && ((undoManager) != null)) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.editor = newValue;\r\n    if (((editor) != null) && ((undoManager) != null)) {\r\n        init();\r\n        setDisclosureState(prefs.getInt(((getID()) + \".disclosureState\"), 1));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}"},
 {"id":1692, "parametername":"UndoRedoManager newValue", "parametertype":"org.jhotdraw.undo.UndoRedoManager", "parameterclass":641, "classid":574, "classname":"org.jhotdraw.samples.svg.gui.ActionsToolBar", "methodid":5602, "methodname":"org.jhotdraw.samples.svg.gui.ActionsToolBar.setUndoManager(org.jhotdraw.undo.UndoRedoManager)", "isreturn":0, "sourcecode":"public void setUndoManager(UndoRedoManager newValue) {\r\n    if (((this.editor) != null) && (newValue != null)) {\r\n        this.removePropertyChangeListener(getEventHandler());\r\n    }\r\n    this.undoManager = newValue;\r\n    if (((editor) != null) && (newValue != null)) {\r\n        init();\r\n        setDisclosureState(prefs.getInt(((getID()) + \".disclosureState\"), 1));\r\n        this.addPropertyChangeListener(getEventHandler());\r\n    }\r\n}"},
 {"id":1693, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":576, "classname":"org.jhotdraw.samples.svg.gui.AlignToolBar", "methodid":5619, "methodname":"org.jhotdraw.samples.svg.gui.AlignToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n        displayer.setMinSelectionCount(2);\r\n        displayer.setVisibleIfCreationTool(false);\r\n    }\r\n}"},
 {"id":1694, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":578, "classname":"org.jhotdraw.samples.svg.gui.ArrangeToolBar", "methodid":5636, "methodname":"org.jhotdraw.samples.svg.gui.ArrangeToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n        displayer.setVisibleIfCreationTool(false);\r\n    }\r\n}"},
 {"id":1695, "parametername":"Drawing newValue", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":582, "classname":"org.jhotdraw.samples.svg.gui.DrawingComponent", "methodid":5670, "methodname":"org.jhotdraw.samples.svg.gui.DrawingComponent.setDrawing(org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"/**\r\n * Sets the drawing of the DrawingComponent.\r\n */\r\npublic void setDrawing(Drawing newValue);"},
 {"id":1696, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":583, "classname":"org.jhotdraw.samples.svg.gui.DrawingComponentRepainter", "methodid":5671, "methodname":"org.jhotdraw.samples.svg.gui.DrawingComponentRepainter.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)", "isreturn":0, "sourcecode":"public DrawingComponentRepainter(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if (editor != null) {\r\n        if ((editor.getActiveView()) != null) {\r\n            DrawingView view = editor.getActiveView();\r\n            view.addPropertyChangeListener(this);\r\n            if ((view.getDrawing()) != null) {\r\n                view.getDrawing().addFigureListener(this);\r\n            }\r\n        }\r\n        editor.addPropertyChangeListener(this);\r\n    }\r\n}"},
 {"id":1697, "parametername":"FigureEvent evt", "parametertype":"org.jhotdraw.draw.FigureEvent", "parameterclass":176, "classid":583, "classname":"org.jhotdraw.samples.svg.gui.DrawingComponentRepainter", "methodid":5672, "methodname":"org.jhotdraw.samples.svg.gui.DrawingComponentRepainter.attributeChanged(org.jhotdraw.draw.FigureEvent)", "isreturn":0, "sourcecode":"@Override\r\npublic void attributeChanged(FigureEvent evt) {\r\n    component.repaint();\r\n}"},
 {"id":1698, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":584, "classname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon", "methodid":5675, "methodname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param opacityKey\r\n * \t\tThe opacityKey of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param fillShape\r\n * \t\tThe shape to be drawn with the fillColor of the default\r\n * \t\tattribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1699, "parametername":"AttributeKey<Double> opacityKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":584, "classname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon", "methodid":5675, "methodname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param opacityKey\r\n * \t\tThe opacityKey of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param fillShape\r\n * \t\tThe shape to be drawn with the fillColor of the default\r\n * \t\tattribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1700, "parametername":"AttributeKey<Color> fillColorKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":584, "classname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon", "methodid":5675, "methodname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param opacityKey\r\n * \t\tThe opacityKey of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param fillShape\r\n * \t\tThe shape to be drawn with the fillColor of the default\r\n * \t\tattribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1701, "parametername":"AttributeKey<Color> strokeColorKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":584, "classname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon", "methodid":5675, "methodname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param opacityKey\r\n * \t\tThe opacityKey of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param fillShape\r\n * \t\tThe shape to be drawn with the fillColor of the default\r\n * \t\tattribute.\r\n */\r\npublic DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1702, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":584, "classname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon", "methodid":5676, "methodname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1703, "parametername":"AttributeKey<Double> opacityKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":584, "classname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon", "methodid":5676, "methodname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1704, "parametername":"AttributeKey<Color> fillColorKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":584, "classname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon", "methodid":5676, "methodname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1705, "parametername":"AttributeKey<Color> strokeColorKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":584, "classname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon", "methodid":5676, "methodname":"org.jhotdraw.samples.svg.gui.DrawingOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"public DrawingOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1706, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":585, "classname":"org.jhotdraw.samples.svg.gui.FigureToolBar", "methodid":5682, "methodname":"org.jhotdraw.samples.svg.gui.FigureToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}"},
 {"id":1707, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":587, "classname":"org.jhotdraw.samples.svg.gui.FillToolBar", "methodid":5700, "methodname":"org.jhotdraw.samples.svg.gui.FillToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}"},
 {"id":1708, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":589, "classname":"org.jhotdraw.samples.svg.gui.FontToolBar", "methodid":5719, "methodname":"org.jhotdraw.samples.svg.gui.FontToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this) {\r\n            @Override\r\n            public void updateVisibility() {\r\n                boolean newValue = (((editor) != null) && ((editor.getActiveView()) != null)) && (((isVisibleIfCreationTool) && (((editor.getTool()) instanceof TextCreationTool) || ((editor.getTool()) instanceof TextAreaCreationTool))) || (containsTextHolderFigure(editor.getActiveView().getSelectedFigures())));\r\n                component.setVisible(newValue);\r\n                // The following is needed to trick BoxLayout\r\n                if (newValue) {\r\n                    component.setPreferredSize(null);\r\n                } else {\r\n                    component.setPreferredSize(new Dimension(0, 0));\r\n                }\r\n                component.revalidate();\r\n            }\r\n\r\n            private boolean containsTextHolderFigure(Collection<Figure> figures) {\r\n                for (Figure f : figures) {\r\n                    if (f instanceof TextHolderFigure) {\r\n                        return true;\r\n                    } else\r\n                        if (f instanceof CompositeFigure) {\r\n                            if (containsTextHolderFigure(((CompositeFigure) (f)).getChildren())) {\r\n                                return true;\r\n                            }\r\n                        }\r\n\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n    }\r\n}"},
 {"id":1709, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":591, "classname":"org.jhotdraw.samples.svg.gui.LinkToolBar", "methodid":5736, "methodname":"org.jhotdraw.samples.svg.gui.LinkToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}"},
 {"id":1710, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":595, "classname":"org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer", "methodid":5773, "methodname":"org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.-init-(org.jhotdraw.draw.DrawingEditor,javax.swing.JComponent)", "isreturn":0, "sourcecode":"public SelectionComponentDisplayer(DrawingEditor editor, JComponent component) {\r\n    this.editor = editor;\r\n    this.component = component;\r\n    if ((editor.getActiveView()) != null) {\r\n        DrawingView view = editor.getActiveView();\r\n        view.addPropertyChangeListener(this);\r\n        view.addFigureSelectionListener(this);\r\n    }\r\n    editor.addPropertyChangeListener(this);\r\n    updateVisibility();\r\n}"},
 {"id":1711, "parametername":"FigureSelectionEvent evt", "parametertype":"org.jhotdraw.draw.FigureSelectionEvent", "parameterclass":179, "classid":595, "classname":"org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer", "methodid":5776, "methodname":"org.jhotdraw.samples.svg.gui.SelectionComponentDisplayer.selectionChanged(org.jhotdraw.draw.FigureSelectionEvent)", "isreturn":0, "sourcecode":"public void selectionChanged(FigureSelectionEvent evt) {\r\n    updateVisibility();\r\n}"},
 {"id":1712, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":596, "classname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon", "methodid":5780, "methodname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param opacityKey\r\n * \t\tThe opacityKey of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param fillShape\r\n * \t\tThe shape to be drawn with the fillColor of the default\r\n * \t\tattribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1713, "parametername":"AttributeKey<Double> opacityKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":596, "classname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon", "methodid":5780, "methodname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param opacityKey\r\n * \t\tThe opacityKey of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param fillShape\r\n * \t\tThe shape to be drawn with the fillColor of the default\r\n * \t\tattribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1714, "parametername":"AttributeKey<Color> fillColorKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":596, "classname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon", "methodid":5780, "methodname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param opacityKey\r\n * \t\tThe opacityKey of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param fillShape\r\n * \t\tThe shape to be drawn with the fillColor of the default\r\n * \t\tattribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1715, "parametername":"AttributeKey<Color> strokeColorKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":596, "classname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon", "methodid":5780, "methodname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.net.URL,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n *\r\n * @param editor\r\n * \t\tThe drawing editor.\r\n * @param opacityKey\r\n * \t\tThe opacityKey of the default attribute\r\n * @param imageLocation\r\n * \t\tthe icon image\r\n * @param fillShape\r\n * \t\tThe shape to be drawn with the fillColor of the default\r\n * \t\tattribute.\r\n */\r\npublic SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, URL imageLocation, Shape fillShape, Shape strokeShape) {\r\n    super(imageLocation);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1716, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":596, "classname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon", "methodid":5781, "methodname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1717, "parametername":"AttributeKey<Double> opacityKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":596, "classname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon", "methodid":5781, "methodname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1718, "parametername":"AttributeKey<Color> fillColorKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":596, "classname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon", "methodid":5781, "methodname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1719, "parametername":"AttributeKey<Color> strokeColorKey", "parametertype":"org.jhotdraw.draw.AttributeKey", "parameterclass":109, "classid":596, "classname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon", "methodid":5781, "methodname":"org.jhotdraw.samples.svg.gui.SelectionOpacityIcon.-init-(org.jhotdraw.draw.DrawingEditor,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,org.jhotdraw.draw.AttributeKey,java.awt.Image,java.awt.Shape,java.awt.Shape)", "isreturn":0, "sourcecode":"public SelectionOpacityIcon(DrawingEditor editor, AttributeKey<Double> opacityKey, AttributeKey<Color> fillColorKey, AttributeKey<Color> strokeColorKey, Image image, Shape fillShape, Shape strokeShape) {\r\n    super(image);\r\n    this.editor = editor;\r\n    this.opacityKey = opacityKey;\r\n    this.fillColorKey = fillColorKey;\r\n    this.strokeColorKey = strokeColorKey;\r\n    this.fillShape = fillShape;\r\n    this.strokeShape = strokeShape;\r\n}"},
 {"id":1720, "parametername":"DrawingEditor newValue", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":598, "classname":"org.jhotdraw.samples.svg.gui.StrokeToolBar", "methodid":5790, "methodname":"org.jhotdraw.samples.svg.gui.StrokeToolBar.setEditor(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"@Override\r\npublic void setEditor(DrawingEditor newValue) {\r\n    DrawingEditor oldValue = getEditor();\r\n    if ((displayer) != null) {\r\n        displayer.dispose();\r\n        displayer = null;\r\n    }\r\n    super.setEditor(newValue);\r\n    if (newValue != null) {\r\n        displayer = new SelectionComponentDisplayer(editor, this);\r\n    }\r\n}"},
 {"id":1721, "parametername":"DrawingEditor editor", "parametertype":"org.jhotdraw.draw.DrawingEditor", "parameterclass":169, "classid":602, "classname":"org.jhotdraw.samples.svg.gui.ToolsToolBar", "methodid":5820, "methodname":"org.jhotdraw.samples.svg.gui.ToolsToolBar.createSelectionActions(org.jhotdraw.draw.DrawingEditor)", "isreturn":0, "sourcecode":"public static Collection<Action> createSelectionActions(DrawingEditor editor) {\r\n    LinkedList<Action> a = new LinkedList<Action>();\r\n    a.add(new DuplicateAction());\r\n    a.add(null);// separator\r\n\r\n    a.add(new GroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new UngroupAction(editor, new SVGGroupFigure()));\r\n    a.add(new CombineAction(editor));\r\n    a.add(new SplitAction(editor));\r\n    a.add(null);// separator\r\n\r\n    a.add(new BringToFrontAction(editor));\r\n    a.add(new SendToBackAction(editor));\r\n    return a;\r\n}"},
 {"id":1722, "parametername":"DrawingView view", "parametertype":"org.jhotdraw.draw.DrawingView", "parameterclass":171, "classid":604, "classname":"org.jhotdraw.samples.svg.gui.ViewToolBar", "methodid":5840, "methodname":"org.jhotdraw.samples.svg.gui.ViewToolBar.setView(org.jhotdraw.draw.DrawingView)", "isreturn":0, "sourcecode":"public void setView(DrawingView view) {\r\n    this.view = view;\r\n    prefs = Preferences.userNodeForPackage(getClass());\r\n    GridConstrainer constrainer = ((GridConstrainer) (view.getVisibleConstrainer()));\r\n    constrainer.setHeight(prefs.getDouble(\"view.gridSize\", 8.0));\r\n    constrainer.setWidth(prefs.getDouble(\"view.gridSize\", 8.0));\r\n}"},
 {"id":1723, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5914, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}"},
 {"id":1724, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5917, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing.getChildren());\r\n}"},
 {"id":1725, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5918, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.awt.geom.AffineTransform,java.awt.Dimension)", "isreturn":0, "sourcecode":"/**\r\n * Writes the drawing to the specified output stream.\r\n * This method applies the specified drawingTransform to the drawing, and draws\r\n * it on an image of the specified getChildCount.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, AffineTransform drawingTransform, Dimension imageSize) throws IOException {\r\n    write(out, drawing.getChildren(), drawingTransform, imageSize);\r\n}"},
 {"id":1726, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5910, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)", "isreturn":0, "sourcecode":"public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    write(buf, figures);\r\n    return new InputStreamTransferable(new DataFlavor(\"text/html\", \"HTML Image Map\"), buf.toByteArray());\r\n}"},
 {"id":1727, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5920, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected void writeElement(IXMLElement parent, Figure f) throws IOException {\r\n    if (f instanceof SVGEllipseFigure) {\r\n        writeEllipseElement(parent, ((SVGEllipseFigure) (f)));\r\n    } else\r\n        if (f instanceof SVGGroupFigure) {\r\n            writeGElement(parent, ((SVGGroupFigure) (f)));\r\n        } else\r\n            if (f instanceof SVGImageFigure) {\r\n                writeImageElement(parent, ((SVGImageFigure) (f)));\r\n            } else\r\n                if (f instanceof SVGPathFigure) {\r\n                    SVGPathFigure path = ((SVGPathFigure) (f));\r\n                    if ((path.getChildCount()) == 1) {\r\n                        BezierFigure bezier = ((BezierFigure) (path.getChild(0)));\r\n                        boolean isLinear = true;\r\n                        for (int i = 0, n = bezier.getNodeCount(); i < n; i++) {\r\n                            if ((bezier.getNode(i).getMask()) != 0) {\r\n                                isLinear = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isLinear) {\r\n                            if (bezier.isClosed()) {\r\n                                writePolygonElement(parent, path);\r\n                            } else {\r\n                                if ((bezier.getNodeCount()) == 2) {\r\n                                    writeLineElement(parent, path);\r\n                                } else {\r\n                                    writePolylineElement(parent, path);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            writePathElement(parent, path);\r\n                        }\r\n                    } else {\r\n                        writePathElement(parent, path);\r\n                    }\r\n                } else\r\n                    if (f instanceof SVGRectFigure) {\r\n                        writeRectElement(parent, ((SVGRectFigure) (f)));\r\n                    } else\r\n                        if (f instanceof SVGTextFigure) {\r\n                            writeTextElement(parent, ((SVGTextFigure) (f)));\r\n                        } else\r\n                            if (f instanceof SVGTextAreaFigure) {\r\n                                writeTextAreaElement(parent, ((SVGTextAreaFigure) (f)));\r\n                            } else {\r\n                                System.out.println((\"Unable to write: \" + f));\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}"},
 {"id":1728, "parametername":"SVGFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGFigure", "parameterclass":561, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5919, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeCircleAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.geom.Ellipse2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and ellipse.\r\n *\r\n * @return Returns true, if the circle is inside of the image bounds.\r\n */\r\nprivate boolean writeCircleAttributes(IXMLElement elem, SVGFigure f, Ellipse2D.Double ellipse) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    if ((((t.getType()) & ((AffineTransform.TYPE_UNIFORM_SCALE) | (AffineTransform.TYPE_TRANSLATION))) == (t.getType())) && ((ellipse.width) == (ellipse.height))) {\r\n        Point2D.Double start = new Point2D.Double(ellipse.x, ellipse.y);\r\n        Point2D.Double end = new Point2D.Double(((ellipse.x) + (ellipse.width)), ((ellipse.y) + (ellipse.height)));\r\n        t.transform(start, start);\r\n        t.transform(end, end);\r\n        ellipse.x = Math.min(start.x, end.x);\r\n        ellipse.y = Math.min(start.y, end.y);\r\n        ellipse.width = Math.abs(((start.x) - (end.x)));\r\n        ellipse.height = Math.abs(((start.y) - (end.y)));\r\n        elem.setAttribute(\"shape\", \"circle\");\r\n        elem.setAttribute(\"coords\", ((((((int) ((ellipse.x) + ((ellipse.width) / 2.0))) + \",\") + ((int) ((ellipse.y) + ((ellipse.height) / 2.0)))) + \",\") + ((int) ((ellipse.width) / 2.0))));\r\n        writeHrefAttribute(elem, f);\r\n        return bounds.intersects(ellipse.getBounds());\r\n    } else {\r\n        return writePolyAttributes(elem, f, ((Shape) (ellipse)));\r\n    }\r\n}"},
 {"id":1729, "parametername":"SVGFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGFigure", "parameterclass":561, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5930, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeRectAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.geom.Rectangle2D$Double)", "isreturn":0, "sourcecode":"/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and rectangle.\r\n *\r\n * @return Returns true, if the rect is inside of the image bounds.\r\n */\r\nprivate boolean writeRectAttributes(IXMLElement elem, SVGFigure f, Rectangle2D.Double rect) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    if (((t.getType()) & ((AffineTransform.TYPE_UNIFORM_SCALE) | (AffineTransform.TYPE_TRANSLATION))) == (t.getType())) {\r\n        Point2D.Double start = new Point2D.Double(rect.x, rect.y);\r\n        Point2D.Double end = new Point2D.Double(((rect.x) + (rect.width)), ((rect.y) + (rect.height)));\r\n        t.transform(start, start);\r\n        t.transform(end, end);\r\n        Rectangle r = new Rectangle(((int) (Math.min(start.x, end.x))), ((int) (Math.min(start.y, end.y))), ((int) (Math.abs(((start.x) - (end.x))))), ((int) (Math.abs(((start.y) - (end.y))))));\r\n        elem.setAttribute(\"shape\", \"rect\");\r\n        elem.setAttribute(\"coords\", (((((((r.x) + \",\") + (r.y)) + \",\") + ((r.x) + (r.width))) + \",\") + ((r.y) + (r.height))));\r\n        writeHrefAttribute(elem, f);\r\n        return bounds.intersects(r);\r\n    } else {\r\n        return writePolyAttributes(elem, f, ((Shape) (rect)));\r\n    }\r\n}"},
 {"id":1730, "parametername":"SVGFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGFigure", "parameterclass":561, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5923, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeHrefAttribute(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure)", "isreturn":0, "sourcecode":"private void writeHrefAttribute(IXMLElement elem, SVGFigure f) {\r\n    if (((SVGAttributeKeys.LINK.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n        elem.setAttribute(\"href\", SVGAttributeKeys.LINK.get(f));\r\n        elem.setAttribute(\"title\", SVGAttributeKeys.LINK.get(f));\r\n        elem.setAttribute(\"alt\", SVGAttributeKeys.LINK.get(f));\r\n        if (((SVGAttributeKeys.LINK_TARGET.get(f)) != null) && ((SVGAttributeKeys.LINK_TARGET.get(f).trim().length()) > 0)) {\r\n            elem.setAttribute(\"target\", SVGAttributeKeys.LINK_TARGET.get(f));\r\n        }\r\n    } else {\r\n        elem.setAttribute(\"nohref\", \"true\");\r\n    }\r\n}"},
 {"id":1731, "parametername":"SVGFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGFigure", "parameterclass":561, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5927, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolyAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGFigure,java.awt.Shape)", "isreturn":0, "sourcecode":"/**\r\n * Writes the <code>shape</code>, <code>coords</code>, <code>href</code>,\r\n * <code>nohref</code> Attribute for the specified figure and shape.\r\n *\r\n * @return Returns true, if the polygon is inside of the image bounds.\r\n */\r\nprivate boolean writePolyAttributes(IXMLElement elem, SVGFigure f, Shape shape) {\r\n    AffineTransform t = AttributeKeys.TRANSFORM.getClone(f);\r\n    if (t == null) {\r\n        t = drawingTransform;\r\n    } else {\r\n        t.preConcatenate(drawingTransform);\r\n    }\r\n    StringBuilder buf = new StringBuilder();\r\n    float[] coords = new float[6];\r\n    GeneralPath path = new GeneralPath();\r\n    for (PathIterator i = shape.getPathIterator(t, 1.5F); !(i.isDone()); i.next()) {\r\n        switch (i.currentSegment(coords)) {\r\n            case PathIterator.SEG_MOVETO :\r\n                if ((buf.length()) != 0) {\r\n                    throw new IllegalArgumentException((\"Illegal shape \" + shape));\r\n                }\r\n                if ((buf.length()) != 0) {\r\n                    buf.append(,);\r\n                }\r\n                buf.append(((int) (coords[0])));\r\n                buf.append(,);\r\n                buf.append(((int) (coords[1])));\r\n                path.moveTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_LINETO :\r\n                if ((buf.length()) != 0) {\r\n                    buf.append(,);\r\n                }\r\n                buf.append(((int) (coords[0])));\r\n                buf.append(,);\r\n                buf.append(((int) (coords[1])));\r\n                path.lineTo(coords[0], coords[1]);\r\n                break;\r\n            case PathIterator.SEG_CLOSE :\r\n                path.closePath();\r\n                break;\r\n            default :\r\n                throw new InternalError((\"Illegal segment type \" + (i.currentSegment(coords))));\r\n        }\r\n    }\r\n    elem.setAttribute(\"shape\", \"poly\");\r\n    elem.setAttribute(\"coords\", buf.toString());\r\n    writeHrefAttribute(elem, f);\r\n    return path.intersects(new Rectangle2D.Float(bounds.x, bounds.y, bounds.width, bounds.height));\r\n}"},
 {"id":1732, "parametername":"SVGPathFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5926, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePathElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"private void writePathElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    GrowStroke growStroke = new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f))));\r\n    BasicStroke basicStroke = new BasicStroke(((float) (AttributeKeys.getStrokeTotalWidth(f))));\r\n    for (Figure child : f.getChildren()) {\r\n        SVGBezierFigure bezier = ((SVGBezierFigure) (child));\r\n        IXMLElement elem = parent.createElement(\"area\");\r\n        if (bezier.isClosed()) {\r\n            writePolyAttributes(elem, f, growStroke.createStrokedShape(bezier.getBezierPath()));\r\n        } else {\r\n            writePolyAttributes(elem, f, basicStroke.createStrokedShape(bezier.getBezierPath()));\r\n        }\r\n        parent.addChild(elem);\r\n    }\r\n}"},
 {"id":1733, "parametername":"SVGPathFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5928, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolygonElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"private void writePolygonElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(f.getChild(0).getBezierPath()))) {\r\n        parent.addChild(elem);\r\n    }\r\n}"},
 {"id":1734, "parametername":"SVGPathFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5929, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writePolylineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"private void writePolylineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new BasicStroke(((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(f.getChild(0).getBezierPath()))) {\r\n        parent.addChild(elem);\r\n    }\r\n}"},
 {"id":1735, "parametername":"SVGPathFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5925, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeLineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"private void writeLineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    if (writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(new Line2D.Double(f.getStartPoint(), f.getEndPoint())))) {\r\n        parent.addChild(elem);\r\n    }\r\n}"},
 {"id":1736, "parametername":"SVGRectFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGRectFigure", "parameterclass":566, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5931, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeRectElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGRectFigure)", "isreturn":0, "sourcecode":"private void writeRectElement(IXMLElement parent, SVGRectFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    boolean isContained;\r\n    if (((f.getArcHeight()) == 0) && ((f.getArcWidth()) == 0)) {\r\n        Rectangle2D.Double rect = f.getBounds();\r\n        double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n        rect.x -= grow;\r\n        rect.y -= grow;\r\n        rect.width += grow;\r\n        rect.height += grow;\r\n        isContained = writeRectAttributes(elem, f, rect);\r\n    } else {\r\n        isContained = writePolyAttributes(elem, f, new GrowStroke(((float) ((AttributeKeys.getStrokeTotalWidth(f)) / 2.0)), ((float) (AttributeKeys.getStrokeTotalWidth(f)))).createStrokedShape(new RoundRectangle2D.Double(f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getArcWidth(), f.getArcHeight())));\r\n    }\r\n    if (isContained) {\r\n        parent.addChild(elem);\r\n    }\r\n}"},
 {"id":1737, "parametername":"SVGTextFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGTextFigure", "parameterclass":570, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5933, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeTextElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextFigure)", "isreturn":0, "sourcecode":"private void writeTextElement(IXMLElement parent, SVGTextFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    rect.x -= grow;\r\n    rect.y -= grow;\r\n    rect.width += grow;\r\n    rect.height += grow;\r\n    if (writeRectAttributes(elem, f, rect)) {\r\n        parent.addChild(elem);\r\n    }\r\n}"},
 {"id":1738, "parametername":"SVGTextAreaFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure", "parameterclass":569, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5932, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextAreaFigure)", "isreturn":0, "sourcecode":"private void writeTextAreaElement(IXMLElement parent, SVGTextAreaFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"AREA\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    rect.x -= grow;\r\n    rect.y -= grow;\r\n    rect.width += grow;\r\n    rect.height += grow;\r\n    if (writeRectAttributes(elem, f, rect)) {\r\n        parent.addChild(elem);\r\n    }\r\n}"},
 {"id":1739, "parametername":"SVGEllipseFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure", "parameterclass":560, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5921, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)", "isreturn":0, "sourcecode":"private void writeEllipseElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    Rectangle2D.Double r = f.getBounds();\r\n    double grow = SVGAttributeKeys.getPerpendicularHitGrowth(f);\r\n    Ellipse2D.Double ellipse = new Ellipse2D.Double(((r.x) - grow), ((r.y) - grow), ((r.width) + grow), ((r.height) + grow));\r\n    if (writeCircleAttributes(elem, f, ellipse)) {\r\n        parent.addChild(elem);\r\n    }\r\n}"},
 {"id":1740, "parametername":"SVGGroupFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGGroupFigure", "parameterclass":562, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5922, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeGElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGGroupFigure)", "isreturn":0, "sourcecode":"private void writeGElement(IXMLElement parent, SVGGroupFigure f) throws IOException {\r\n    // Note: Image map elements need to be written from front to back\r\n    for (Figure child : new ReversedList<Figure>(f.getChildren())) {\r\n        writeElement(parent, child);\r\n    }\r\n}"},
 {"id":1741, "parametername":"SVGImageFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGImageFigure", "parameterclass":563, "classid":608, "classname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat", "methodid":5924, "methodname":"org.jhotdraw.samples.svg.io.ImageMapOutputFormat.writeImageElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGImageFigure)", "isreturn":0, "sourcecode":"private void writeImageElement(IXMLElement parent, SVGImageFigure f) {\r\n    IXMLElement elem = parent.createElement(\"area\");\r\n    Rectangle2D.Double rect = f.getBounds();\r\n    writeRectAttributes(elem, f, rect);\r\n    parent.addChild(elem);\r\n}"},
 {"id":1742, "parametername":"SVGFigureFactory factory", "parametertype":"org.jhotdraw.samples.svg.io.SVGFigureFactory", "parameterclass":610, "classid":612, "classname":"org.jhotdraw.samples.svg.io.SVGInputFormat", "methodid":5948, "methodname":"org.jhotdraw.samples.svg.io.SVGInputFormat.-init-(org.jhotdraw.samples.svg.io.SVGFigureFactory)", "isreturn":0, "sourcecode":"public SVGInputFormat(SVGFigureFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":1743, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":612, "classname":"org.jhotdraw.samples.svg.io.SVGInputFormat", "methodid":5956, "methodname":"org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing) throws IOException {\r\n    read(file, drawing, true);\r\n}"},
 {"id":1744, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":612, "classname":"org.jhotdraw.samples.svg.io.SVGInputFormat", "methodid":5958, "methodname":"org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"/**\r\n * This is the main reading method.\r\n *\r\n * @param in\r\n * \t\tThe input stream.\r\n * @param drawing\r\n * \t\tThe drawing to which this method adds figures.\r\n * @param replace\r\n * \t\tWhether attributes on the drawing object\r\n * \t\tshould by changed by this method. Set this to false, when reading individual\r\n * \t\timages from the clipboard.\r\n */\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    long start = System.currentTimeMillis();\r\n    this.figures = new LinkedList<Figure>();\r\n    IXMLParser parser;\r\n    try {\r\n        parser = XMLParserFactory.createDefaultXMLParser();\r\n    } catch (Exception ex) {\r\n        InternalError e = new InternalError(\"Unable to instantiate NanoXML Parser\");\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    IXMLReader reader = new StdXMLReader(in);\r\n    parser.setReader(reader);\r\n    try {\r\n        document = ((IXMLElement) (parser.parse()));\r\n    } catch (XMLException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n    // Search for the first svg element in the XML document\r\n    // in preorder sequence\r\n    IXMLElement svg = document;\r\n    Stack<Iterator<IXMLElement>> stack = new Stack<Iterator<IXMLElement>>();\r\n    LinkedList<IXMLElement> ll = new LinkedList<IXMLElement>();\r\n    ll.add(document);\r\n    stack.push(ll.iterator());\r\n    while ((!(stack.empty())) && (stack.peek().hasNext())) {\r\n        Iterator<IXMLElement> iter = stack.peek();\r\n        IXMLElement node = iter.next();\r\n        Iterator<IXMLElement> children = ((node.getChildren()) == null) ? null : node.getChildren().iterator();\r\n        if (!(iter.hasNext())) {\r\n            stack.pop();\r\n        }\r\n        if ((children != null) && (children.hasNext())) {\r\n            stack.push(children);\r\n        }\r\n        if ((((node.getName()) != null) && (node.getName().equals(\"svg\"))) && (((node.getNamespace()) == null) || (node.getNamespace().equals(SVGConstants.SVG_NAMESPACE)))) {\r\n            svg = node;\r\n            break;\r\n        }\r\n    } \r\n    if ((((svg.getName()) == null) || (!(svg.getName().equals(\"svg\")))) || (((svg.getNamespace()) != null) && (!(svg.getNamespace().equals(SVGConstants.SVG_NAMESPACE))))) {\r\n        throw new IOException((\"svg element expected: \" + (svg.getName())));\r\n    }\r\n    // long end1 = System.currentTimeMillis();\r\n    // Flatten CSS Styles\r\n    initStorageContext(document);\r\n    flattenStyles(svg);\r\n    // long end2 = System.currentTimeMillis();\r\n    readElement(svg);\r\n    long end = System.currentTimeMillis();\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat elapsed:\" + (end - start)));\r\n    }\r\n    /* if (DEBUG) System.out.println(\"SVGInputFormat read:\"+(end1-start));\n    if (DEBUG) System.out.println(\"SVGInputFormat flatten:\"+(end2-end1));\n    if (DEBUG) System.out.println(\"SVGInputFormat build:\"+(end-end2));\n     */\r\n    if (replace) {\r\n        drawing.removeAllChildren();\r\n    }\r\n    drawing.addAll(figures);\r\n    if (replace) {\r\n        SVGInputFormat.Viewport viewport = viewportStack.firstElement();\r\n        SVGAttributeKeys.VIEWPORT_FILL.basicSet(drawing, SVGAttributeKeys.VIEWPORT_FILL.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_FILL_OPACITY.basicSet(drawing, SVGAttributeKeys.VIEWPORT_FILL_OPACITY.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_HEIGHT.basicSet(drawing, SVGAttributeKeys.VIEWPORT_HEIGHT.get(viewport.attributes));\r\n        SVGAttributeKeys.VIEWPORT_WIDTH.basicSet(drawing, SVGAttributeKeys.VIEWPORT_WIDTH.get(viewport.attributes));\r\n    }\r\n}"},
 {"id":1745, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":612, "classname":"org.jhotdraw.samples.svg.io.SVGInputFormat", "methodid":5969, "methodname":"org.jhotdraw.samples.svg.io.SVGInputFormat.readGraphicsAttributes(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"/* Reads graphics attributes as listed in\nhttp://www.w3.org/TR/SVGMobile12/feature.html#GraphicsAttribute\n */\r\nprivate void readGraphicsAttributes(IXMLElement elem, Figure f) throws IOException {\r\n    Object value;\r\n    // display\r\n    // Value:  \t inline | block | list-item |\r\n    // run-in | compact | marker |\r\n    // table | inline-table | table-row-group | table-header-group |\r\n    // table-footer-group | table-row | table-column-group | table-column |\r\n    // table-cell | table-caption | none | inherit\r\n    // Initial:  \t inline\r\n    // Applies to:  \t svg , g , switch , a , foreignObject ,\r\n    // graphics elements (including the text content block elements) and text\r\n    // sub-elements (for example, tspan and a )\r\n    // Inherited:  \t no\r\n    // Percentages:  \t N/A\r\n    // Media:  \t all\r\n    // Animatable:  \t yes\r\n    // Computed value:  \t Specified value, except inherit\r\n    value = readAttribute(elem, \"display\", \"inline\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented display=\" + value));\r\n    }\r\n    // image-rendering\r\n    // Value:  \t auto | optimizeSpeed | optimizeQuality | inherit\r\n    // Initial:  \t auto\r\n    // Applies to:  \t images\r\n    // Inherited:  \t yes\r\n    // Percentages:  \t N/A\r\n    // Media:  \t visual\r\n    // Animatable:  \t yes\r\n    // Computed value:  \t Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"image-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented image-rendering=\" + value));\r\n    }\r\n    // pointer-events\r\n    // Value:  \tboundingBox | visiblePainted | visibleFill | visibleStroke | visible |\r\n    // painted | fill | stroke | all | none | inherit\r\n    // Initial:  \tvisiblePainted\r\n    // Applies to:  \tgraphics elements\r\n    // Inherited:  \tyes\r\n    // Percentages:  \tN/A\r\n    // Media:  \tvisual\r\n    // Animatable:  \tyes\r\n    // Computed value:  \tSpecified value, except inherit\r\n    value = readInheritAttribute(elem, \"pointer-events\", \"visiblePainted\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented pointer-events=\" + value));\r\n    }\r\n    // shape-rendering\r\n    // Value:  \t auto | optimizeSpeed | crispEdges |\r\n    // geometricPrecision | inherit\r\n    // Initial:  \t auto\r\n    // Applies to:  \t shapes\r\n    // Inherited:  \t yes\r\n    // Percentages:  \t N/A\r\n    // Media:  \t visual\r\n    // Animatable:  \t yes\r\n    // Computed value:  \t Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"shape-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented shape-rendering=\" + value));\r\n    }\r\n    // text-rendering\r\n    // Value:  \t auto | optimizeSpeed | optimizeLegibility |\r\n    // geometricPrecision | inherit\r\n    // Initial:  \t auto\r\n    // Applies to:  \ttext content block elements\r\n    // Inherited:  \t yes\r\n    // Percentages:  \t N/A\r\n    // Media:  \t visual\r\n    // Animatable:  \t yes\r\n    // Computed value:  \t Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"text-rendering\", \"auto\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented text-rendering=\" + value));\r\n    }\r\n    // vector-effect\r\n    // Value:  \t non-scaling-stroke | none | inherit\r\n    // Initial:  \t none\r\n    // Applies to:  \t graphics elements\r\n    // Inherited:  \t no\r\n    // Percentages:  \t N/A\r\n    // Media:  \t visual\r\n    // Animatable:  \t yes\r\n    // Computed value:  \t Specified value, except inherit\r\n    value = readAttribute(elem, \"vector-effect\", \"none\");\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented vector-effect=\" + value));\r\n    }\r\n    // visibility\r\n    // Value:  \t visible | hidden | collapse | inherit\r\n    // Initial:  \t visible\r\n    // Applies to:  \t graphics elements (including the text content block\r\n    // elements) and text sub-elements (for example, tspan and a )\r\n    // Inherited:  \t yes\r\n    // Percentages:  \t N/A\r\n    // Media:  \t visual\r\n    // Animatable:  \t yes\r\n    // Computed value:  \t Specified value, except inherit\r\n    value = readInheritAttribute(elem, \"visibility\", null);\r\n    if (SVGInputFormat.DEBUG) {\r\n        System.out.println((\"SVGInputFormat not implemented visibility=\" + value));\r\n    }\r\n}"},
 {"id":1746, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":612, "classname":"org.jhotdraw.samples.svg.io.SVGInputFormat", "methodid":5957, "methodname":"org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.io.File,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(File file, Drawing drawing, boolean replace) throws IOException {\r\n    this.url = file.toURL();\r\n    BufferedInputStream in = null;\r\n    try {\r\n        in = new BufferedInputStream(new FileInputStream(file));\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    this.url = null;\r\n}"},
 {"id":1747, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":612, "classname":"org.jhotdraw.samples.svg.io.SVGInputFormat", "methodid":5959, "methodname":"org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.net.URL,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(URL url, Drawing drawing, boolean replace) throws IOException {\r\n    this.url = url;\r\n    InputStream in = null;\r\n    try {\r\n        in = url.openStream();\r\n        read(in, drawing, replace);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n    this.url = null;\r\n}"},
 {"id":1748, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":612, "classname":"org.jhotdraw.samples.svg.io.SVGInputFormat", "methodid":5955, "methodname":"org.jhotdraw.samples.svg.io.SVGInputFormat.read(java.awt.datatransfer.Transferable,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"public void read(Transferable t, Drawing drawing, boolean replace) throws UnsupportedFlavorException, IOException {\r\n    InputStream in = null;\r\n    try {\r\n        in = ((InputStream) (t.getTransferData(new DataFlavor(\"image/svg+xml\", \"Image SVG\"))));\r\n        read(in, drawing, false);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}"},
 {"id":1749, "parametername":"Figure f", "parametertype":"org.jhotdraw.draw.Figure", "parameterclass":174, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6047, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.draw.Figure)", "isreturn":0, "sourcecode":"protected void writeElement(IXMLElement parent, Figure f) throws IOException {\r\n    // Write link attribute as encosing \"a\" element\r\n    if (((SVGAttributeKeys.LINK.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n        IXMLElement aElement = parent.createElement(\"a\");\r\n        aElement.setAttribute(\"xlink:href\", SVGAttributeKeys.LINK.get(f));\r\n        if (((SVGAttributeKeys.LINK_TARGET.get(f)) != null) && ((SVGAttributeKeys.LINK.get(f).trim().length()) > 0)) {\r\n            aElement.setAttribute(\"target\", SVGAttributeKeys.LINK_TARGET.get(f));\r\n        }\r\n        parent.addChild(aElement);\r\n        parent = aElement;\r\n    }\r\n    // Write the actual element\r\n    if (f instanceof SVGEllipseFigure) {\r\n        SVGEllipseFigure ellipse = ((SVGEllipseFigure) (f));\r\n        if ((ellipse.getWidth()) == (ellipse.getHeight())) {\r\n            writeCircleElement(parent, ellipse);\r\n        } else {\r\n            writeEllipseElement(parent, ellipse);\r\n        }\r\n    } else\r\n        if (f instanceof SVGGroupFigure) {\r\n            writeGElement(parent, ((SVGGroupFigure) (f)));\r\n        } else\r\n            if (f instanceof SVGImageFigure) {\r\n                writeImageElement(parent, ((SVGImageFigure) (f)));\r\n            } else\r\n                if (f instanceof SVGPathFigure) {\r\n                    SVGPathFigure path = ((SVGPathFigure) (f));\r\n                    if ((path.getChildCount()) == 1) {\r\n                        BezierFigure bezier = ((BezierFigure) (path.getChild(0)));\r\n                        boolean isLinear = true;\r\n                        for (int i = 0, n = bezier.getNodeCount(); i < n; i++) {\r\n                            if ((bezier.getNode(i).getMask()) != 0) {\r\n                                isLinear = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isLinear) {\r\n                            if (bezier.isClosed()) {\r\n                                writePolygonElement(parent, path);\r\n                            } else {\r\n                                if ((bezier.getNodeCount()) == 2) {\r\n                                    writeLineElement(parent, path);\r\n                                } else {\r\n                                    writePolylineElement(parent, path);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            writePathElement(parent, path);\r\n                        }\r\n                    } else {\r\n                        writePathElement(parent, path);\r\n                    }\r\n                } else\r\n                    if (f instanceof SVGRectFigure) {\r\n                        writeRectElement(parent, ((SVGRectFigure) (f)));\r\n                    } else\r\n                        if (f instanceof SVGTextFigure) {\r\n                            writeTextElement(parent, ((SVGTextFigure) (f)));\r\n                        } else\r\n                            if (f instanceof SVGTextAreaFigure) {\r\n                                writeTextAreaElement(parent, ((SVGTextAreaFigure) (f)));\r\n                            } else {\r\n                                System.out.println((\"Unable to write: \" + f));\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}"},
 {"id":1750, "parametername":"SVGEllipseFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure", "parameterclass":560, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6046, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeCircleElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)", "isreturn":0, "sourcecode":"protected void writeCircleElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    parent.addChild(createCircle(document, ((f.getX()) + ((f.getWidth()) / 2.0)), ((f.getY()) + ((f.getHeight()) / 2.0)), ((f.getWidth()) / 2.0), f.getAttributes()));\r\n}"},
 {"id":1751, "parametername":"SVGEllipseFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGEllipseFigure", "parameterclass":560, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6048, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeEllipseElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGEllipseFigure)", "isreturn":0, "sourcecode":"protected void writeEllipseElement(IXMLElement parent, SVGEllipseFigure f) throws IOException {\r\n    parent.addChild(createEllipse(document, ((f.getX()) + ((f.getWidth()) / 2.0)), ((f.getY()) + ((f.getHeight()) / 2.0)), ((f.getWidth()) / 2.0), ((f.getHeight()) / 2.0), f.getAttributes()));\r\n}"},
 {"id":1752, "parametername":"SVGGroupFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGGroupFigure", "parameterclass":562, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6050, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeGElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGGroupFigure)", "isreturn":0, "sourcecode":"protected void writeGElement(IXMLElement parent, SVGGroupFigure f) throws IOException {\r\n    IXMLElement elem = createG(document, f.getAttributes());\r\n    for (Figure child : f.getChildren()) {\r\n        writeElement(elem, child);\r\n    }\r\n    parent.addChild(elem);\r\n}"},
 {"id":1753, "parametername":"SVGImageFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGImageFigure", "parameterclass":563, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6051, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeImageElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGImageFigure)", "isreturn":0, "sourcecode":"protected void writeImageElement(IXMLElement parent, SVGImageFigure f) throws IOException {\r\n    parent.addChild(createImage(document, f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getImageData(), f.getAttributes()));\r\n}"},
 {"id":1754, "parametername":"SVGPathFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6054, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writePathElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"protected void writePathElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0; i < (beziers.length); i++) {\r\n        beziers[i] = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n    }\r\n    parent.addChild(createPath(document, beziers, f.getAttributes()));\r\n}"},
 {"id":1755, "parametername":"SVGPathFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6055, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writePolygonElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"protected void writePolygonElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    LinkedList<Point2D.Double> points = new LinkedList<Point2D.Double>();\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0, n = f.getChildCount(); i < n; i++) {\r\n        BezierPath bezier = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n        for (BezierPath.Node node : bezier) {\r\n            points.add(new Point2D.Double(node.x[0], node.y[0]));\r\n        }\r\n    }\r\n    parent.addChild(createPolygon(document, points.toArray(new Point2D.Double[points.size()]), f.getAttributes()));\r\n}"},
 {"id":1756, "parametername":"SVGPathFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6056, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writePolylineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"protected void writePolylineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    LinkedList<Point2D.Double> points = new LinkedList<Point2D.Double>();\r\n    BezierPath[] beziers = new BezierPath[f.getChildCount()];\r\n    for (int i = 0, n = f.getChildCount(); i < n; i++) {\r\n        BezierPath bezier = ((BezierFigure) (f.getChild(i))).getBezierPath();\r\n        for (BezierPath.Node node : bezier) {\r\n            points.add(new Point2D.Double(node.x[0], node.y[0]));\r\n        }\r\n    }\r\n    parent.addChild(createPolyline(document, points.toArray(new Point2D.Double[points.size()]), f.getAttributes()));\r\n}"},
 {"id":1757, "parametername":"SVGPathFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGPathFigure", "parameterclass":564, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6052, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeLineElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGPathFigure)", "isreturn":0, "sourcecode":"protected void writeLineElement(IXMLElement parent, SVGPathFigure f) throws IOException {\r\n    BezierFigure bezier = ((BezierFigure) (f.getChild(0)));\r\n    parent.addChild(createLine(document, bezier.getNode(0).x[0], bezier.getNode(0).y[0], bezier.getNode(1).x[0], bezier.getNode(1).y[0], f.getAttributes()));\r\n}"},
 {"id":1758, "parametername":"SVGRectFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGRectFigure", "parameterclass":566, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6057, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeRectElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGRectFigure)", "isreturn":0, "sourcecode":"protected void writeRectElement(IXMLElement parent, SVGRectFigure f) throws IOException {\r\n    parent.addChild(createRect(document, f.getX(), f.getY(), f.getWidth(), f.getHeight(), f.getArcWidth(), f.getArcHeight(), f.getAttributes()));\r\n}"},
 {"id":1759, "parametername":"SVGTextFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGTextFigure", "parameterclass":570, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6060, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeTextElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextFigure)", "isreturn":0, "sourcecode":"protected void writeTextElement(IXMLElement parent, SVGTextFigure f) throws IOException {\r\n    DefaultStyledDocument styledDoc = new DefaultStyledDocument();\r\n    try {\r\n        styledDoc.insertString(0, f.getText(), null);\r\n    } catch (BadLocationException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    parent.addChild(createText(document, f.getCoordinates(), f.getRotates(), styledDoc, f.getAttributes()));\r\n}"},
 {"id":1760, "parametername":"SVGTextAreaFigure f", "parametertype":"org.jhotdraw.samples.svg.figures.SVGTextAreaFigure", "parameterclass":569, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6059, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.writeTextAreaElement(org.jhotdraw.samples.svg.io.IXMLElement,org.jhotdraw.samples.svg.figures.SVGTextAreaFigure)", "isreturn":0, "sourcecode":"protected void writeTextAreaElement(IXMLElement parent, SVGTextAreaFigure f) throws IOException {\r\n    DefaultStyledDocument styledDoc = new DefaultStyledDocument();\r\n    try {\r\n        styledDoc.insertString(0, f.getText(), null);\r\n    } catch (BadLocationException e) {\r\n        InternalError error = new InternalError(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n    Rectangle2D.Double bounds = f.getBounds();\r\n    parent.addChild(createTextArea(document, bounds.x, bounds.y, bounds.width, bounds.height, styledDoc, f.getAttributes()));\r\n}"},
 {"id":1761, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6039, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.File,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void write(File file, Drawing drawing) throws IOException {\r\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\r\n    try {\r\n        write(out, drawing);\r\n    } finally {\r\n        if (out != null) {\r\n            out.close();\r\n        }\r\n    }\r\n}"},
 {"id":1762, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6040, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"public void write(OutputStream out, Drawing drawing) throws IOException {\r\n    write(out, drawing, drawing.getChildren());\r\n}"},
 {"id":1763, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6041, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing,java.util.List)", "isreturn":0, "sourcecode":"/**\r\n * All other write methods delegate their work to here.\r\n */\r\npublic void write(OutputStream out, Drawing drawing, List<Figure> figures) throws IOException {\r\n    document = new XMLElement(\"svg\", SVGConstants.SVG_NAMESPACE);\r\n    document.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\r\n    document.setAttribute(\"version\", \"1.2\");\r\n    document.setAttribute(\"baseProfile\", \"tiny\");\r\n    writeViewportAttributes(document, drawing.getAttributes());\r\n    initStorageContext(document);\r\n    defs = new XMLElement(\"defs\");\r\n    document.addChild(defs);\r\n    for (Figure f : figures) {\r\n        writeElement(document, f);\r\n    }\r\n    // Write XML prolog\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(out, \"UTF-8\"));\r\n    writer.println(\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\");\r\n    // Write XML content\r\n    XMLWriter xmlWriter = new XMLWriter(writer);\r\n    xmlWriter.write(document, isPrettyPrint);\r\n    // Flush writer\r\n    writer.flush();\r\n}"},
 {"id":1764, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":613, "classname":"org.jhotdraw.samples.svg.io.SVGOutputFormat", "methodid":6026, "methodname":"org.jhotdraw.samples.svg.io.SVGOutputFormat.createTransferable(org.jhotdraw.draw.Drawing,java.util.List,double)", "isreturn":0, "sourcecode":"public Transferable createTransferable(Drawing drawing, List<Figure> figures, double scaleFactor) throws IOException {\r\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n    write(buf, drawing, figures);\r\n    return new InputStreamTransferable(new DataFlavor(SVGConstants.SVG_MIMETYPE, \"Image SVG\"), buf.toByteArray());\r\n}"},
 {"id":1765, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":614, "classname":"org.jhotdraw.samples.svg.io.SVGZInputFormat", "methodid":6065, "methodname":"org.jhotdraw.samples.svg.io.SVGZInputFormat.read(java.io.InputStream,org.jhotdraw.draw.Drawing,boolean)", "isreturn":0, "sourcecode":"@Override\r\npublic void read(InputStream in, Drawing drawing, boolean replace) throws IOException {\r\n    BufferedInputStream bin = (in instanceof BufferedInputStream) ? ((BufferedInputStream) (in)) : new BufferedInputStream(in);\r\n    bin.mark(2);\r\n    int magic = ((bin.read()) & 255) | (((bin.read()) & 255) << 8);\r\n    bin.reset();\r\n    if (magic == (GZIPInputStream.GZIP_MAGIC)) {\r\n        super.read(new GZIPInputStream(bin), drawing, replace);\r\n    } else {\r\n        super.read(bin, drawing, replace);\r\n    }\r\n}"},
 {"id":1766, "parametername":"Drawing drawing", "parametertype":"org.jhotdraw.draw.Drawing", "parameterclass":168, "classid":615, "classname":"org.jhotdraw.samples.svg.io.SVGZOutputFormat", "methodid":6069, "methodname":"org.jhotdraw.samples.svg.io.SVGZOutputFormat.write(java.io.OutputStream,org.jhotdraw.draw.Drawing)", "isreturn":0, "sourcecode":"@Override\r\npublic void write(OutputStream out, Drawing drawing) throws IOException {\r\n    GZIPOutputStream gout = new GZIPOutputStream(out);\r\n    super.write(gout, drawing, drawing.getChildren());\r\n    gout.finish();\r\n}"},
 {"id":1767, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":617, "classname":"org.jhotdraw.samples.teddy.FindDialog", "methodid":6077, "methodname":"org.jhotdraw.samples.teddy.FindDialog.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates new form FindDialog\r\n */\r\npublic FindDialog(Application app) {\r\n    this(null, false);\r\n    this.app = app;\r\n}"},
 {"id":1768, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":620, "classname":"org.jhotdraw.samples.teddy.TeddyApplicationModel", "methodid":6104, "methodname":"org.jhotdraw.samples.teddy.TeddyApplicationModel.initApplication(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"@Override\r\npublic void initApplication(Application a) {\r\n    putAction(FindAction.ID, new FindAction(a));\r\n    putAction(ToggleLineWrapAction.ID, new ToggleLineWrapAction(a));\r\n    putAction(ToggleStatusBarAction.ID, new ToggleStatusBarAction(a));\r\n    putAction(ToggleLineNumbersAction.ID, new ToggleLineNumbersAction(a));\r\n    putAction(PrintAction.ID, null);\r\n}"},
 {"id":1769, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":620, "classname":"org.jhotdraw.samples.teddy.TeddyApplicationModel", "methodid":6105, "methodname":"org.jhotdraw.samples.teddy.TeddyApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic void initView(Application a, View p) {\r\n}"},
 {"id":1770, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":620, "classname":"org.jhotdraw.samples.teddy.TeddyApplicationModel", "methodid":6105, "methodname":"org.jhotdraw.samples.teddy.TeddyApplicationModel.initView(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic void initView(Application a, View p) {\r\n}"},
 {"id":1771, "parametername":"Application a", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":620, "classname":"org.jhotdraw.samples.teddy.TeddyApplicationModel", "methodid":6102, "methodname":"org.jhotdraw.samples.teddy.TeddyApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.teddy.Labels\");\r\n    JMenu m;\r\n    JCheckBoxMenuItem cbmi;\r\n    mb.add(createEditMenu(a, p));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineWrapAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineWrapAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineNumbersAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineNumbersAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleStatusBarAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleStatusBarAction.ID));\r\n    m.add(cbmi);\r\n    mb.add(m);\r\n    return mb;\r\n}"},
 {"id":1772, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":620, "classname":"org.jhotdraw.samples.teddy.TeddyApplicationModel", "methodid":6102, "methodname":"org.jhotdraw.samples.teddy.TeddyApplicationModel.createMenus(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"@Override\r\npublic List<JMenu> createMenus(Application a, View p) {\r\n    LinkedList<JMenu> mb = new LinkedList<JMenu>();\r\n    ResourceBundleUtil labels = ResourceBundleUtil.getBundle(\"org.jhotdraw.samples.teddy.Labels\");\r\n    JMenu m;\r\n    JCheckBoxMenuItem cbmi;\r\n    mb.add(createEditMenu(a, p));\r\n    m = new JMenu();\r\n    labels.configureMenu(m, \"view\");\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineWrapAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineWrapAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleLineNumbersAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleLineNumbersAction.ID));\r\n    m.add(cbmi);\r\n    cbmi = new JCheckBoxMenuItem(getAction(ToggleStatusBarAction.ID));\r\n    Actions.configureJCheckBoxMenuItem(cbmi, getAction(ToggleStatusBarAction.ID));\r\n    m.add(cbmi);\r\n    mb.add(m);\r\n    return mb;\r\n}"},
 {"id":1773, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":620, "classname":"org.jhotdraw.samples.teddy.TeddyApplicationModel", "methodid":6103, "methodname":"org.jhotdraw.samples.teddy.TeddyApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class returns an empty list - we dont want toolbars in a text editor.\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    return Collections.emptyList();\r\n}"},
 {"id":1774, "parametername":"View p", "parametertype":"org.jhotdraw.app.View", "parameterclass":15, "classid":620, "classname":"org.jhotdraw.samples.teddy.TeddyApplicationModel", "methodid":6103, "methodname":"org.jhotdraw.samples.teddy.TeddyApplicationModel.createToolBars(org.jhotdraw.app.Application,org.jhotdraw.app.View)", "isreturn":0, "sourcecode":"/**\r\n * Creates toolbars for the application.\r\n * This class returns an empty list - we dont want toolbars in a text editor.\r\n */\r\npublic List<JToolBar> createToolBars(Application app, View p) {\r\n    return Collections.emptyList();\r\n}"},
 {"id":1775, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":623, "classname":"org.jhotdraw.samples.teddy.action.FindAction", "methodid":6148, "methodname":"org.jhotdraw.samples.teddy.action.FindAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic FindAction(Application app) {\r\n    this.app = app;\r\n    labels.configureAction(this, FindAction.ID);\r\n}"},
 {"id":1776, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":624, "classname":"org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction", "methodid":6151, "methodname":"org.jhotdraw.samples.teddy.action.ToggleLineNumbersAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleLineNumbersAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleLineNumbersAction.ID);\r\n    setPropertyName(\"lineNumbersVisible\");\r\n}"},
 {"id":1777, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":625, "classname":"org.jhotdraw.samples.teddy.action.ToggleLineWrapAction", "methodid":6155, "methodname":"org.jhotdraw.samples.teddy.action.ToggleLineWrapAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleLineWrapAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleLineWrapAction.ID);\r\n    setPropertyName(\"lineWrap\");\r\n}"},
 {"id":1778, "parametername":"Application app", "parametertype":"org.jhotdraw.app.Application", "parameterclass":3, "classid":626, "classname":"org.jhotdraw.samples.teddy.action.ToggleStatusBarAction", "methodid":6159, "methodname":"org.jhotdraw.samples.teddy.action.ToggleStatusBarAction.-init-(org.jhotdraw.app.Application)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic ToggleStatusBarAction(Application app) {\r\n    super(app);\r\n    labels.configureAction(this, ToggleStatusBarAction.ID);\r\n    setPropertyName(\"statusBarVisible\");\r\n}"},
 {"id":1779, "parametername":"MatchType matchType", "parametertype":"org.jhotdraw.samples.teddy.regex.MatchType", "parameterclass":628, "classid":629, "classname":"org.jhotdraw.samples.teddy.regex.Matcher", "methodid":6171, "methodname":"org.jhotdraw.samples.teddy.regex.Matcher.-init-(javax.swing.text.Document,java.lang.String,boolean,org.jhotdraw.samples.teddy.regex.MatchType)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance of Matcher\r\n *\r\n * @param document\r\n * \t\tThe document to be examined\r\n * @param findString\r\n * \t\tThe string to be searched.\r\n * @param matchCase\r\n * \t\tSet to true for case sensitive search.\r\n * @param matchType\r\n * \t\tSets the match type.\r\n */\r\npublic Matcher(Document document, String findString, boolean matchCase, MatchType matchType) {\r\n    this.document = document;\r\n    this.findString = findString;\r\n    startIndex = 0;\r\n    // Convert to chars for efficiency\r\n    if (matchCase) {\r\n        matchLowerCase = matchUpperCase = findString.toCharArray();\r\n    } else {\r\n        matchUpperCase = findString.toUpperCase().toCharArray();\r\n        matchLowerCase = findString.toLowerCase().toCharArray();\r\n    }\r\n    this.matchType = matchType;\r\n}"},
 {"id":1780, "parametername":"NumberedViewFactory viewFactory", "parametertype":"org.jhotdraw.samples.teddy.text.NumberedViewFactory", "parameterclass":632, "classid":631, "classname":"org.jhotdraw.samples.teddy.text.NumberedParagraphView", "methodid":6184, "methodname":"org.jhotdraw.samples.teddy.text.NumberedParagraphView.-init-(javax.swing.text.Element,org.jhotdraw.samples.teddy.text.NumberedViewFactory)", "isreturn":0, "sourcecode":"public NumberedParagraphView(Element e, NumberedViewFactory viewFactory) {\r\n    super(e);\r\n    this.viewFactory = viewFactory;\r\n}"},
 {"id":1781, "parametername":"ColorFormatter.Format outputFormat", "parametertype":"org.jhotdraw.text.ColorFormatter$Format", "parameterclass":633, "classid":634, "classname":"org.jhotdraw.text.ColorFormatter", "methodid":6192, "methodname":"org.jhotdraw.text.ColorFormatter.-init-(org.jhotdraw.text.ColorFormatter$Format,boolean,boolean)", "isreturn":0, "sourcecode":"public ColorFormatter(ColorFormatter.Format outputFormat, boolean allowsNullValue, boolean isAdaptive) {\r\n    this.outputFormat = outputFormat;\r\n    this.allowsNullValue = allowsNullValue;\r\n    this.isAdaptive = isAdaptive;\r\n    // Retrieve last used input format from preferences\r\n    prefs = Preferences.userNodeForPackage(getClass());\r\n    try {\r\n        lastUsedInputFormat = ColorFormatter.Format.valueOf(prefs.get(\"ColorFormatter.lastUsedInputFormat\", ColorFormatter.Format.RGB_HEX.name()));\r\n    } catch (IllegalArgumentException e) {\r\n        // leave lastUsedInputFormat as null\r\n    }\r\n    if (isAdaptive && ((lastUsedInputFormat) != null)) {\r\n        this.outputFormat = lastUsedInputFormat;\r\n    }\r\n    setOverwriteMode(false);\r\n}"},
 {"id":1782, "parametername":"ColorFormatter.Format newValue", "parametertype":"org.jhotdraw.text.ColorFormatter$Format", "parameterclass":633, "classid":634, "classname":"org.jhotdraw.text.ColorFormatter", "methodid":6202, "methodname":"org.jhotdraw.text.ColorFormatter.setOutputFormat(org.jhotdraw.text.ColorFormatter$Format)", "isreturn":0, "sourcecode":"/**\r\n * Sets the output format.\r\n *\r\n * @param newValue\r\n * \t\t\r\n */\r\npublic void setOutputFormat(ColorFormatter.Format newValue) {\r\n    if (newValue == null) {\r\n        throw new NullPointerException(\"outputFormat may not be null\");\r\n    }\r\n    outputFormat = newValue;\r\n}"},
 {"id":1783, "parametername":"ColorFormatter.Format newValue", "parametertype":"org.jhotdraw.text.ColorFormatter$Format", "parameterclass":633, "classid":634, "classname":"org.jhotdraw.text.ColorFormatter", "methodid":6201, "methodname":"org.jhotdraw.text.ColorFormatter.setLastUsedInputFormat(org.jhotdraw.text.ColorFormatter$Format)", "isreturn":0, "sourcecode":"private void setLastUsedInputFormat(ColorFormatter.Format newValue) {\r\n    lastUsedInputFormat = newValue;\r\n    if (isAdaptive) {\r\n        outputFormat = lastUsedInputFormat;\r\n    }\r\n    prefs.put(\"ColorFormatter.lastUsedInputFormat\", newValue.name());\r\n}"},
 {"id":1784, "parametername":"ColorFormatter.Format outputFormat", "parametertype":"org.jhotdraw.text.ColorFormatter$Format", "parameterclass":633, "classid":634, "classname":"org.jhotdraw.text.ColorFormatter", "methodid":6194, "methodname":"org.jhotdraw.text.ColorFormatter.createFormatterFactory(org.jhotdraw.text.ColorFormatter$Format,boolean,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Convenience method for creating a formatter factory with a\r\n * 8@code ColorFormatter}.\r\n */\r\npublic static JFormattedTextField.AbstractFormatterFactory createFormatterFactory(ColorFormatter.Format outputFormat, boolean allowsNullValue, boolean isAdaptive) {\r\n    return new DefaultFormatterFactory(new ColorFormatter(outputFormat, allowsNullValue, isAdaptive));\r\n}"},
 {"id":1785, "parametername":"DOMStorable o", "parametertype":"org.jhotdraw.xml.DOMStorable", "parameterclass":652, "classid":649, "classname":"org.jhotdraw.xml.DOMFactory", "methodid":6358, "methodname":"org.jhotdraw.xml.DOMFactory.getName(org.jhotdraw.xml.DOMStorable)", "isreturn":0, "sourcecode":"/**\r\n * Returns the element name for the specified object.\r\n * Note: The element names \"string\", \"int\", \"float\", \"long\", \"double\",\r\n * \"boolean\", \"enum\" and \"null\"  are reserved and must not be returned by\r\n * this operation.\r\n */\r\npublic String getName(DOMStorable o);"},
 {"id":1786, "parametername":"DOMOutput out", "parametertype":"org.jhotdraw.xml.DOMOutput", "parameterclass":651, "classid":652, "classname":"org.jhotdraw.xml.DOMStorable", "methodid":6393, "methodname":"org.jhotdraw.xml.DOMStorable.write(org.jhotdraw.xml.DOMOutput)", "isreturn":0, "sourcecode":"public void write(DOMOutput out) throws IOException;"},
 {"id":1787, "parametername":"DOMInput in", "parametertype":"org.jhotdraw.xml.DOMInput", "parameterclass":650, "classid":652, "classname":"org.jhotdraw.xml.DOMStorable", "methodid":6392, "methodname":"org.jhotdraw.xml.DOMStorable.read(org.jhotdraw.xml.DOMInput)", "isreturn":0, "sourcecode":"public void read(DOMInput in) throws IOException;"},
 {"id":1788, "parametername":"DOMStorable prototype", "parametertype":"org.jhotdraw.xml.DOMStorable", "parameterclass":652, "classid":653, "classname":"org.jhotdraw.xml.DefaultDOMFactory", "methodid":6397, "methodname":"org.jhotdraw.xml.DefaultDOMFactory.addStorable(java.lang.String,org.jhotdraw.xml.DOMStorable)", "isreturn":0, "sourcecode":"/**\r\n * Adds a DOMStorable prototype to the DOMFactory.\r\n */\r\npublic void addStorable(String name, DOMStorable prototype) {\r\n    DefaultDOMFactory.nameToPrototypeMap.put(name, prototype);\r\n    DefaultDOMFactory.classToNameMap.put(prototype.getClass(), name);\r\n}"},
 {"id":1789, "parametername":"DOMStorable o", "parametertype":"org.jhotdraw.xml.DOMStorable", "parameterclass":652, "classid":653, "classname":"org.jhotdraw.xml.DefaultDOMFactory", "methodid":6403, "methodname":"org.jhotdraw.xml.DefaultDOMFactory.getName(org.jhotdraw.xml.DOMStorable)", "isreturn":0, "sourcecode":"public String getName(DOMStorable o) {\r\n    String name = DefaultDOMFactory.classToNameMap.get(o.getClass());\r\n    if (name == null) {\r\n        throw new IllegalArgumentException((((\"Storable class not known to factory. Storable:\" + o) + \" Factory:\") + (this.getClass())));\r\n    }\r\n    return name;\r\n}"},
 {"id":1790, "parametername":"DOMFactory factory", "parametertype":"org.jhotdraw.xml.DOMFactory", "parameterclass":649, "classid":654, "classname":"org.jhotdraw.xml.JavaxDOMInput", "methodid":6404, "methodname":"org.jhotdraw.xml.JavaxDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.InputStream)", "isreturn":0, "sourcecode":"public JavaxDOMInput(DOMFactory factory, InputStream in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        document = JavaxDOMInput.getBuilder().parse(in);\r\n        current = document;\r\n    } catch (SAXException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}"},
 {"id":1791, "parametername":"DOMFactory factory", "parametertype":"org.jhotdraw.xml.DOMFactory", "parameterclass":649, "classid":654, "classname":"org.jhotdraw.xml.JavaxDOMInput", "methodid":6405, "methodname":"org.jhotdraw.xml.JavaxDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.Reader)", "isreturn":0, "sourcecode":"public JavaxDOMInput(DOMFactory factory, Reader in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        document = JavaxDOMInput.getBuilder().parse(new InputSource(in));\r\n        current = document;\r\n    } catch (SAXException ex) {\r\n        IOException e = new IOException(ex.getMessage());\r\n        e.initCause(ex);\r\n        throw e;\r\n    }\r\n}"},
 {"id":1792, "parametername":"DOMFactory factory", "parametertype":"org.jhotdraw.xml.DOMFactory", "parameterclass":649, "classid":655, "classname":"org.jhotdraw.xml.JavaxDOMOutput", "methodid":6424, "methodname":"org.jhotdraw.xml.JavaxDOMOutput.-init-(org.jhotdraw.xml.DOMFactory)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic JavaxDOMOutput(DOMFactory factory) throws IOException {\r\n    this.factory = factory;\r\n}"},
 {"id":1793, "parametername":"DOMStorable o", "parametertype":"org.jhotdraw.xml.DOMStorable", "parameterclass":652, "classid":655, "classname":"org.jhotdraw.xml.JavaxDOMOutput", "methodid":6445, "methodname":"org.jhotdraw.xml.JavaxDOMOutput.writeStorable(org.jhotdraw.xml.DOMStorable)", "isreturn":0, "sourcecode":"private void writeStorable(DOMStorable o) throws IOException {\r\n    String tagName = factory.getName(o);\r\n    if (tagName == null)\r\n        throw new IllegalArgumentException((\"no tag name for:\" + o));\r\n\r\n    openElement(tagName);\r\n    if (objectids.containsKey(o)) {\r\n        addAttribute(\"ref\", ((String) (objectids.get(o))));\r\n    } else {\r\n        String id = Integer.toString(objectids.size(), 16);\r\n        objectids.put(o, id);\r\n        addAttribute(\"id\", id);\r\n        o.write(this);\r\n    }\r\n    closeElement();\r\n}"},
 {"id":1794, "parametername":"DOMFactory factory", "parametertype":"org.jhotdraw.xml.DOMFactory", "parameterclass":649, "classid":656, "classname":"org.jhotdraw.xml.NanoXMLDOMInput", "methodid":6446, "methodname":"org.jhotdraw.xml.NanoXMLDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.InputStream)", "isreturn":0, "sourcecode":"public NanoXMLDOMInput(DOMFactory factory, InputStream in) throws IOException {\r\n    this(factory, new InputStreamReader(in, \"UTF8\"));\r\n}"},
 {"id":1795, "parametername":"DOMFactory factory", "parametertype":"org.jhotdraw.xml.DOMFactory", "parameterclass":649, "classid":656, "classname":"org.jhotdraw.xml.NanoXMLDOMInput", "methodid":6447, "methodname":"org.jhotdraw.xml.NanoXMLDOMInput.-init-(org.jhotdraw.xml.DOMFactory,java.io.Reader)", "isreturn":0, "sourcecode":"public NanoXMLDOMInput(DOMFactory factory, Reader in) throws IOException {\r\n    this.factory = factory;\r\n    try {\r\n        IXMLParser parser = XMLParserFactory.createDefaultXMLParser();\r\n        IXMLReader reader = new StdXMLReader(in);\r\n        parser.setReader(reader);\r\n        document = new XMLElement();\r\n        current = ((XMLElement) (parser.parse()));\r\n        if ((current) != null) {\r\n            document.addChild(current);\r\n        }\r\n        current = document;\r\n    } catch (Exception e) {\r\n        IOException error = new IOException(e.getMessage());\r\n        error.initCause(e);\r\n        throw error;\r\n    }\r\n}"},
 {"id":1796, "parametername":"DOMFactory factory", "parametertype":"org.jhotdraw.xml.DOMFactory", "parameterclass":649, "classid":657, "classname":"org.jhotdraw.xml.NanoXMLDOMOutput", "methodid":6464, "methodname":"org.jhotdraw.xml.NanoXMLDOMOutput.-init-(org.jhotdraw.xml.DOMFactory)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance.\r\n */\r\npublic NanoXMLDOMOutput(DOMFactory factory) {\r\n    this.factory = factory;\r\n    objectids = new HashMap<Object, String>();\r\n    document = new XMLElement();// new HashMap(), false, false);\r\n\r\n    current = document;\r\n    stack = new Stack<XMLElement>();\r\n    stack.push(current);\r\n}"},
 {"id":1797, "parametername":"DOMStorable o", "parametertype":"org.jhotdraw.xml.DOMStorable", "parameterclass":652, "classid":657, "classname":"org.jhotdraw.xml.NanoXMLDOMOutput", "methodid":6485, "methodname":"org.jhotdraw.xml.NanoXMLDOMOutput.writeStorable(org.jhotdraw.xml.DOMStorable)", "isreturn":0, "sourcecode":"private XMLElement writeStorable(DOMStorable o) throws IOException {\r\n    String tagName = factory.getName(o);\r\n    if (tagName == null)\r\n        throw new IllegalArgumentException((\"no tag name for:\" + o));\r\n\r\n    openElement(tagName);\r\n    XMLElement element = current;\r\n    if (objectids.containsKey(o)) {\r\n        addAttribute(\"ref\", ((String) (objectids.get(o))));\r\n    } else {\r\n        String id = Integer.toString(objectids.size(), 16);\r\n        objectids.put(o, id);\r\n        addAttribute(\"id\", id);\r\n        o.write(this);\r\n    }\r\n    closeElement();\r\n    return element;\r\n}"},
 {"id":1798, "parametername":"DOMStorable o", "parametertype":"org.jhotdraw.xml.DOMStorable", "parameterclass":652, "classid":658, "classname":"org.jhotdraw.xml.QuickAndDirtyDOMFactory", "methodid":6492, "methodname":"org.jhotdraw.xml.QuickAndDirtyDOMFactory.getName(org.jhotdraw.xml.DOMStorable)", "isreturn":0, "sourcecode":"public String getName(DOMStorable o) {\r\n    return escape(o.getClass().getName());\r\n}"},
 {"id":1799, "parametername":"StyleManager rm", "parametertype":"org.jhotdraw.xml.css.StyleManager", "parameterclass":663, "classid":660, "classname":"org.jhotdraw.xml.css.CSSParser", "methodid":6501, "methodname":"org.jhotdraw.xml.css.CSSParser.parse(java.lang.String,org.jhotdraw.xml.css.StyleManager)", "isreturn":0, "sourcecode":"public void parse(String css, StyleManager rm) throws IOException {\r\n    parse(new StringReader(css), rm);\r\n}"},
 {"id":1800, "parametername":"StyleManager rm", "parametertype":"org.jhotdraw.xml.css.StyleManager", "parameterclass":663, "classid":660, "classname":"org.jhotdraw.xml.css.CSSParser", "methodid":6500, "methodname":"org.jhotdraw.xml.css.CSSParser.parse(java.io.Reader,org.jhotdraw.xml.css.StyleManager)", "isreturn":0, "sourcecode":"public void parse(Reader css, StyleManager rm) throws IOException {\r\n    StreamTokenizer tt = new StreamTokenizer(css);\r\n    tt.resetSyntax();\r\n    tt.wordChars(a, z);\r\n    tt.wordChars(A, Z);\r\n    tt.wordChars(0, 9);\r\n    tt.wordChars((128 + 32), 255);\r\n    tt.whitespaceChars(0,  );\r\n    tt.commentChar(/);\r\n    tt.slashStarComments(true);\r\n    parseStylesheet(tt, rm);\r\n}"},
 {"id":1801, "parametername":"StyleManager rm", "parametertype":"org.jhotdraw.xml.css.StyleManager", "parameterclass":663, "classid":660, "classname":"org.jhotdraw.xml.css.CSSParser", "methodid":6505, "methodname":"org.jhotdraw.xml.css.CSSParser.parseStylesheet(java.io.StreamTokenizer,org.jhotdraw.xml.css.StyleManager)", "isreturn":0, "sourcecode":"private void parseStylesheet(StreamTokenizer tt, StyleManager rm) throws IOException {\r\n    while ((tt.nextToken()) != (StreamTokenizer.TT_EOF)) {\r\n        tt.pushBack();\r\n        parseRuleset(tt, rm);\r\n    } \r\n}"},
 {"id":1802, "parametername":"StyleManager rm", "parametertype":"org.jhotdraw.xml.css.StyleManager", "parameterclass":663, "classid":660, "classname":"org.jhotdraw.xml.css.CSSParser", "methodid":6503, "methodname":"org.jhotdraw.xml.css.CSSParser.parseRuleset(java.io.StreamTokenizer,org.jhotdraw.xml.css.StyleManager)", "isreturn":0, "sourcecode":"private void parseRuleset(StreamTokenizer tt, StyleManager rm) throws IOException {\r\n    // parse selector list\r\n    List<String> selectors = parseSelectorList(tt);\r\n    if ((tt.nextToken()) != {)\r\n        throw new IOException((\"Ruleset { missing for \" + selectors));\r\n\r\n    Map<String, String> declarations = parseDeclarationMap(tt);\r\n    if ((tt.nextToken()) != })\r\n        throw new IOException((\"Ruleset } missing for \" + selectors));\r\n\r\n    for (String selector : selectors) {\r\n        rm.add(new CSSRule(selector, declarations));\r\n        // System.out.println(\"CSSParser.add(\"+selector+\",\"+declarations);\r\n        /* for (Map.Entry<String,String> entry : declarations.entrySet()) {\n        rm.add(new CSSRule(selector, entry.getKey(), entry.getValue()));\n        }\n         */\r\n    }\r\n}"},
 {"id":1803, "parametername":"CSSRule rule", "parametertype":"org.jhotdraw.xml.css.CSSRule", "parameterclass":662, "classid":663, "classname":"org.jhotdraw.xml.css.StyleManager", "methodid":6518, "methodname":"org.jhotdraw.xml.css.StyleManager.add(org.jhotdraw.xml.css.CSSRule)", "isreturn":0, "sourcecode":"public void add(CSSRule rule) {\r\n    rules.add(rule);\r\n}"}]